{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"533d18e79d9736c2b5dcac97290770c048e2cb3b","modified":1568788109188},{"_id":"themes/next/.all-contributorsrc","hash":"a03f0ccb9b6798679dc2a77e5c395a167ce388c2","modified":1568790332032},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1568790332032},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1568790332032},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1568790332032},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1568790332036},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1568790332036},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1568790332036},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1568790332036},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1568790332036},{"_id":"themes/next/_config.yml","hash":"541f688ce047fc7480c719081af6cac0b4be07a7","modified":1568790377327},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1568790332036},{"_id":"themes/next/gulpfile.js","hash":"94e80ca87826b90744618b00d08bc7e5eefbaef4","modified":1568790332040},{"_id":"themes/next/package.json","hash":"aca29ae07d4d4164ac260c2ae1e27d2ce6cd7ffe","modified":1568790332056},{"_id":"source/_posts/VUE实现前端视频录制和截图.md","hash":"a6eb4deb93e4941a96a4c7235a3d33dc9d53fb0c","modified":1568788109188},{"_id":"source/_posts/VUE生成二维码并下载.md","hash":"20251e7f07ba750801a02eecfe97335d04125654","modified":1568788109188},{"_id":"source/_posts/laravel解析Excel文件.md","hash":"f8913f1103ce45c77871a6e5006cc4235068cb9b","modified":1568788109188},{"_id":"source/_posts/php上传大文件配置.md","hash":"f34cdbd46073f6c4be902374238fcf96c7874028","modified":1568788109188},{"_id":"source/_posts/nvm的使用.md","hash":"e986acca3fd56099ebef6fee9fa750398595cf80","modified":1568790543527},{"_id":"source/_posts/swagger在laravel中的使用.md","hash":"47fdb7064b007bf13ef40634a169de6be721ef82","modified":1568788109188},{"_id":"source/categories/index.md","hash":"840e61eb41547e2b57ce24aeb3f09d6e9e56c8c9","modified":1568788109192},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1568790332000},{"_id":"themes/next/.git/config","hash":"f832f515b1ca3e88e3ef1dbc4a8ae5b14c0f0965","modified":1568790332004},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568790317580},{"_id":"themes/next/.git/index","hash":"b3a4029e1f1eb1ec54d8e017d4fb40d8181effe6","modified":1568790332072},{"_id":"themes/next/.git/packed-refs","hash":"b1eeeebdf4edd02d974834c7ecfe2b9d90d942d6","modified":1568790332000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1568790332032},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"fb80bb52a76dc9100d9524456f73c7a263c85437","modified":1568790332032},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"88780daa3db837a34fe3ed90cc61cc578b5760ed","modified":1568790332032},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1568790332032},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1568790332032},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1568790332032},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1568790332032},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1568790332032},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1568790332032},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1568790332032},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1568790332036},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1568790332036},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1568790332036},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1568790332036},{"_id":"themes/next/docs/AUTHORS.md","hash":"44c3b963d877c6cbc3a720ed4e266532db3c12ac","modified":1568790332036},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1568790332036},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1568790332036},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1568790332036},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1568790332040},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1568790332040},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1568790332040},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1568790332040},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1568790332040},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1568790332040},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1568790332040},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1568790332044},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1568790332044},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1568790332044},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1568790332044},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1568790332044},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1568790332044},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1568790332044},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1568790332044},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1568790332044},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1568790332044},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1568790332044},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1568790332044},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1568790332044},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1568790332044},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1568790332044},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1568790332044},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1568790332044},{"_id":"themes/next/layout/_layout.swig","hash":"fe827c1a57e4af456a796a104a967f61778cc767","modified":1568790332044},{"_id":"themes/next/layout/archive.swig","hash":"72b4e0786668bc61c11eafa12da5d75272b93b61","modified":1568790332052},{"_id":"themes/next/layout/category.swig","hash":"38433a9de15f019267c9130e243e14343fb9bc3d","modified":1568790332052},{"_id":"themes/next/layout/index.swig","hash":"20e776e8863f662c154bb765aaa0a1a22bf78126","modified":1568790332052},{"_id":"themes/next/layout/page.swig","hash":"f038deec70adfecb0a87256ba8c319d4781925a5","modified":1568790332052},{"_id":"themes/next/layout/post.swig","hash":"0c3b34a6832b8e33574edc17095344f9e0bea74f","modified":1568790332056},{"_id":"themes/next/layout/tag.swig","hash":"153fb65e710a9643634aea4813431e92c11d09fe","modified":1568790332056},{"_id":"source/_posts/swagger在laravel中的使用/swagger1.png","hash":"a208394d50e26798eb9be892e4ce506e07042cda","modified":1568788109188},{"_id":"source/_posts/swagger在laravel中的使用/swagger6.png","hash":"0028c2119d55a9c61cbf4bf4fd43b4919ad8abfa","modified":1568788109188},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1568790317580},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1568790317584},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1568790317584},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1568790317584},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1568790317584},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1568790317584},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1568790317584},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1568790317584},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1568790317584},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1568790317584},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1568790317584},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1568790317580},{"_id":"themes/next/.git/logs/HEAD","hash":"9fe049b3a4e106c510bd8d5c694a76ebfddd7166","modified":1568790332004},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"041ee72ebff2ac5a630a374a76fb7868d32fa23e","modified":1568790332032},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"5cb6594d5d96ad268cfa1dfd274bf3f00f3bf41c","modified":1568790332032},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"30bcdaa63eac3857240d5a46890f9054d9a7c0f7","modified":1568790332032},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"68f6fc305721f975a18703e94eecf843caaae566","modified":1568790332032},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1568790332040},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1568790332040},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1568790332040},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ca39e510b43ea1efe7e5feeca2243375e55eff5c","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1568790332040},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1568790332040},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1bb927e0560d3d3c95369da461911cced5bd537b","modified":1568790332044},{"_id":"themes/next/layout/_macro/post.swig","hash":"20ef46756b2a8026cc85e7830e5414fe749d1391","modified":1568790332044},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ccef7a8cd704575cf7bfe63c0492fe43592b1a6d","modified":1568790332044},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1568790332048},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9d9a5d6a2f0d4f65fe57c3737c91ecaf276c1f5c","modified":1568790332048},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1568790332048},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1568790332048},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1568790332048},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1568790332048},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1568790332048},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1568790332052},{"_id":"themes/next/layout/_scripts/three.swig","hash":"eee4d26b5c0bb7872a21346151c38612a9b76d0b","modified":1568790332052},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"d3448044776dd23abd42b09ef0f26827f95efdf5","modified":1568790332052},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1568790332052},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1568790332052},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1568790332052},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"65f94b115c42d33e6a90b1f8e62075c6d4ac60c1","modified":1568790332052},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1568790332052},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1568790332052},{"_id":"themes/next/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1568790332056},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1568790332056},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1568790332056},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1568790332056},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1568790332056},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1568790332056},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1568790332056},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1568790332056},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1568790332056},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1568790332056},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1568790332056},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1568790332056},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1568790332056},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1568790332056},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1568790332056},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1568790332056},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1568790332056},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1568790332056},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1568790332056},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1568790332056},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1568790332056},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1568790332056},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1568790332056},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1568790332064},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1568790332064},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1568790332064},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568790332064},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1568790332064},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1568790332064},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1568790332064},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1568790332064},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1568790332064},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1568790332064},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1568790332064},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1568790332064},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1568790332064},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1568790332064},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1568790332064},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1568790332064},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1568790332064},{"_id":"themes/next/source/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1568790332068},{"_id":"themes/next/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1568790332068},{"_id":"themes/next/source/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1568790332068},{"_id":"themes/next/source/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1568790332068},{"_id":"themes/next/source/js/utils.js","hash":"6aa2f859eee9791a2a41d3cf58403dd19714fbfb","modified":1568790332068},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1568790332068},{"_id":"source/_posts/swagger在laravel中的使用/swagger2.png","hash":"5fa91101f811c880bb87e657b50f95f33ab7d8ae","modified":1568788109188},{"_id":"source/_posts/swagger在laravel中的使用/swagger3.png","hash":"dacad9389a6a90a6a2a8f9dbe884b0960146b216","modified":1568788109188},{"_id":"source/_posts/swagger在laravel中的使用/swagger4.png","hash":"84e452b2a2a0501b607f3b9836258933302a0102","modified":1568788109188},{"_id":"source/_posts/swagger在laravel中的使用/swagger5.png","hash":"94ef36c980900eafa324d2b99944d50ac05bdaa7","modified":1568788109188},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568790332064},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568790332064},{"_id":"themes/next/.git/refs/heads/master","hash":"0e0de2e1276eba2add6986f2a88eae1e5c7641b8","modified":1568790332004},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1568790332044},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1568790332048},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0edd29b972aceecccb65b3e63d79c01f6639d0c5","modified":1568790332048},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"9718d372887f4b0ee952da42d10b2f736d0fc6de","modified":1568790332048},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e0767e09a632264f189570e95ccf70fb1dad9110","modified":1568790332048},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6236a874b93ac1be56fc21df8534a7ae8acffcfc","modified":1568790332048},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"226ca201e73111b130730736d808ffddcdc8ee51","modified":1568790332048},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"20c8e67d29dfbcd1c72739b00e91f86ef46d7769","modified":1568790332048},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1568790332048},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"02a4706ce7ed6f6d2f660948a74e9e8cd6dfa1fd","modified":1568790332048},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1568790332048},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"b68ccb90e2ee42bd98c93fc030a29d38689dd55c","modified":1568790332048},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1568790332048},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f05225f7d0ada3853c425899b515056b96ca49bf","modified":1568790332048},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"90a0869c6cc351d92fc97bf42fdc6e1bfa6bc513","modified":1568790332048},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1568790332048},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1568790332048},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1568790332048},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1568790332048},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"4e71b26d91ab750791f3be6035a946eb96ca7b34","modified":1568790332048},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1568790332052},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1568790332048},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1568790332052},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1568790332052},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1568790332052},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1568790332052},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1568790332052},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1568790332052},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1568790332052},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1568790332052},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1568790332052},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1568790332052},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1568790332052},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1568790332052},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1568790332052},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1568790332052},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1568790332052},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ab937195168a0e8a911bf5730307f680e6d521e9","modified":1568790332052},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"b9d7a99534e9c2608765b958eae3b5c50f5e4889","modified":1568790332052},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1568790332052},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1568790332052},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1568790332052},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1568790332052},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1568790332052},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1568790332052},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1568790332052},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1568790332052},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1568790332052},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b710d896fccd34657a70244645470e476a4e069f","modified":1568790332056},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1568790332056},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1568790332056},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1568790332052},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1568790332056},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1568790332064},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1568790332064},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1568790332064},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1568790332064},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"14e4bd0bd702c7a7f83bf7d529fade2d0634c2f1","modified":1568790332064},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1e99dfbe7736acfee59d6f54dbd6b33ddfe2fe8a","modified":1568790332064},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1568790332064},{"_id":"themes/next/source/css/_variables/base.styl","hash":"639b65a486154cf1f70c31f3fff440ce022255c0","modified":1568790332064},{"_id":"themes/next/source/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1568790332068},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1568790332068},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1568790332072},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1568790332072},{"_id":"source/_posts/swagger在laravel中的使用/swagger7.png","hash":"fc67167921cf2ed79351b8826041633d9496b7e2","modified":1568788109192},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1568790332056},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1568790332056},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9fe049b3a4e106c510bd8d5c694a76ebfddd7166","modified":1568790332004},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1568790332000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b6b9dc8a350e51ad7b8bb08141a61fc2fd7466fc","modified":1568790332064},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1568790332060},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"cb25eed35117be256ea7a573fec2cdfb66901dbb","modified":1568790332064},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1568790332064},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1568790332064},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1568790332064},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1568790332064},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c42802ecca44d4ea435c26700070a65375edfd7c","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"73fe940abb0787a19f505fb614aafe73c8a24f08","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"dc2a3217f9b50cf42c4262c9e486281203eaef83","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e859283440617f18f1ad298f7f1218aafa9b39d5","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b22583b7340c2686a46aefeeed086540b08324a3","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2ab9e0499f241d1b91e2f7722072d23c95104e1f","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ac523812bebb13cde268dc3cde65d0b7c6862e30","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44ac3dff65c1bd3fe47feeed8e58aa00c9f2fb7b","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"3bcb47b9b9ea671e0a3cba6a821045d3434734cb","modified":1568790332064},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1568790332064},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1568790332068},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568790332068},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9fe049b3a4e106c510bd8d5c694a76ebfddd7166","modified":1568790332000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"caf2abcffa5674adea300046fd3dbee2e830b40e","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1568790332056},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"386fce803e5240c2d6860ae53f38ae3aa2e8b680","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"4718d17fc4ee30802925890771a032d966133a31","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4efe9174369bfe2125bd167feac18a07271635d6","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"919cc9aaf60b03c2bf00aca3748127f38a2026cf","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"db718eee14347f30ccabaa33bf6f9fbdea8b9462","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"3abf46c513e92f3f36c14d90f032983b94f36488","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"caa9a78993d549117cdc8fa7a76c473a5e7f0f67","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"541d6257023915a7caca7540f12cdf283ce025f3","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"469d5e4e188f484abff24eddd5640fa4d4d77ed1","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e77986ca3b914348b5c3c6b34c94b49ad53e4b9c","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"514999bde116ef5cd5f7aedea80059b12a87a1ea","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"a1eed8fe7f97885a9234502a197abf2e90ba22b6","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"754f70161b7e810f582cc4755d177859dcbcfced","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"db44ef2b99fc33d003010f38e64caad930c08ad0","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"782cf8847c9aca96f9194fcf1d910509e4073ce6","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"17c3f58fb84453603621d6a718fcc821c8d6bced","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1568790332060},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"38ce7d692b8bc6fde02e3271dfd50ad37e107e4e","modified":1568790332064},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1568790332064},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568790332068},{"_id":"themes/next/.git/objects/pack/pack-988aeb37b61fa97e7efbaba277fe73d97fbdc1b7.idx","hash":"27e9a6d86d2a9750aa8f0d6e194e83b53937fd8a","modified":1568790331824},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568790332068},{"_id":"themes/next/.git/objects/pack/pack-988aeb37b61fa97e7efbaba277fe73d97fbdc1b7.pack","hash":"b30f7cc8695a808be666af0f201e5f1485007d94","modified":1568790331820},{"_id":"public/categories/index.html","hash":"6836e0253785aac74aa9fd8e918174e6ed12b8b1","modified":1568790550120},{"_id":"public/archives/index.html","hash":"0692d161accf7b2a4c869f15b0c627660f923da3","modified":1568790550120},{"_id":"public/archives/2019/index.html","hash":"0b71dca42fc4e84abde7eefdc559af5c6c1d93d5","modified":1568790550120},{"_id":"public/archives/2019/07/index.html","hash":"a67fd5e9190382088d67a9ece8af81eddb979d0d","modified":1568790550120},{"_id":"public/archives/2019/08/index.html","hash":"37fcce24cd806acddd57057b89f6a68b97bea78b","modified":1568790550120},{"_id":"public/archives/2019/09/index.html","hash":"2a21bc36d4157d8a63eae543b2d1f66177f82bfb","modified":1568790550120},{"_id":"public/categories/VUE/index.html","hash":"b219363e47469d035fb2d070e15c32ac6be9a4c9","modified":1568790550120},{"_id":"public/categories/laravel/index.html","hash":"ac62bd6cc4044865474d1aafa29bc5dd722abadc","modified":1568790550120},{"_id":"public/categories/服务器配置问题/index.html","hash":"e9ee6389f472d283dfe33439db9ba762bd5ef0e5","modified":1568790550121},{"_id":"public/categories/开发小工具/index.html","hash":"e5416bef02eabf5b72e239b7f35df847b683f6e1","modified":1568790550121},{"_id":"public/2019/09/17/VUE实现前端视频录制和截图/index.html","hash":"f549bde347102b3514d457363ed321147487a522","modified":1568790550121},{"_id":"public/2019/08/16/php上传大文件配置/index.html","hash":"d7a963185118a8e5f0f766a27d08c4eeafd091a3","modified":1568790550121},{"_id":"public/2019/08/04/laravel解析Excel文件/index.html","hash":"ed9562f5c70896fd062d85c5864fee01d85ea079","modified":1568790550121},{"_id":"public/2019/07/19/swagger在laravel中的使用/index.html","hash":"9526e267932758f2b14b0c39030c455d87efefd7","modified":1568790550121},{"_id":"public/index.html","hash":"18f99c0dddac98f1b50826de9232d1566d8c862f","modified":1568790550121},{"_id":"public/2019/09/18/nvm的使用/index.html","hash":"fa3019559c426beed47e7a5d4085332a2a2db73b","modified":1568790550123},{"_id":"public/2019/09/18/VUE生成二维码并下载/index.html","hash":"0beedcec0255e46a205b3f2e19e0e1645bdc68a1","modified":1568790550123},{"_id":"public/CNAME","hash":"533d18e79d9736c2b5dcac97290770c048e2cb3b","modified":1568790550126},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1568790550126},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1568790550126},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568790550126},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1568790550126},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1568790550126},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1568790550126},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1568790550126},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1568790550126},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1568790550126},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1568790550126},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1568790550126},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1568790550126},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1568790550126},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1568790550126},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1568790550126},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1568790550126},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1568790550127},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger1.png","hash":"a208394d50e26798eb9be892e4ce506e07042cda","modified":1568790550127},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger6.png","hash":"0028c2119d55a9c61cbf4bf4fd43b4919ad8abfa","modified":1568790550127},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger5.png","hash":"94ef36c980900eafa324d2b99944d50ac05bdaa7","modified":1568790550127},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568790550462},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568790550462},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger3.png","hash":"dacad9389a6a90a6a2a8f9dbe884b0960146b216","modified":1568790550462},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger2.png","hash":"5fa91101f811c880bb87e657b50f95f33ab7d8ae","modified":1568790550462},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger4.png","hash":"84e452b2a2a0501b607f3b9836258933302a0102","modified":1568790550463},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1568790550466},{"_id":"public/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1568790550466},{"_id":"public/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1568790550466},{"_id":"public/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1568790550466},{"_id":"public/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1568790550466},{"_id":"public/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1568790550466},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1568790550466},{"_id":"public/css/main.css","hash":"cbd7171cf7654ae5883a9e3bf385fbac55b82869","modified":1568790550466},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568790550466},{"_id":"public/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1568790550467},{"_id":"public/js/utils.js","hash":"6aa2f859eee9791a2a41d3cf58403dd19714fbfb","modified":1568790550467},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1568790550468},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger7.png","hash":"fc67167921cf2ed79351b8826041633d9496b7e2","modified":1568790550468},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1568790550469},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1568790550472},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1568790550475},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1568790550475}],"Category":[{"name":"VUE","_id":"ck0oxdz1r0003w6yhvfnuebgw"},{"name":"laravel","_id":"ck0oxdz1w0008w6yhxm7k861m"},{"name":"服务器配置问题","_id":"ck0oxdz1x000bw6yh9szntwu2"},{"name":"开发小工具","_id":"ck0oxdz1x000dw6yhzmuvi3vi"}],"Data":[],"Page":[{"title":"分类","date":"2019-07-24T02:58:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-07-24 10:58:39\ntype: categories\n---\n","updated":"2019-09-18T06:28:29.192Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck0oxdz1o0001w6yhklyobtwc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"VUE生成二维码并下载","_content":"# 开始前了解\n>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。   \n\n# 引入插件\n>在命令行执行 npm install qrcodejs2     \n\n>在vue文件中 import QRcode from 'qrcodejs2'     \n\n# 插件的使用\n\n## 挂载点，我们需要把要生成的二维码挂载都哪里\n>首先要在模版中添加一个id=qrcode的div标签    \n\n ```html\n<template>\n    <div id=\"qrcode\">\n\n    </div>\n</template>\n```\n\n## 生成函数\n>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。\n```javascript  \nqrcode(){\n    document.getElementById(\"qrcode\").innerHTML = \"\"; //清除上次二维码的数据\n    let qrcode = new QRcode('qrcode',{\n        width:100,\n        height:100,\n        text:\"你是不是在做梦哦\",\n\n    })\n},\n```\n\n## 执行函数\n>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。\n\n# 下载\n>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     \n\n>主要的思路就是：  \n1. 获取到canvas标签；\n2. 生成一个a标签；\n3. 把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；\n4. 给图片一个下载名，然后触发a标签的click事件；      \n\n```javascript\ndownload(){\n    let myCanvas = document.getElementById('qrcode').getElementsByTagName('canvas');\n    let a = document.createElement(\"a\")\n    a.href = myCanvas[0].toDataURL('image/png').replace('image/png', 'image/octet-stream')\n    a.download = \"文件名\";\n    a.click();\n},\n```  ","source":"_posts/VUE生成二维码并下载.md","raw":"---\nlayout: post\ntitle: VUE生成二维码并下载\ncategories: VUE\n---\n# 开始前了解\n>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。   \n\n# 引入插件\n>在命令行执行 npm install qrcodejs2     \n\n>在vue文件中 import QRcode from 'qrcodejs2'     \n\n# 插件的使用\n\n## 挂载点，我们需要把要生成的二维码挂载都哪里\n>首先要在模版中添加一个id=qrcode的div标签    \n\n ```html\n<template>\n    <div id=\"qrcode\">\n\n    </div>\n</template>\n```\n\n## 生成函数\n>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。\n```javascript  \nqrcode(){\n    document.getElementById(\"qrcode\").innerHTML = \"\"; //清除上次二维码的数据\n    let qrcode = new QRcode('qrcode',{\n        width:100,\n        height:100,\n        text:\"你是不是在做梦哦\",\n\n    })\n},\n```\n\n## 执行函数\n>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。\n\n# 下载\n>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     \n\n>主要的思路就是：  \n1. 获取到canvas标签；\n2. 生成一个a标签；\n3. 把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；\n4. 给图片一个下载名，然后触发a标签的click事件；      \n\n```javascript\ndownload(){\n    let myCanvas = document.getElementById('qrcode').getElementsByTagName('canvas');\n    let a = document.createElement(\"a\")\n    a.href = myCanvas[0].toDataURL('image/png').replace('image/png', 'image/octet-stream')\n    a.download = \"文件名\";\n    a.click();\n},\n```  ","slug":"VUE生成二维码并下载","published":1,"date":"2019-09-18T06:28:29.188Z","updated":"2019-09-18T06:28:29.188Z","comments":1,"photos":[],"link":"","_id":"ck0oxdz1k0000w6yh4ygijte1","content":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。   </p>\n</blockquote><a id=\"more\"></a>\n<h1 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h1><blockquote>\n<p>在命令行执行 npm install qrcodejs2     </p>\n</blockquote>\n<blockquote>\n<p>在vue文件中 import QRcode from ‘qrcodejs2’     </p>\n</blockquote>\n<h1 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h1><h2 id=\"挂载点，我们需要把要生成的二维码挂载都哪里\"><a href=\"#挂载点，我们需要把要生成的二维码挂载都哪里\" class=\"headerlink\" title=\"挂载点，我们需要把要生成的二维码挂载都哪里\"></a>挂载点，我们需要把要生成的二维码挂载都哪里</h2><blockquote>\n<p>首先要在模版中添加一个id=qrcode的div标签    </p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h2><blockquote>\n<p>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qrcode()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>).innerHTML = <span class=\"string\">\"\"</span>; <span class=\"comment\">//清除上次二维码的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRcode(<span class=\"string\">'qrcode'</span>,&#123;</span><br><span class=\"line\">        width:<span class=\"number\">100</span>,</span><br><span class=\"line\">        height:<span class=\"number\">100</span>,</span><br><span class=\"line\">        text:<span class=\"string\">\"你是不是在做梦哦\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行函数\"><a href=\"#执行函数\" class=\"headerlink\" title=\"执行函数\"></a>执行函数</h2><blockquote>\n<p>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。</p>\n</blockquote>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><blockquote>\n<p>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     </p>\n</blockquote>\n<blockquote>\n<p>主要的思路就是：  </p>\n<ol>\n<li>获取到canvas标签；</li>\n<li>生成一个a标签；</li>\n<li>把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；</li>\n<li>给图片一个下载名，然后触发a标签的click事件；      </li>\n</ol>\n</blockquote>\n<pre><code class=\"javascript\">download(){\n    <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>).getElementsByTagName(<span class=\"string\">'canvas'</span>);\n    <span class=\"keyword\">let</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)\n    a.href = myCanvas[<span class=\"number\">0</span>].toDataURL(<span class=\"string\">'image/png'</span>).replace(<span class=\"string\">'image/png'</span>, <span class=\"string\">'image/octet-stream'</span>)\n    a.download = <span class=\"string\">\"文件名\"</span>;\n    a.click();\n},</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。   </p>\n</blockquote>","more":"\n<h1 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h1><blockquote>\n<p>在命令行执行 npm install qrcodejs2     </p>\n</blockquote>\n<blockquote>\n<p>在vue文件中 import QRcode from ‘qrcodejs2’     </p>\n</blockquote>\n<h1 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h1><h2 id=\"挂载点，我们需要把要生成的二维码挂载都哪里\"><a href=\"#挂载点，我们需要把要生成的二维码挂载都哪里\" class=\"headerlink\" title=\"挂载点，我们需要把要生成的二维码挂载都哪里\"></a>挂载点，我们需要把要生成的二维码挂载都哪里</h2><blockquote>\n<p>首先要在模版中添加一个id=qrcode的div标签    </p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h2><blockquote>\n<p>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qrcode()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>).innerHTML = <span class=\"string\">\"\"</span>; <span class=\"comment\">//清除上次二维码的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRcode(<span class=\"string\">'qrcode'</span>,&#123;</span><br><span class=\"line\">        width:<span class=\"number\">100</span>,</span><br><span class=\"line\">        height:<span class=\"number\">100</span>,</span><br><span class=\"line\">        text:<span class=\"string\">\"你是不是在做梦哦\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行函数\"><a href=\"#执行函数\" class=\"headerlink\" title=\"执行函数\"></a>执行函数</h2><blockquote>\n<p>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。</p>\n</blockquote>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><blockquote>\n<p>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     </p>\n</blockquote>\n<blockquote>\n<p>主要的思路就是：  </p>\n<ol>\n<li>获取到canvas标签；</li>\n<li>生成一个a标签；</li>\n<li>把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；</li>\n<li>给图片一个下载名，然后触发a标签的click事件；      </li>\n</ol>\n</blockquote>\n<pre><code class=\"javascript\">download(){\n    <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>).getElementsByTagName(<span class=\"string\">'canvas'</span>);\n    <span class=\"keyword\">let</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)\n    a.href = myCanvas[<span class=\"number\">0</span>].toDataURL(<span class=\"string\">'image/png'</span>).replace(<span class=\"string\">'image/png'</span>, <span class=\"string\">'image/octet-stream'</span>)\n    a.download = <span class=\"string\">\"文件名\"</span>;\n    a.click();\n},</code></pre>\n"},{"title":"VUE实现前端视频录制和截图","date":"2019-09-17T07:15:18.000Z","_content":"\n## 介绍\n\n该功能是基于`vue-video-player`和`recordrtc`两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。\n\n## 依赖\n\n```bash\nnpm install vue-video-player recordrtc\n```\n\n## 引入\n\n因为`vue-video-player`文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：\n\n```javascript\n//组件内引入\nimport { videoPlayer } from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\n\n//全局引入\nimport VideoPlayer from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\nVue.use(VideoPlayer);\n```\n然后在需要使用的组件内引入`recordrtc`\n\n```javascript\nimport RecordRTC from 'recordrtc'\n```\n\n## 截图\n\n主要思路：    \n1. 获取当前播放的`video`标签；\n2. 创建一个`canvas`；\n3. 调用`canvas`的`drawImage`方法进行绘制；\n4. 将`canvas`转换为图片或base64；\n\n### 获取video标签\n\n因为在vue项目中，可以利用`ref`属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n```\n\n### 创建canvas\n\n```javascript\n//创建一个canvas\nlet canvasEl = document.createElement('canvas');\ncanvasEl.width = videoEl.videoWidth;\ncanvasEl.height = videoEl.videoHeight;\n```\n\n### 调用drawImage方法\n\n具体关于`drawImage`方法的使用，可以参考[文档](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage \"drwaImage文档\")\n\n```javascript\n//截图\nlet ctx = canvasEl.getContext('2d');\nctx.drawImage(videoEl, 0, 0, 544, 960, 0, 0, 544, 960);\n```\n\n### 转换为base64\n\n```javascript\nlet image = canvasEl.toDataURL('image/png');\n```\n\n## 视频录制\n\n实现思路：    \n- 开始录像    \n    1. 获取video标签；\n    2. 获取视频流；\n    3. 将视频流注入到`recordrtc`；\n    4. 调用录制事件；\n- 停止录像       \n    1. 获取到录制的`blob`对象；\n    2. 生成可以直接播放的`url`；\n    2. 将`blob`转换为视频文件；\n\n### 开始录像\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n\n//获取视频流\nlet stream = videoEl.captureStream();\n\n//将视频流注入到recordRTC\nthis.recorder = RecordRTC(stream, {\n    type: 'video'\n});\n\n//开始录制\nthis.recorder.startRecording();\n```\n\n### 停止录像\n\n```javascript\n//停止录制\nthis.recorder.stopRecording(() => {\n\n    //获取录制的blob对象\n    let blob = this.recorder.getBlob();\n    this.videoFile = this.recorder.getBlob();\n\n    //将blob转换为可以供video播放的url\n    let url = URL.createObjectURL(blob);\n\n    //将blob对象转换为文件\n    let fileName = this.videoFileName+\".webm\";\n    let fileObject = new File([blob], fileName, {\n        type: 'video/webm'\n    });     \n    \n});\n```\n\n## 录制插件\n\n如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去[这里](https://github.com/lp-liupan/vue-video-tape \"vue-video-tape\")","source":"_posts/VUE实现前端视频录制和截图.md","raw":"---\ntitle: VUE实现前端视频录制和截图\ndate: 2019-09-17 15:15:18\ncategories: VUE\n---\n\n## 介绍\n\n该功能是基于`vue-video-player`和`recordrtc`两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。\n\n## 依赖\n\n```bash\nnpm install vue-video-player recordrtc\n```\n\n## 引入\n\n因为`vue-video-player`文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：\n\n```javascript\n//组件内引入\nimport { videoPlayer } from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\n\n//全局引入\nimport VideoPlayer from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\nVue.use(VideoPlayer);\n```\n然后在需要使用的组件内引入`recordrtc`\n\n```javascript\nimport RecordRTC from 'recordrtc'\n```\n\n## 截图\n\n主要思路：    \n1. 获取当前播放的`video`标签；\n2. 创建一个`canvas`；\n3. 调用`canvas`的`drawImage`方法进行绘制；\n4. 将`canvas`转换为图片或base64；\n\n### 获取video标签\n\n因为在vue项目中，可以利用`ref`属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n```\n\n### 创建canvas\n\n```javascript\n//创建一个canvas\nlet canvasEl = document.createElement('canvas');\ncanvasEl.width = videoEl.videoWidth;\ncanvasEl.height = videoEl.videoHeight;\n```\n\n### 调用drawImage方法\n\n具体关于`drawImage`方法的使用，可以参考[文档](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage \"drwaImage文档\")\n\n```javascript\n//截图\nlet ctx = canvasEl.getContext('2d');\nctx.drawImage(videoEl, 0, 0, 544, 960, 0, 0, 544, 960);\n```\n\n### 转换为base64\n\n```javascript\nlet image = canvasEl.toDataURL('image/png');\n```\n\n## 视频录制\n\n实现思路：    \n- 开始录像    \n    1. 获取video标签；\n    2. 获取视频流；\n    3. 将视频流注入到`recordrtc`；\n    4. 调用录制事件；\n- 停止录像       \n    1. 获取到录制的`blob`对象；\n    2. 生成可以直接播放的`url`；\n    2. 将`blob`转换为视频文件；\n\n### 开始录像\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n\n//获取视频流\nlet stream = videoEl.captureStream();\n\n//将视频流注入到recordRTC\nthis.recorder = RecordRTC(stream, {\n    type: 'video'\n});\n\n//开始录制\nthis.recorder.startRecording();\n```\n\n### 停止录像\n\n```javascript\n//停止录制\nthis.recorder.stopRecording(() => {\n\n    //获取录制的blob对象\n    let blob = this.recorder.getBlob();\n    this.videoFile = this.recorder.getBlob();\n\n    //将blob转换为可以供video播放的url\n    let url = URL.createObjectURL(blob);\n\n    //将blob对象转换为文件\n    let fileName = this.videoFileName+\".webm\";\n    let fileObject = new File([blob], fileName, {\n        type: 'video/webm'\n    });     \n    \n});\n```\n\n## 录制插件\n\n如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去[这里](https://github.com/lp-liupan/vue-video-tape \"vue-video-tape\")","slug":"VUE实现前端视频录制和截图","published":1,"updated":"2019-09-18T06:28:29.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oxdz1p0002w6yhllhigia3","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>该功能是基于<code>vue-video-player</code>和<code>recordrtc</code>两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。</p><a id=\"more\"></a>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-player recordrtc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>因为<code>vue-video-player</code>文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件内引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; videoPlayer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VideoPlayer <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\">Vue.use(VideoPlayer);</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要使用的组件内引入<code>recordrtc</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RecordRTC <span class=\"keyword\">from</span> <span class=\"string\">'recordrtc'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p>主要思路：    </p>\n<ol>\n<li>获取当前播放的<code>video</code>标签；</li>\n<li>创建一个<code>canvas</code>；</li>\n<li>调用<code>canvas</code>的<code>drawImage</code>方法进行绘制；</li>\n<li>将<code>canvas</code>转换为图片或base64；</li>\n</ol>\n<h3 id=\"获取video标签\"><a href=\"#获取video标签\" class=\"headerlink\" title=\"获取video标签\"></a>获取video标签</h3><p>因为在vue项目中，可以利用<code>ref</code>属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建canvas\"><a href=\"#创建canvas\" class=\"headerlink\" title=\"创建canvas\"></a>创建canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvasEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">canvasEl.width = videoEl.videoWidth;</span><br><span class=\"line\">canvasEl.height = videoEl.videoHeight;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用drawImage方法\"><a href=\"#调用drawImage方法\" class=\"headerlink\" title=\"调用drawImage方法\"></a>调用drawImage方法</h3><p>具体关于<code>drawImage</code>方法的使用，可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drwaImage文档\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截图</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = canvasEl.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">ctx.drawImage(videoEl, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换为base64\"><a href=\"#转换为base64\" class=\"headerlink\" title=\"转换为base64\"></a>转换为base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> image = canvasEl.toDataURL(<span class=\"string\">'image/png'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视频录制\"><a href=\"#视频录制\" class=\"headerlink\" title=\"视频录制\"></a>视频录制</h2><p>实现思路：    </p>\n<ul>\n<li>开始录像    <ol>\n<li>获取video标签；</li>\n<li>获取视频流；</li>\n<li>将视频流注入到<code>recordrtc</code>；</li>\n<li>调用录制事件；</li>\n</ol>\n</li>\n<li>停止录像       <ol>\n<li>获取到录制的<code>blob</code>对象；</li>\n<li>生成可以直接播放的<code>url</code>；</li>\n<li>将<code>blob</code>转换为视频文件；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"开始录像\"><a href=\"#开始录像\" class=\"headerlink\" title=\"开始录像\"></a>开始录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取视频流</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = videoEl.captureStream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将视频流注入到recordRTC</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder = RecordRTC(stream, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'video'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.startRecording();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止录像\"><a href=\"#停止录像\" class=\"headerlink\" title=\"停止录像\"></a>停止录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//停止录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.stopRecording(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取录制的blob对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.videoFile = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob转换为可以供video播放的url</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob对象转换为文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"keyword\">this</span>.videoFileName+<span class=\"string\">\".webm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObject = <span class=\"keyword\">new</span> File([blob], fileName, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'video/webm'</span></span><br><span class=\"line\">    &#125;);     </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"录制插件\"><a href=\"#录制插件\" class=\"headerlink\" title=\"录制插件\"></a>录制插件</h2><p>如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去<a href=\"https://github.com/lp-liupan/vue-video-tape\" title=\"vue-video-tape\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>该功能是基于<code>vue-video-player</code>和<code>recordrtc</code>两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。</p>","more":"\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-player recordrtc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>因为<code>vue-video-player</code>文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件内引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; videoPlayer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VideoPlayer <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\">Vue.use(VideoPlayer);</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要使用的组件内引入<code>recordrtc</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RecordRTC <span class=\"keyword\">from</span> <span class=\"string\">'recordrtc'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p>主要思路：    </p>\n<ol>\n<li>获取当前播放的<code>video</code>标签；</li>\n<li>创建一个<code>canvas</code>；</li>\n<li>调用<code>canvas</code>的<code>drawImage</code>方法进行绘制；</li>\n<li>将<code>canvas</code>转换为图片或base64；</li>\n</ol>\n<h3 id=\"获取video标签\"><a href=\"#获取video标签\" class=\"headerlink\" title=\"获取video标签\"></a>获取video标签</h3><p>因为在vue项目中，可以利用<code>ref</code>属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建canvas\"><a href=\"#创建canvas\" class=\"headerlink\" title=\"创建canvas\"></a>创建canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvasEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">canvasEl.width = videoEl.videoWidth;</span><br><span class=\"line\">canvasEl.height = videoEl.videoHeight;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用drawImage方法\"><a href=\"#调用drawImage方法\" class=\"headerlink\" title=\"调用drawImage方法\"></a>调用drawImage方法</h3><p>具体关于<code>drawImage</code>方法的使用，可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drwaImage文档\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截图</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = canvasEl.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">ctx.drawImage(videoEl, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换为base64\"><a href=\"#转换为base64\" class=\"headerlink\" title=\"转换为base64\"></a>转换为base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> image = canvasEl.toDataURL(<span class=\"string\">'image/png'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视频录制\"><a href=\"#视频录制\" class=\"headerlink\" title=\"视频录制\"></a>视频录制</h2><p>实现思路：    </p>\n<ul>\n<li>开始录像    <ol>\n<li>获取video标签；</li>\n<li>获取视频流；</li>\n<li>将视频流注入到<code>recordrtc</code>；</li>\n<li>调用录制事件；</li>\n</ol>\n</li>\n<li>停止录像       <ol>\n<li>获取到录制的<code>blob</code>对象；</li>\n<li>生成可以直接播放的<code>url</code>；</li>\n<li>将<code>blob</code>转换为视频文件；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"开始录像\"><a href=\"#开始录像\" class=\"headerlink\" title=\"开始录像\"></a>开始录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取视频流</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = videoEl.captureStream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将视频流注入到recordRTC</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder = RecordRTC(stream, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'video'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.startRecording();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止录像\"><a href=\"#停止录像\" class=\"headerlink\" title=\"停止录像\"></a>停止录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//停止录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.stopRecording(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取录制的blob对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.videoFile = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob转换为可以供video播放的url</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob对象转换为文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"keyword\">this</span>.videoFileName+<span class=\"string\">\".webm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObject = <span class=\"keyword\">new</span> File([blob], fileName, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'video/webm'</span></span><br><span class=\"line\">    &#125;);     </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"录制插件\"><a href=\"#录制插件\" class=\"headerlink\" title=\"录制插件\"></a>录制插件</h2><p>如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去<a href=\"https://github.com/lp-liupan/vue-video-tape\" title=\"vue-video-tape\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n"},{"title":"laravel解析Excel文件","date":"2019-08-04T02:31:36.000Z","_content":"\n## 安装\n\n```bash\n#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的\ncomposer require maatwebsite/excel=2.1.*\n```\n\n## 配置\n\n在laravel项目的`config/app.php`文件中，找到`providers`和`aliases`数组，分别在两个数组中添加下面的内容。\n\n```php\n'providers'=>[\n    ...\n\n    Maatwebsite\\Excel\\ExcelServiceProvider::class,\n],\n\n'aliases'=>[\n    ...\n\n    'Excel' => Maatwebsite\\Excel\\Facades\\Excel::class,\n]\n```\n\n配置好后，在项目的命令行中执行下列命令，可以在项目中生成`config/excel.php`文件，可以通过该文件对该插件进行配置。\n\n```bash\nphp artisan vendor:publish --provider=\"Maatwebsite\\Excel\\ExcelServiceProvider\"\n```\n\n## 解析Excel文件\n\n直接调用`load`方法，第一个参数是导入的文件名或文件地址。解析过后可以通过`toArray()`方法将解析后的结果转换为数组。\n\n```php\n$arr = [];\n\\Excel::load('企业导入模板.xlsx', function($reader) {\n            $arr = $reader->get()->toArray();\n        });\n```\n\n## 注意\n如果出现因为中文表头导致解析数据不完整的时候，请在`config/excel.php`文件中对`to_ascii`进行修改。\n\n```php\n'to_ascii'=>false,\n```\n\n如需其他配置问题，请参考[官方文档](https://laravel-excel.com/ \"官方文档\")","source":"_posts/laravel解析Excel文件.md","raw":"---\ntitle: laravel解析Excel文件\ndate: 2019-08-04 10:31:36\ncategories: laravel\n---\n\n## 安装\n\n```bash\n#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的\ncomposer require maatwebsite/excel=2.1.*\n```\n\n## 配置\n\n在laravel项目的`config/app.php`文件中，找到`providers`和`aliases`数组，分别在两个数组中添加下面的内容。\n\n```php\n'providers'=>[\n    ...\n\n    Maatwebsite\\Excel\\ExcelServiceProvider::class,\n],\n\n'aliases'=>[\n    ...\n\n    'Excel' => Maatwebsite\\Excel\\Facades\\Excel::class,\n]\n```\n\n配置好后，在项目的命令行中执行下列命令，可以在项目中生成`config/excel.php`文件，可以通过该文件对该插件进行配置。\n\n```bash\nphp artisan vendor:publish --provider=\"Maatwebsite\\Excel\\ExcelServiceProvider\"\n```\n\n## 解析Excel文件\n\n直接调用`load`方法，第一个参数是导入的文件名或文件地址。解析过后可以通过`toArray()`方法将解析后的结果转换为数组。\n\n```php\n$arr = [];\n\\Excel::load('企业导入模板.xlsx', function($reader) {\n            $arr = $reader->get()->toArray();\n        });\n```\n\n## 注意\n如果出现因为中文表头导致解析数据不完整的时候，请在`config/excel.php`文件中对`to_ascii`进行修改。\n\n```php\n'to_ascii'=>false,\n```\n\n如需其他配置问题，请参考[官方文档](https://laravel-excel.com/ \"官方文档\")","slug":"laravel解析Excel文件","published":1,"updated":"2019-09-18T06:28:29.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oxdz1s0004w6yh4zg667t9","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的</span></span><br><span class=\"line\">composer require maatwebsite/excel=2.1.*</span><br></pre></td></tr></table></figure><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在laravel项目的<code>config/app.php</code>文件中，找到<code>providers</code>和<code>aliases</code>数组，分别在两个数组中添加下面的内容。</p><a id=\"more\"></a>\n\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'providers'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    Maatwebsite\\Excel\\ExcelServiceProvider::class,</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aliases'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Excel'</span> =&gt; Maatwebsite\\Excel\\Facades\\Excel::class,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，在项目的命令行中执行下列命令，可以在项目中生成<code>config/excel.php</code>文件，可以通过该文件对该插件进行配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan vendor:publish --provider=<span class=\"string\">\"Maatwebsite\\Excel\\ExcelServiceProvider\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析Excel文件\"><a href=\"#解析Excel文件\" class=\"headerlink\" title=\"解析Excel文件\"></a>解析Excel文件</h2><p>直接调用<code>load</code>方法，第一个参数是导入的文件名或文件地址。解析过后可以通过<code>toArray()</code>方法将解析后的结果转换为数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [];</span><br><span class=\"line\">\\Excel::load(<span class=\"string\">'企业导入模板.xlsx'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($reader)</span> </span>&#123;</span><br><span class=\"line\">            $arr = $reader-&gt;get()-&gt;toArray();</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果出现因为中文表头导致解析数据不完整的时候，请在<code>config/excel.php</code>文件中对<code>to_ascii</code>进行修改。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'to_ascii'</span>=&gt;<span class=\"keyword\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<p>如需其他配置问题，请参考<a href=\"https://laravel-excel.com/\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的</span></span><br><span class=\"line\">composer require maatwebsite/excel=2.1.*</span><br></pre></td></tr></table></figure><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在laravel项目的<code>config/app.php</code>文件中，找到<code>providers</code>和<code>aliases</code>数组，分别在两个数组中添加下面的内容。</p>","more":"\n\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'providers'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    Maatwebsite\\Excel\\ExcelServiceProvider::class,</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aliases'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Excel'</span> =&gt; Maatwebsite\\Excel\\Facades\\Excel::class,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，在项目的命令行中执行下列命令，可以在项目中生成<code>config/excel.php</code>文件，可以通过该文件对该插件进行配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan vendor:publish --provider=<span class=\"string\">\"Maatwebsite\\Excel\\ExcelServiceProvider\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析Excel文件\"><a href=\"#解析Excel文件\" class=\"headerlink\" title=\"解析Excel文件\"></a>解析Excel文件</h2><p>直接调用<code>load</code>方法，第一个参数是导入的文件名或文件地址。解析过后可以通过<code>toArray()</code>方法将解析后的结果转换为数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [];</span><br><span class=\"line\">\\Excel::load(<span class=\"string\">'企业导入模板.xlsx'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($reader)</span> </span>&#123;</span><br><span class=\"line\">            $arr = $reader-&gt;get()-&gt;toArray();</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果出现因为中文表头导致解析数据不完整的时候，请在<code>config/excel.php</code>文件中对<code>to_ascii</code>进行修改。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'to_ascii'</span>=&gt;<span class=\"keyword\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<p>如需其他配置问题，请参考<a href=\"https://laravel-excel.com/\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n"},{"title":"php上传大文件配置","date":"2019-08-16T01:37:34.000Z","_content":"\n# PHP配置问题\n\n## PHP上传文件大小限制\n>PHP配置文件默认的post上传数据`post_max_size`大小为2M，默认上传文件`upload_max_filesize`的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。\n\n## PHP最长执行时间限制\n>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间`max_execut_time`为30秒，如果超过了30秒脚本就会停止执行。\n\n## PHP配置文件的修改\n>PHP的配置文件一般位于`/usr/local/php7/lib/php.ini`，用vim编辑器打开，进入文件后找到`post_max_size`这个变量，然后将数值修改为合适的大小。同样的将`upload_max_filesize`变量也改为合适的大小。执行时间的变量`max_execut_time`的值改为`0`表示没有时间限制。\n\n## 重启PHP\n>修改了PHP的配置文件`php.ini`后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭`killall php-fpm`，然后在`/usr/local/php7/sbin`文件夹下启动`/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf `。\n\n>如果在页面报错`502 BadGateway`或者`Gateway Timeout`则表示`php-fpm`没有启动。\n\n# nginx配置问题\n\n## nginx设置上传文件最大值\n>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下`client_max_body_size`变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是`client_max_body_size 500m;`。\n\n## 重启nginx\n>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是`/usr/local/openresty/nginx/nginx/sbin/nginx -s reload`。","source":"_posts/php上传大文件配置.md","raw":"---\ntitle: php上传大文件配置\ndate: 2019-08-16 09:37:34\ncategories: 服务器配置问题\n---\n\n# PHP配置问题\n\n## PHP上传文件大小限制\n>PHP配置文件默认的post上传数据`post_max_size`大小为2M，默认上传文件`upload_max_filesize`的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。\n\n## PHP最长执行时间限制\n>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间`max_execut_time`为30秒，如果超过了30秒脚本就会停止执行。\n\n## PHP配置文件的修改\n>PHP的配置文件一般位于`/usr/local/php7/lib/php.ini`，用vim编辑器打开，进入文件后找到`post_max_size`这个变量，然后将数值修改为合适的大小。同样的将`upload_max_filesize`变量也改为合适的大小。执行时间的变量`max_execut_time`的值改为`0`表示没有时间限制。\n\n## 重启PHP\n>修改了PHP的配置文件`php.ini`后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭`killall php-fpm`，然后在`/usr/local/php7/sbin`文件夹下启动`/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf `。\n\n>如果在页面报错`502 BadGateway`或者`Gateway Timeout`则表示`php-fpm`没有启动。\n\n# nginx配置问题\n\n## nginx设置上传文件最大值\n>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下`client_max_body_size`变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是`client_max_body_size 500m;`。\n\n## 重启nginx\n>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是`/usr/local/openresty/nginx/nginx/sbin/nginx -s reload`。","slug":"php上传大文件配置","published":1,"updated":"2019-09-18T06:28:29.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oxdz1t0005w6yhedvq4nni","content":"<h1 id=\"PHP配置问题\"><a href=\"#PHP配置问题\" class=\"headerlink\" title=\"PHP配置问题\"></a>PHP配置问题</h1><h2 id=\"PHP上传文件大小限制\"><a href=\"#PHP上传文件大小限制\" class=\"headerlink\" title=\"PHP上传文件大小限制\"></a>PHP上传文件大小限制</h2><blockquote>\n<p>PHP配置文件默认的post上传数据<code>post_max_size</code>大小为2M，默认上传文件<code>upload_max_filesize</code>的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。</p>\n</blockquote><a id=\"more\"></a>\n<h2 id=\"PHP最长执行时间限制\"><a href=\"#PHP最长执行时间限制\" class=\"headerlink\" title=\"PHP最长执行时间限制\"></a>PHP最长执行时间限制</h2><blockquote>\n<p>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间<code>max_execut_time</code>为30秒，如果超过了30秒脚本就会停止执行。</p>\n</blockquote>\n<h2 id=\"PHP配置文件的修改\"><a href=\"#PHP配置文件的修改\" class=\"headerlink\" title=\"PHP配置文件的修改\"></a>PHP配置文件的修改</h2><blockquote>\n<p>PHP的配置文件一般位于<code>/usr/local/php7/lib/php.ini</code>，用vim编辑器打开，进入文件后找到<code>post_max_size</code>这个变量，然后将数值修改为合适的大小。同样的将<code>upload_max_filesize</code>变量也改为合适的大小。执行时间的变量<code>max_execut_time</code>的值改为<code>0</code>表示没有时间限制。</p>\n</blockquote>\n<h2 id=\"重启PHP\"><a href=\"#重启PHP\" class=\"headerlink\" title=\"重启PHP\"></a>重启PHP</h2><blockquote>\n<p>修改了PHP的配置文件<code>php.ini</code>后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭<code>killall php-fpm</code>，然后在<code>/usr/local/php7/sbin</code>文件夹下启动<code>/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf</code>。</p>\n</blockquote>\n<blockquote>\n<p>如果在页面报错<code>502 BadGateway</code>或者<code>Gateway Timeout</code>则表示<code>php-fpm</code>没有启动。</p>\n</blockquote>\n<h1 id=\"nginx配置问题\"><a href=\"#nginx配置问题\" class=\"headerlink\" title=\"nginx配置问题\"></a>nginx配置问题</h1><h2 id=\"nginx设置上传文件最大值\"><a href=\"#nginx设置上传文件最大值\" class=\"headerlink\" title=\"nginx设置上传文件最大值\"></a>nginx设置上传文件最大值</h2><blockquote>\n<p>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下<code>client_max_body_size</code>变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是<code>client_max_body_size 500m;</code>。</p>\n</blockquote>\n<h2 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h2><blockquote>\n<p>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是<code>/usr/local/openresty/nginx/nginx/sbin/nginx -s reload</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"PHP配置问题\"><a href=\"#PHP配置问题\" class=\"headerlink\" title=\"PHP配置问题\"></a>PHP配置问题</h1><h2 id=\"PHP上传文件大小限制\"><a href=\"#PHP上传文件大小限制\" class=\"headerlink\" title=\"PHP上传文件大小限制\"></a>PHP上传文件大小限制</h2><blockquote>\n<p>PHP配置文件默认的post上传数据<code>post_max_size</code>大小为2M，默认上传文件<code>upload_max_filesize</code>的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。</p>\n</blockquote>","more":"\n<h2 id=\"PHP最长执行时间限制\"><a href=\"#PHP最长执行时间限制\" class=\"headerlink\" title=\"PHP最长执行时间限制\"></a>PHP最长执行时间限制</h2><blockquote>\n<p>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间<code>max_execut_time</code>为30秒，如果超过了30秒脚本就会停止执行。</p>\n</blockquote>\n<h2 id=\"PHP配置文件的修改\"><a href=\"#PHP配置文件的修改\" class=\"headerlink\" title=\"PHP配置文件的修改\"></a>PHP配置文件的修改</h2><blockquote>\n<p>PHP的配置文件一般位于<code>/usr/local/php7/lib/php.ini</code>，用vim编辑器打开，进入文件后找到<code>post_max_size</code>这个变量，然后将数值修改为合适的大小。同样的将<code>upload_max_filesize</code>变量也改为合适的大小。执行时间的变量<code>max_execut_time</code>的值改为<code>0</code>表示没有时间限制。</p>\n</blockquote>\n<h2 id=\"重启PHP\"><a href=\"#重启PHP\" class=\"headerlink\" title=\"重启PHP\"></a>重启PHP</h2><blockquote>\n<p>修改了PHP的配置文件<code>php.ini</code>后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭<code>killall php-fpm</code>，然后在<code>/usr/local/php7/sbin</code>文件夹下启动<code>/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf</code>。</p>\n</blockquote>\n<blockquote>\n<p>如果在页面报错<code>502 BadGateway</code>或者<code>Gateway Timeout</code>则表示<code>php-fpm</code>没有启动。</p>\n</blockquote>\n<h1 id=\"nginx配置问题\"><a href=\"#nginx配置问题\" class=\"headerlink\" title=\"nginx配置问题\"></a>nginx配置问题</h1><h2 id=\"nginx设置上传文件最大值\"><a href=\"#nginx设置上传文件最大值\" class=\"headerlink\" title=\"nginx设置上传文件最大值\"></a>nginx设置上传文件最大值</h2><blockquote>\n<p>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下<code>client_max_body_size</code>变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是<code>client_max_body_size 500m;</code>。</p>\n</blockquote>\n<h2 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h2><blockquote>\n<p>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是<code>/usr/local/openresty/nginx/nginx/sbin/nginx -s reload</code>。</p>\n</blockquote>\n"},{"title":"nvm的使用","date":"2019-09-18T07:08:31.000Z","_content":"\n## 前言","source":"_posts/nvm的使用.md","raw":"---\ntitle: nvm的使用\ndate: 2019-09-18 15:08:31\ncategories: 开发小工具\n---\n\n## 前言","slug":"nvm的使用","published":1,"updated":"2019-09-18T07:09:03.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0oxdz1u0006w6yhrh3d4yeo","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>"},{"layout":"post","title":"swagger在laravel中的使用","date":"2019-07-19T03:34:01.000Z","_content":"\n# 开始前了解\n\n>推荐一个比较完成的文档[https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896](https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896)     \n>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     \n\n1. 请求方法\n2. 请求的路径\n3. 请求的参数\n4. 返沪状态\n5. 返回参数  \n\n>另外强调一点，所有的swagger语句都要写在注释里面！\n\n# 请求方法\n\n>主要是指GET、POST等请求方法在swagger中应该如何表示。    \n>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    \n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem\",          //请求的路径\n        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能\n    )\n*/\n```\n\n{% asset_img swagger1.png %}  \n\n# 请求参数\n\n>参数主要有几种形式：\n\n1. query string：\tapi/checktask?item_id=1\n2. path: \tapi/checktask/1\n3. body:\tpost打包传值的形式    \n\n## 简单一点的请求方式\n\n>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：\n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem/failed\",   //请求的路径\n        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能\n        \n        //请求参数\n        @SWG\\Parameter(\n            name=\"item_id\",      //参数key\n            description=\"巡检id\",//参数注释\n            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串\n            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string\n            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）\n        )\n    )\n*/\n```\n\n{% asset_img swagger2.png %}   \n\n## 复杂一点的请求方式\n\n>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。\n\n>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。\n\n```php\n/*\n     *  @SWG\\PUT(\n     *   path=\"/checktaskitem/{item_id}\",       //注意：当有参数是以path的方式传递，要在这里加上{}\n     *   tags={\"巡检\"},\n     *   summary=\"提交巡检结果\",\n     *\n             @SWG\\Parameter(                    //这里就是使用path方式传递的参数\n                name=\"item_id\",\n                required=true,\n                type=\"integer\",\n                description=\"巡检id\",\n                in=\"path\"\n             ),\n             @SWG\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body\n               name=\"person\",\n               in=\"body\",\n               required=true,\n               \n               @SWG\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示\n                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array\n                   \n                   @SWG\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义\n                        property=\"item_serialno\",      //字段名\n                        type=\"string\",                 //字段类型\n                        description=\"和对讲平台给的巡检单号\", //字段的注释\n                   ),\n          \n                   @SWG\\Property(\n                        property=\"item_resultdata\",\n                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）\n                        description=\"巡检结果具体项\",\n                        \n                        @SWG\\Items(                  //注意：如果父级是[]子级是{}，需要加入Items，如果父级{}则不用添加Items\n                            @SWG\\Property(\n                               property=\"item_id\",\n                               type=\"integer\",\n                               description=\"巡检项id\"\n                            ),\n                            @SWG\\Property(\n                                property=\"children\",\n                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象\n                                description=\"具体巡检内容\",\n                                \n                                @SWG\\Items(\n                                    @SWG\\Property(\n                                        property=\"item_id\",\n                                        type=\"integer\",\n                                        description=\"巡检项id\"\n                                    ),\n                                )\n                            ),\n                        )\n                   ),\n               )\n           ),\n      )\n     \n*/\n```\n{% asset_img swagger3.png %}\n{% asset_img swagger4.png %}\n\n# 返回参数\n\n>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。\n\n```php\n/*\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *\n *  @SWG\\Parameter(\n *      name=\"item_id\",\n *      description=\"巡检id\",\n *      required=true,\n *      type=\"integer\",\n *      in=\"query\"\n *  ),\n *\n *  @SWG\\Response(                                             //定义响应参数的时候，首先使用Response\n *         response=200,                                       //响应\n *         description=\"基本信息\",\n *         @SWG\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释\n *            type=\"array\",\n *                  @SWG\\Items(                                //如果父级为[]子级为{}则要是用Items，其中包含了子级{}中的属性的类型和注释\n *                      @SWG\\Property(\n *                         property=\"item_id\",\n *                         type=\"integer\",\n *                         description=\"巡检项ID\"\n *                     ),\n *                     @SWG\\Property(\n *                         property=\"inspection_id\",\n *                         type=\"string\",\n *                         description=\"巡检单id\"\n *                     ),\n *                      @SWG\\Property(\n *                         property=\"item_name\",\n *                         type=\"integer\",\n *                         description=\"巡检项名称\"\n *                     ),\n *\n *                     @SWG\\Property(\n *                         property=\"enterprise_name\",\n *                         type=\"string\",\n *                         description=\"企业名称\"\n *                     ),\n *                  ),\n *\n *                ),\n *     ),\n *   @SWG\\Response(response=401, description=\"用户验证失败\"),\n *   @SWG\\Response(response=500, description=\"服务器错误\"),\n * )\n *\n */\n```\n{% asset_img swagger5.png %}\n{% asset_img swagger6.png %}\n\n# 了解内容\n\n>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。\n\n```php\n/**\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *  @SWG\\Parameter(),\n *  @SWG\\Response(),\n*     security={\n*          {\n*              \"Bearer\":{}\n*          }\n*      },\n* )\n*/\n```\n\n{% asset_img swagger7.png %}\n","source":"_posts/swagger在laravel中的使用.md","raw":"---\nlayout: post\ntitle: swagger在laravel中的使用\ndate: 2019-07-19 11:34:01\ncategories: 开发小工具\n---\n\n# 开始前了解\n\n>推荐一个比较完成的文档[https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896](https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896)     \n>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     \n\n1. 请求方法\n2. 请求的路径\n3. 请求的参数\n4. 返沪状态\n5. 返回参数  \n\n>另外强调一点，所有的swagger语句都要写在注释里面！\n\n# 请求方法\n\n>主要是指GET、POST等请求方法在swagger中应该如何表示。    \n>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    \n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem\",          //请求的路径\n        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能\n    )\n*/\n```\n\n{% asset_img swagger1.png %}  \n\n# 请求参数\n\n>参数主要有几种形式：\n\n1. query string：\tapi/checktask?item_id=1\n2. path: \tapi/checktask/1\n3. body:\tpost打包传值的形式    \n\n## 简单一点的请求方式\n\n>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：\n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem/failed\",   //请求的路径\n        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能\n        \n        //请求参数\n        @SWG\\Parameter(\n            name=\"item_id\",      //参数key\n            description=\"巡检id\",//参数注释\n            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串\n            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string\n            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）\n        )\n    )\n*/\n```\n\n{% asset_img swagger2.png %}   \n\n## 复杂一点的请求方式\n\n>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。\n\n>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。\n\n```php\n/*\n     *  @SWG\\PUT(\n     *   path=\"/checktaskitem/{item_id}\",       //注意：当有参数是以path的方式传递，要在这里加上{}\n     *   tags={\"巡检\"},\n     *   summary=\"提交巡检结果\",\n     *\n             @SWG\\Parameter(                    //这里就是使用path方式传递的参数\n                name=\"item_id\",\n                required=true,\n                type=\"integer\",\n                description=\"巡检id\",\n                in=\"path\"\n             ),\n             @SWG\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body\n               name=\"person\",\n               in=\"body\",\n               required=true,\n               \n               @SWG\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示\n                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array\n                   \n                   @SWG\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义\n                        property=\"item_serialno\",      //字段名\n                        type=\"string\",                 //字段类型\n                        description=\"和对讲平台给的巡检单号\", //字段的注释\n                   ),\n          \n                   @SWG\\Property(\n                        property=\"item_resultdata\",\n                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）\n                        description=\"巡检结果具体项\",\n                        \n                        @SWG\\Items(                  //注意：如果父级是[]子级是{}，需要加入Items，如果父级{}则不用添加Items\n                            @SWG\\Property(\n                               property=\"item_id\",\n                               type=\"integer\",\n                               description=\"巡检项id\"\n                            ),\n                            @SWG\\Property(\n                                property=\"children\",\n                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象\n                                description=\"具体巡检内容\",\n                                \n                                @SWG\\Items(\n                                    @SWG\\Property(\n                                        property=\"item_id\",\n                                        type=\"integer\",\n                                        description=\"巡检项id\"\n                                    ),\n                                )\n                            ),\n                        )\n                   ),\n               )\n           ),\n      )\n     \n*/\n```\n{% asset_img swagger3.png %}\n{% asset_img swagger4.png %}\n\n# 返回参数\n\n>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。\n\n```php\n/*\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *\n *  @SWG\\Parameter(\n *      name=\"item_id\",\n *      description=\"巡检id\",\n *      required=true,\n *      type=\"integer\",\n *      in=\"query\"\n *  ),\n *\n *  @SWG\\Response(                                             //定义响应参数的时候，首先使用Response\n *         response=200,                                       //响应\n *         description=\"基本信息\",\n *         @SWG\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释\n *            type=\"array\",\n *                  @SWG\\Items(                                //如果父级为[]子级为{}则要是用Items，其中包含了子级{}中的属性的类型和注释\n *                      @SWG\\Property(\n *                         property=\"item_id\",\n *                         type=\"integer\",\n *                         description=\"巡检项ID\"\n *                     ),\n *                     @SWG\\Property(\n *                         property=\"inspection_id\",\n *                         type=\"string\",\n *                         description=\"巡检单id\"\n *                     ),\n *                      @SWG\\Property(\n *                         property=\"item_name\",\n *                         type=\"integer\",\n *                         description=\"巡检项名称\"\n *                     ),\n *\n *                     @SWG\\Property(\n *                         property=\"enterprise_name\",\n *                         type=\"string\",\n *                         description=\"企业名称\"\n *                     ),\n *                  ),\n *\n *                ),\n *     ),\n *   @SWG\\Response(response=401, description=\"用户验证失败\"),\n *   @SWG\\Response(response=500, description=\"服务器错误\"),\n * )\n *\n */\n```\n{% asset_img swagger5.png %}\n{% asset_img swagger6.png %}\n\n# 了解内容\n\n>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。\n\n```php\n/**\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *  @SWG\\Parameter(),\n *  @SWG\\Response(),\n*     security={\n*          {\n*              \"Bearer\":{}\n*          }\n*      },\n* )\n*/\n```\n\n{% asset_img swagger7.png %}\n","slug":"swagger在laravel中的使用","published":1,"updated":"2019-09-18T06:28:29.188Z","comments":1,"photos":[],"link":"","_id":"ck0oxdz2u000gw6yhw79z5ww6","content":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>推荐一个比较完成的文档<a href=\"https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896\" target=\"_blank\" rel=\"noopener\">https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896</a><br>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     </p>\n</blockquote><a id=\"more\"></a>\n<ol>\n<li>请求方法</li>\n<li>请求的路径</li>\n<li>请求的参数</li>\n<li>返沪状态</li>\n<li>返回参数  </li>\n</ol>\n<blockquote>\n<p>另外强调一点，所有的swagger语句都要写在注释里面！</p>\n</blockquote>\n<h1 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h1><blockquote>\n<p>主要是指GET、POST等请求方法在swagger中应该如何表示。<br>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    </p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem\",          //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger1.png\">  \n\n<h1 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h1><blockquote>\n<p>参数主要有几种形式：</p>\n</blockquote>\n<ol>\n<li>query string：    api/checktask?item_id=1</li>\n<li>path:     api/checktask/1</li>\n<li>body:    post打包传值的形式    </li>\n</ol>\n<h2 id=\"简单一点的请求方式\"><a href=\"#简单一点的请求方式\" class=\"headerlink\" title=\"简单一点的请求方式\"></a>简单一点的请求方式</h2><blockquote>\n<p>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem/failed\",   //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //请求参数</span></span><br><span class=\"line\"><span class=\"comment\">        <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\">            name=\"item_id\",      //参数key</span></span><br><span class=\"line\"><span class=\"comment\">            description=\"巡检id\",//参数注释</span></span><br><span class=\"line\"><span class=\"comment\">            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串</span></span><br><span class=\"line\"><span class=\"comment\">            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string</span></span><br><span class=\"line\"><span class=\"comment\">            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）</span></span><br><span class=\"line\"><span class=\"comment\">        )</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger2.png\">   \n\n<h2 id=\"复杂一点的请求方式\"><a href=\"#复杂一点的请求方式\" class=\"headerlink\" title=\"复杂一点的请求方式\"></a>复杂一点的请求方式</h2><blockquote>\n<p>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。</p>\n</blockquote>\n<blockquote>\n<p>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@SWG</span>\\PUT(</span></span><br><span class=\"line\"><span class=\"comment\">     *   path=\"/checktaskitem/&#123;item_id&#125;\",       //注意：当有参数是以path的方式传递，要在这里加上&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">     *   summary=\"提交巡检结果\",</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                    //这里就是使用path方式传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">                name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                required=true,</span></span><br><span class=\"line\"><span class=\"comment\">                type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\">                in=\"path\"</span></span><br><span class=\"line\"><span class=\"comment\">             ),</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body</span></span><br><span class=\"line\"><span class=\"comment\">               name=\"person\",</span></span><br><span class=\"line\"><span class=\"comment\">               in=\"body\",</span></span><br><span class=\"line\"><span class=\"comment\">               required=true,</span></span><br><span class=\"line\"><span class=\"comment\">               </span></span><br><span class=\"line\"><span class=\"comment\">               <span class=\"doctag\">@SWG</span>\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示</span></span><br><span class=\"line\"><span class=\"comment\">                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array</span></span><br><span class=\"line\"><span class=\"comment\">                   </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_serialno\",      //字段名</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"string\",                 //字段类型</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"和对讲平台给的巡检单号\", //字段的注释</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">          </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_resultdata\",</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"巡检结果具体项\",</span></span><br><span class=\"line\"><span class=\"comment\">                        </span></span><br><span class=\"line\"><span class=\"comment\">                        <span class=\"doctag\">@SWG</span>\\Items(                  //注意：如果父级是[]子级是&#123;&#125;，需要加入Items，如果父级&#123;&#125;则不用添加Items</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                               property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                               type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                               description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                property=\"children\",</span></span><br><span class=\"line\"><span class=\"comment\">                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象</span></span><br><span class=\"line\"><span class=\"comment\">                                description=\"具体巡检内容\",</span></span><br><span class=\"line\"><span class=\"comment\">                                </span></span><br><span class=\"line\"><span class=\"comment\">                                <span class=\"doctag\">@SWG</span>\\Items(</span></span><br><span class=\"line\"><span class=\"comment\">                                    <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                        property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                                    ),</span></span><br><span class=\"line\"><span class=\"comment\">                                )</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                        )</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">               )</span></span><br><span class=\"line\"><span class=\"comment\">           ),</span></span><br><span class=\"line\"><span class=\"comment\">      )</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger3.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger4.png\">\n\n<h1 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h1><blockquote>\n<p>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *      name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *      type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      in=\"query\"</span></span><br><span class=\"line\"><span class=\"comment\"> *  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(                                             //定义响应参数的时候，首先使用Response</span></span><br><span class=\"line\"><span class=\"comment\"> *         response=200,                                       //响应</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=\"基本信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *         <span class=\"doctag\">@SWG</span>\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释</span></span><br><span class=\"line\"><span class=\"comment\"> *            type=\"array\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                  <span class=\"doctag\">@SWG</span>\\Items(                                //如果父级为[]子级为&#123;&#125;则要是用Items，其中包含了子级&#123;&#125;中的属性的类型和注释</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项ID\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"inspection_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检单id\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"enterprise_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"企业名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=401, description=\"用户验证失败\"),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=500, description=\"服务器错误\"),</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger5.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger6.png\">\n\n<h1 id=\"了解内容\"><a href=\"#了解内容\" class=\"headerlink\" title=\"了解内容\"></a>了解内容</h1><blockquote>\n<p>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(),</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(),</span></span><br><span class=\"line\"><span class=\"comment\">*     security=&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*              \"Bearer\":&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">* )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger7.png\">\n","site":{"data":{}},"excerpt":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>推荐一个比较完成的文档<a href=\"https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896\" target=\"_blank\" rel=\"noopener\">https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896</a><br>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     </p>\n</blockquote>","more":"\n<ol>\n<li>请求方法</li>\n<li>请求的路径</li>\n<li>请求的参数</li>\n<li>返沪状态</li>\n<li>返回参数  </li>\n</ol>\n<blockquote>\n<p>另外强调一点，所有的swagger语句都要写在注释里面！</p>\n</blockquote>\n<h1 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h1><blockquote>\n<p>主要是指GET、POST等请求方法在swagger中应该如何表示。<br>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    </p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem\",          //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger1.png\">  \n\n<h1 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h1><blockquote>\n<p>参数主要有几种形式：</p>\n</blockquote>\n<ol>\n<li>query string：    api/checktask?item_id=1</li>\n<li>path:     api/checktask/1</li>\n<li>body:    post打包传值的形式    </li>\n</ol>\n<h2 id=\"简单一点的请求方式\"><a href=\"#简单一点的请求方式\" class=\"headerlink\" title=\"简单一点的请求方式\"></a>简单一点的请求方式</h2><blockquote>\n<p>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem/failed\",   //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //请求参数</span></span><br><span class=\"line\"><span class=\"comment\">        <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\">            name=\"item_id\",      //参数key</span></span><br><span class=\"line\"><span class=\"comment\">            description=\"巡检id\",//参数注释</span></span><br><span class=\"line\"><span class=\"comment\">            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串</span></span><br><span class=\"line\"><span class=\"comment\">            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string</span></span><br><span class=\"line\"><span class=\"comment\">            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）</span></span><br><span class=\"line\"><span class=\"comment\">        )</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger2.png\">   \n\n<h2 id=\"复杂一点的请求方式\"><a href=\"#复杂一点的请求方式\" class=\"headerlink\" title=\"复杂一点的请求方式\"></a>复杂一点的请求方式</h2><blockquote>\n<p>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。</p>\n</blockquote>\n<blockquote>\n<p>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@SWG</span>\\PUT(</span></span><br><span class=\"line\"><span class=\"comment\">     *   path=\"/checktaskitem/&#123;item_id&#125;\",       //注意：当有参数是以path的方式传递，要在这里加上&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">     *   summary=\"提交巡检结果\",</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                    //这里就是使用path方式传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">                name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                required=true,</span></span><br><span class=\"line\"><span class=\"comment\">                type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\">                in=\"path\"</span></span><br><span class=\"line\"><span class=\"comment\">             ),</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body</span></span><br><span class=\"line\"><span class=\"comment\">               name=\"person\",</span></span><br><span class=\"line\"><span class=\"comment\">               in=\"body\",</span></span><br><span class=\"line\"><span class=\"comment\">               required=true,</span></span><br><span class=\"line\"><span class=\"comment\">               </span></span><br><span class=\"line\"><span class=\"comment\">               <span class=\"doctag\">@SWG</span>\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示</span></span><br><span class=\"line\"><span class=\"comment\">                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array</span></span><br><span class=\"line\"><span class=\"comment\">                   </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_serialno\",      //字段名</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"string\",                 //字段类型</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"和对讲平台给的巡检单号\", //字段的注释</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">          </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_resultdata\",</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"巡检结果具体项\",</span></span><br><span class=\"line\"><span class=\"comment\">                        </span></span><br><span class=\"line\"><span class=\"comment\">                        <span class=\"doctag\">@SWG</span>\\Items(                  //注意：如果父级是[]子级是&#123;&#125;，需要加入Items，如果父级&#123;&#125;则不用添加Items</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                               property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                               type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                               description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                property=\"children\",</span></span><br><span class=\"line\"><span class=\"comment\">                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象</span></span><br><span class=\"line\"><span class=\"comment\">                                description=\"具体巡检内容\",</span></span><br><span class=\"line\"><span class=\"comment\">                                </span></span><br><span class=\"line\"><span class=\"comment\">                                <span class=\"doctag\">@SWG</span>\\Items(</span></span><br><span class=\"line\"><span class=\"comment\">                                    <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                        property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                                    ),</span></span><br><span class=\"line\"><span class=\"comment\">                                )</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                        )</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">               )</span></span><br><span class=\"line\"><span class=\"comment\">           ),</span></span><br><span class=\"line\"><span class=\"comment\">      )</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger3.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger4.png\">\n\n<h1 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h1><blockquote>\n<p>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *      name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *      type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      in=\"query\"</span></span><br><span class=\"line\"><span class=\"comment\"> *  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(                                             //定义响应参数的时候，首先使用Response</span></span><br><span class=\"line\"><span class=\"comment\"> *         response=200,                                       //响应</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=\"基本信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *         <span class=\"doctag\">@SWG</span>\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释</span></span><br><span class=\"line\"><span class=\"comment\"> *            type=\"array\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                  <span class=\"doctag\">@SWG</span>\\Items(                                //如果父级为[]子级为&#123;&#125;则要是用Items，其中包含了子级&#123;&#125;中的属性的类型和注释</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项ID\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"inspection_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检单id\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"enterprise_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"企业名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=401, description=\"用户验证失败\"),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=500, description=\"服务器错误\"),</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger5.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger6.png\">\n\n<h1 id=\"了解内容\"><a href=\"#了解内容\" class=\"headerlink\" title=\"了解内容\"></a>了解内容</h1><blockquote>\n<p>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(),</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(),</span></span><br><span class=\"line\"><span class=\"comment\">*     security=&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*              \"Bearer\":&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">* )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger7.png\">\n"}],"PostAsset":[{"_id":"source/_posts/swagger在laravel中的使用/swagger1.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger1.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger2.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger2.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger3.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger3.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger4.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger4.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger5.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger5.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger6.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger6.png","modified":1,"renderable":1},{"_id":"source/_posts/swagger在laravel中的使用/swagger7.png","post":"ck0oxdz2u000gw6yhw79z5ww6","slug":"swagger7.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck0oxdz1k0000w6yh4ygijte1","category_id":"ck0oxdz1r0003w6yhvfnuebgw","_id":"ck0oxdz1w0009w6yh21c2oqx1"},{"post_id":"ck0oxdz1p0002w6yhllhigia3","category_id":"ck0oxdz1r0003w6yhvfnuebgw","_id":"ck0oxdz1x000aw6yhw8fuwvzt"},{"post_id":"ck0oxdz1s0004w6yh4zg667t9","category_id":"ck0oxdz1w0008w6yhxm7k861m","_id":"ck0oxdz1x000cw6yhiu0fvfkg"},{"post_id":"ck0oxdz1t0005w6yhedvq4nni","category_id":"ck0oxdz1x000bw6yh9szntwu2","_id":"ck0oxdz1x000ew6yhu2hbm244"},{"post_id":"ck0oxdz1u0006w6yhrh3d4yeo","category_id":"ck0oxdz1x000dw6yhzmuvi3vi","_id":"ck0oxdz1y000fw6yhrg93gb5o"},{"post_id":"ck0oxdz2u000gw6yhw79z5ww6","category_id":"ck0oxdz1x000dw6yhzmuvi3vi","_id":"ck0oxdz2v000hw6yhwaejgc7t"}],"PostTag":[],"Tag":[]}}