{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"533d18e79d9736c2b5dcac97290770c048e2cb3b","modified":1568876707633},{"_id":"themes/next/.all-contributorsrc","hash":"82bdd5689e6c7cf7bc9c8b40d6f856d554227053","modified":1568876759294},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1568876759298},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1568876759294},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1568876759294},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1568876759294},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1568876759298},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1568876759298},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1568876759298},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1568876759298},{"_id":"themes/next/_config.yml","hash":"7879c5beb936b9b81c34ea0257f34f87a312c2c7","modified":1568878412469},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1568876759298},{"_id":"themes/next/gulpfile.coffee","hash":"25d1bf7f98ea03c647cb8caa19e109aaaacd6ad7","modified":1568876759302},{"_id":"themes/next/package.json","hash":"4891972e0a53023164ed241966ba93cb0a8c05fc","modified":1568876759314},{"_id":"source/_posts/VUE实现前端视频录制和截图.md","hash":"12915c8ba0398efd9a69f981a6f5f6af5b089ee7","modified":1568876707633},{"_id":"source/_posts/php上传大文件配置.md","hash":"61d3126da3bf5cc7b845ba11a718ebeb3bb2562b","modified":1568876707633},{"_id":"source/_posts/swagger在laravel中的使用.md","hash":"dc778f923681d4a0ba889ffc0c6f1efa3e56e33d","modified":1568876707633},{"_id":"source/_posts/封装VUE组件并发布到npm.md","hash":"fb35c1a1e1c637bd60938e76d45e293fb1e36404","modified":1568876707641},{"_id":"source/_posts/服务器环境安装node.md","hash":"1fe606f28e1357b4945e1d5ef09dfb9cd468f6dc","modified":1572859896419},{"_id":"source/_posts/浏览器并发限制.md","hash":"a5ad10ffddedd58d0a4ce9a8f0508e8fcfc0ee9e","modified":1571978726592},{"_id":"source/_posts/VUE生成二维码并下载.md","hash":"fff95ed52d409fa4304a443bc05ed3cc054f8313","modified":1568876707633},{"_id":"source/_posts/laravel解析Excel文件.md","hash":"e2f79b67423fca2092c0e835669da62b7fda5e96","modified":1568876707633},{"_id":"themes/next/.git/HEAD","hash":"1f4233a1de644e88922e010592393339ab082fd9","modified":1568876759270},{"_id":"themes/next/.git/config","hash":"004644130cacec134d0292973a04d3bb83cfab82","modified":1568876745558},{"_id":"source/_posts/nvm的使用.md","hash":"802eae8fb97411b8792216dc5df7a745974473f2","modified":1568876707633},{"_id":"themes/next/.git/index","hash":"c1b306213e0de61c3eaff2aa436766f3b734b7d3","modified":1568878380461},{"_id":"themes/next/.git/packed-refs","hash":"1cb4d2b400ebead42bda23fcf583121034265ca4","modified":1568876759270},{"_id":"source/categories/index.md","hash":"840e61eb41547e2b57ce24aeb3f09d6e9e56c8c9","modified":1568876707641},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568876743826},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1568876759294},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"d3e864f707c8bf2502579ef279d2c4e8cab8520a","modified":1568876759294},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1568876759294},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"88780daa3db837a34fe3ed90cc61cc578b5760ed","modified":1568876759294},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1568876759294},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1568876759298},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1568876759298},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1568876759298},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1568876759298},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1568876759298},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1568876759298},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1568876759298},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1568876759298},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1568876759298},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1568876759298},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1568876759298},{"_id":"themes/next/docs/AUTHORS.md","hash":"b18787dbbcef7877fa414d19c03eb79ad51fa94f","modified":1568876759298},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1568876759298},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1568876759298},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1568876759298},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1568876759298},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1568876759302},{"_id":"source/_posts/理解同源策略.md","hash":"112a2d1d917c113020a4a9304164b67780a10ed7","modified":1571384301293},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1568876759302},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1568876759302},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1568876759302},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1568876759302},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1568876759302},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1568876759302},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1568876759302},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1568876759302},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1568876759302},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1568876759302},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1568876759302},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1568876759302},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1568876759306},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1568876759306},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1568876759306},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1568876759306},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1568876759306},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1568876759306},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1568876759306},{"_id":"themes/next/layout/_layout.swig","hash":"698a065f1b1fd5bafde49872a9b941acce892bb4","modified":1568876759306},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1568876759306},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1568876759306},{"_id":"themes/next/layout/archive.swig","hash":"72b4e0786668bc61c11eafa12da5d75272b93b61","modified":1568876759314},{"_id":"themes/next/layout/page.swig","hash":"a03a66a12a0642d57ad013d6724456810e48afd0","modified":1568876759314},{"_id":"themes/next/layout/index.swig","hash":"20e776e8863f662c154bb765aaa0a1a22bf78126","modified":1568876759314},{"_id":"themes/next/layout/category.swig","hash":"38433a9de15f019267c9130e243e14343fb9bc3d","modified":1568876759314},{"_id":"themes/next/layout/post.swig","hash":"0c3b34a6832b8e33574edc17095344f9e0bea74f","modified":1568876759314},{"_id":"themes/next/layout/tag.swig","hash":"153fb65e710a9643634aea4813431e92c11d09fe","modified":1568876759314},{"_id":"source/_posts/swagger在laravel中的使用/swagger1.png","hash":"a208394d50e26798eb9be892e4ce506e07042cda","modified":1568876707633},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1568876743826},{"_id":"source/_posts/swagger在laravel中的使用/swagger5.png","hash":"94ef36c980900eafa324d2b99944d50ac05bdaa7","modified":1568876707637},{"_id":"source/_posts/封装VUE组件并发布到npm/目录结构.png","hash":"4c700fe484c374c7a7643f63f5f60bed055cef06","modified":1568876707641},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1568876743826},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1568876743826},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1568876743826},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1568876743826},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1568876743826},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1568876743826},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1568876743826},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1568876743826},{"_id":"themes/next/.git/logs/HEAD","hash":"c2a6f0673df85e8b0ee26f456f4a89b3626e7bd6","modified":1568876759270},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1568876743826},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1568876743826},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1568876743826},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1568876759294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1568876759294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1568876759294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1568876759294},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1568876759302},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1568876759302},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1568876759302},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1568876759302},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1568876759302},{"_id":"themes/next/layout/_macro/post.swig","hash":"9e4be9906a7263dd25cc9e9fcb2375c58168e039","modified":1568876759306},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"f358e40e63f8c710d3f5f84dc13d1f5edd080a8d","modified":1568876759306},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ccef7a8cd704575cf7bfe63c0492fe43592b1a6d","modified":1568876759306},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1568876759306},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9b1cf9a9248f117ecb185ddd822008236cc7fdf6","modified":1568876759306},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1568876759310},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1568876759310},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1568876759310},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1568876759310},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1568876759310},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1568876759310},{"_id":"themes/next/layout/_scripts/three.swig","hash":"eee4d26b5c0bb7872a21346151c38612a9b76d0b","modified":1568876759310},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"d3448044776dd23abd42b09ef0f26827f95efdf5","modified":1568876759310},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1568876759310},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"ae5a96ad90f314da50bb6057bdd3a4a0a3106827","modified":1568876759310},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1568876759310},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"3a7824ba4ae7e5703fb196df45469f107387657e","modified":1568876759314},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1568876759314},{"_id":"themes/next/scripts/events/core.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1568876759314},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1568876759314},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1568876759314},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1568876759314},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1568876759314},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1568876759314},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1568876759314},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1568876759314},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1568876759314},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1568876759314},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1568876759314},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1568876759314},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1568876759314},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1568876759314},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1568876759314},{"_id":"themes/next/scripts/tags/full-image.js","hash":"70b1d6ed969143e3912daf051ccc3585d984c146","modified":1568876759318},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1568876759318},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1568876759318},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1568876759318},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1568876759318},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1568876759318},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1568876759318},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1568876759318},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1568876759318},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1568876759314},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1568876759326},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1568876759326},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1568876759326},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568876759326},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1568876759326},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1568876759326},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1568876759326},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ca39e510b43ea1efe7e5feeca2243375e55eff5c","modified":1568876759302},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1568876759326},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1568876759326},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1568876759326},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1568876759326},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1568876759326},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1568876759326},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1568876759326},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1568876759326},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1568876759326},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1568876759326},{"_id":"themes/next/source/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1568876759330},{"_id":"themes/next/source/js/bookmark.js","hash":"39b0022f8ee6c6d443affdbf8608a86155fbf8f4","modified":1568876759326},{"_id":"themes/next/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1568876759326},{"_id":"source/_posts/swagger在laravel中的使用/swagger2.png","hash":"5fa91101f811c880bb87e657b50f95f33ab7d8ae","modified":1568876707637},{"_id":"source/_posts/swagger在laravel中的使用/swagger3.png","hash":"dacad9389a6a90a6a2a8f9dbe884b0960146b216","modified":1568876707637},{"_id":"source/_posts/swagger在laravel中的使用/swagger4.png","hash":"84e452b2a2a0501b607f3b9836258933302a0102","modified":1568876707637},{"_id":"source/_posts/swagger在laravel中的使用/swagger6.png","hash":"0028c2119d55a9c61cbf4bf4fd43b4919ad8abfa","modified":1568876707637},{"_id":"themes/next/source/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1568876759330},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1568876759330},{"_id":"themes/next/source/js/utils.js","hash":"7c5d0dcd99ac3bd0f49a058ddc2464260712836f","modified":1568876759330},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568876759322},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568876759322},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"b35b2bf2ce3d73cabe8c443a45c2a82d45baf151","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"ca94a27904c4aa61dda840fa1bbe0d4c6e0ae8f6","modified":1568876759306},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1568876759306},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1568876759306},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1568876759306},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"e1d442fae18f46e6902d3be40a1b7477e762152e","modified":1568876759306},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"6f02724e24945d7e5f0dcd351deebc90996ad38d","modified":1568876759306},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"3e768faf37730891754f9817a01c04d754022017","modified":1568876759306},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"9718d372887f4b0ee952da42d10b2f736d0fc6de","modified":1568876759306},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"1ba4cd71b826186b7f782bd06258f2ec52a2b491","modified":1568876759306},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"a72e33e11df9d3639cdebab4f480e397c70deacb","modified":1568876759306},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"883ea1d024a8262eb8d3213de71c8ccb30daf095","modified":1568876759306},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1568876759306},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3ed15de413b9ca83641bbd0b740f94b450630357","modified":1568876759310},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1568876759310},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e2549106ea26ac48019aa3f8023b8fdc78c0f6db","modified":1568876759310},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"40483139657cde24356c6a4033a6386b909327a9","modified":1568876759310},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1568876759310},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1568876759310},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1568876759310},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1568876759310},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"caadb35670f3bf8e0a9ab06f00431def9a937746","modified":1568876759310},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1568876759310},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1568876759310},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1568876759310},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1568876759310},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1568876759310},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1568876759310},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1568876759310},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1568876759310},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1568876759310},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1568876759310},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1568876759310},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1568876759310},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1568876759310},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"feba64b1246acc88461b9126bd22e2d75ee10ec9","modified":1568876759310},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1568876759310},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"6a05a8847cbd915029a511e995d5ee1ce571292c","modified":1568876759310},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1568876759314},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1568876759314},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1568876759314},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1568876759314},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1568876759314},{"_id":"themes/next/scripts/events/lib/config.js","hash":"867b23bb231224064a79df5278ba0a02215044eb","modified":1568876759314},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1568876759314},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1568876759314},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1568876759314},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1568876759314},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1568876759314},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1568876759322},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1568876759322},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1568876759322},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1568876759326},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"14e4bd0bd702c7a7f83bf7d529fade2d0634c2f1","modified":1568876759326},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1568876759326},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1e99dfbe7736acfee59d6f54dbd6b33ddfe2fe8a","modified":1568876759326},{"_id":"themes/next/source/css/_variables/base.styl","hash":"639b65a486154cf1f70c31f3fff440ce022255c0","modified":1568876759326},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1568876759330},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"367aeb7efe8ebf8c12abef56c6dcf705ba5bd353","modified":1568876759330},{"_id":"themes/next/source/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1568876759330},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1568876759330},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1568876759330},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1568876759330},{"_id":"source/_posts/swagger在laravel中的使用/swagger7.png","hash":"fc67167921cf2ed79351b8826041633d9496b7e2","modified":1568876707641},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1568876759314},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1568876759314},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1568876759330},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1568876759334},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1568876759334},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1568876759270},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1568876759318},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b6b9dc8a350e51ad7b8bb08141a61fc2fd7466fc","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"cb25eed35117be256ea7a573fec2cdfb66901dbb","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1568876759322},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1568876759322},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c42802ecca44d4ea435c26700070a65375edfd7c","modified":1568876759322},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"73fe940abb0787a19f505fb614aafe73c8a24f08","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"dc2a3217f9b50cf42c4262c9e486281203eaef83","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e859283440617f18f1ad298f7f1218aafa9b39d5","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b22583b7340c2686a46aefeeed086540b08324a3","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ac523812bebb13cde268dc3cde65d0b7c6862e30","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2ab9e0499f241d1b91e2f7722072d23c95104e1f","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44ac3dff65c1bd3fe47feeed8e58aa00c9f2fb7b","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1568876759326},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"3bcb47b9b9ea671e0a3cba6a821045d3434734cb","modified":1568876759326},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1568876759330},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1568876759330},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1568876759330},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"f685026946c6e73d78a6c40fbd0b973c513253e4","modified":1568876759270},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"caf2abcffa5674adea300046fd3dbee2e830b40e","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4efe9174369bfe2125bd167feac18a07271635d6","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"919cc9aaf60b03c2bf00aca3748127f38a2026cf","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"386fce803e5240c2d6860ae53f38ae3aa2e8b680","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"4718d17fc4ee30802925890771a032d966133a31","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"db718eee14347f30ccabaa33bf6f9fbdea8b9462","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"3abf46c513e92f3f36c14d90f032983b94f36488","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"caa9a78993d549117cdc8fa7a76c473a5e7f0f67","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"541d6257023915a7caca7540f12cdf283ce025f3","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"469d5e4e188f484abff24eddd5640fa4d4d77ed1","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1568876759318},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e77986ca3b914348b5c3c6b34c94b49ad53e4b9c","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"514999bde116ef5cd5f7aedea80059b12a87a1ea","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"a1eed8fe7f97885a9234502a197abf2e90ba22b6","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"754f70161b7e810f582cc4755d177859dcbcfced","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"db44ef2b99fc33d003010f38e64caad930c08ad0","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"782cf8847c9aca96f9194fcf1d910509e4073ce6","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"17c3f58fb84453603621d6a718fcc821c8d6bced","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"38ce7d692b8bc6fde02e3271dfd50ad37e107e4e","modified":1568876759322},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1568876759322},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568876759334},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568876759334},{"_id":"themes/next/.git/objects/pack/pack-7a9c5fc4af46356e7d24908f69f6833a52d7fb8b.idx","hash":"83a93ab895f29bd3b1637bceb0225f79b63245d0","modified":1568876759122},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568876759334},{"_id":"themes/next/.git/objects/pack/pack-7a9c5fc4af46356e7d24908f69f6833a52d7fb8b.pack","hash":"61a61c3490c465a85f2e3404878fc8cc572905f0","modified":1568876759118},{"_id":"public/categories/index.html","hash":"ec70a3e53821e2cb5d50dbaed4b389039f533cab","modified":1572859901872},{"_id":"public/2019/11/04/服务器环境安装node/index.html","hash":"d82bb0dc3c132f9946b5abd959ebb11fee6bb570","modified":1572859901872},{"_id":"public/archives/index.html","hash":"b697a2bc789eacc24ab62dd8f3c7812c5f22bcc7","modified":1572859901873},{"_id":"public/archives/2019/index.html","hash":"dcc71f122101a3871ac8552514c3bad4a569786a","modified":1572859901873},{"_id":"public/archives/2019/07/index.html","hash":"c781b57ce023c17f10256ea4a771d9c9fa75334e","modified":1572859901873},{"_id":"public/archives/2019/08/index.html","hash":"415d147083147d4a6d6defe8d10e4e2268708894","modified":1572859901873},{"_id":"public/archives/2019/09/index.html","hash":"37ca13b8a581f5e80e348c18d2d603af9846b5e0","modified":1572859901873},{"_id":"public/archives/2019/10/index.html","hash":"b69d1635cdf51c22f761e71689fd5b018a20cb59","modified":1572859901873},{"_id":"public/archives/2019/11/index.html","hash":"e99b7b10732cab49df93f9eb5853d821effaf582","modified":1572859901873},{"_id":"public/categories/VUE/index.html","hash":"7ece54d592b3521d852851770aeaa4b34727d138","modified":1572859901873},{"_id":"public/categories/服务器配置问题/index.html","hash":"39bd978736d098c37aa64707b9ca5996b34a4842","modified":1572859901873},{"_id":"public/categories/开发小工具/index.html","hash":"4edb6b8d67437e21234ce711b7ec16e2eff5b8df","modified":1572859901873},{"_id":"public/categories/浏览器/index.html","hash":"fd4eeef01f3d20a33d8c81aab605bee55925b92c","modified":1572859901873},{"_id":"public/categories/laravel/index.html","hash":"9585e90ef6b8491993f557dbbaca8a69824927c2","modified":1572859901873},{"_id":"public/categories/http/index.html","hash":"260e54e3a4c872dcdb8228c1cf0c900e44689be4","modified":1572859901873},{"_id":"public/2019/10/25/浏览器并发限制/index.html","hash":"d31a420d1afa6414536d203d132ffb82bc77f3a4","modified":1572859901873},{"_id":"public/2019/10/18/理解同源策略/index.html","hash":"a63d5e5be448c728b214aa2b6a527e9ca579ed52","modified":1572859901873},{"_id":"public/2019/09/19/VUE生成二维码并下载/index.html","hash":"b277a9458407a33330f8553daa891ce2c037a0ea","modified":1572859901873},{"_id":"public/2019/09/18/封装VUE组件并发布到npm/index.html","hash":"c3c2a5342373475bca5f66561532a49ce99b4724","modified":1572859901873},{"_id":"public/2019/09/18/nvm的使用/index.html","hash":"1ff729f8945f2e39deca994cbda5585e46b8fc31","modified":1572859901873},{"_id":"public/2019/09/17/VUE实现前端视频录制和截图/index.html","hash":"f7f07a28b9e2f0396eca4cd89fccd9f7e3f88091","modified":1572859901874},{"_id":"public/2019/08/16/php上传大文件配置/index.html","hash":"3f8adc3d290a35c8edd47a468a926aca958b89b3","modified":1572859901874},{"_id":"public/2019/08/04/laravel解析Excel文件/index.html","hash":"babe30304c0e79d24d18b22284c9f306dced9d60","modified":1572859901874},{"_id":"public/2019/07/19/swagger在laravel中的使用/index.html","hash":"213a5b72c0d7193fd1411c1e016fc72e23d76872","modified":1572859901874},{"_id":"public/index.html","hash":"80c01ce6af74626a2032837a81d868dc7fedb4f5","modified":1572859901874},{"_id":"public/CNAME","hash":"533d18e79d9736c2b5dcac97290770c048e2cb3b","modified":1572859901877},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572859901877},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1572859901877},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1572859901877},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1572859901877},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1572859901878},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1572859901878},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1572859901878},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1572859901878},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1572859901878},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1572859901878},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1572859901878},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1572859901878},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1572859901878},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1572859901878},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1572859901878},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1572859901878},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1572859901878},{"_id":"public/2019/09/18/封装VUE组件并发布到npm/目录结构.png","hash":"4c700fe484c374c7a7643f63f5f60bed055cef06","modified":1572859901878},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger1.png","hash":"a208394d50e26798eb9be892e4ce506e07042cda","modified":1572859901878},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger5.png","hash":"94ef36c980900eafa324d2b99944d50ac05bdaa7","modified":1572859901878},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger6.png","hash":"0028c2119d55a9c61cbf4bf4fd43b4919ad8abfa","modified":1572859901878},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572859902266},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572859902267},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger2.png","hash":"5fa91101f811c880bb87e657b50f95f33ab7d8ae","modified":1572859902267},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger3.png","hash":"dacad9389a6a90a6a2a8f9dbe884b0960146b216","modified":1572859902267},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger4.png","hash":"84e452b2a2a0501b607f3b9836258933302a0102","modified":1572859902267},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1572859902279},{"_id":"public/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1572859902279},{"_id":"public/js/bookmark.js","hash":"39b0022f8ee6c6d443affdbf8608a86155fbf8f4","modified":1572859902279},{"_id":"public/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1572859902280},{"_id":"public/js/schemes/pisces.js","hash":"367aeb7efe8ebf8c12abef56c6dcf705ba5bd353","modified":1572859902280},{"_id":"public/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1572859902280},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1572859902280},{"_id":"public/css/main.css","hash":"40582c01bf04f0efd765b52821816bf94aacb9a0","modified":1572859902280},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572859902280},{"_id":"public/2019/07/19/swagger在laravel中的使用/swagger7.png","hash":"fc67167921cf2ed79351b8826041633d9496b7e2","modified":1572859902280},{"_id":"public/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1572859902283},{"_id":"public/js/utils.js","hash":"7c5d0dcd99ac3bd0f49a058ddc2464260712836f","modified":1572859902283},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1572859902283},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1572859902285},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572859902287},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1572859902290},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1572859902290}],"Category":[{"name":"VUE","_id":"ck2k84flz00033cyhbpd40jpa"},{"name":"服务器配置问题","_id":"ck2k84fm500073cyhkeofiich"},{"name":"开发小工具","_id":"ck2k84fm9000b3cyhnnoxb6nh"},{"name":"浏览器","_id":"ck2k84fmc000f3cyht179zylt"},{"name":"laravel","_id":"ck2k84fmd000i3cyhwqmdhhzq"},{"name":"http","_id":"ck2k84fme000l3cyhqqi1fr3z"}],"Data":[],"Page":[{"title":"分类","date":"2019-07-24T02:58:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-07-24 10:58:39\ntype: categories\n---\n","updated":"2019-09-19T07:05:07.641Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2k84flv00013cyh4vreahxr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"VUE实现前端视频录制和截图","date":"2019-09-17T07:15:18.000Z","_content":"\n## 介绍\n\n该功能是基于`vue-video-player`和`recordrtc`两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。\n<!-- more -->\n\n## 依赖\n\n```bash\nnpm install vue-video-player recordrtc\n```\n\n## 引入\n\n因为`vue-video-player`文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：\n\n```javascript\n//组件内引入\nimport { videoPlayer } from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\n\n//全局引入\nimport VideoPlayer from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\nVue.use(VideoPlayer);\n```\n然后在需要使用的组件内引入`recordrtc`\n\n```javascript\nimport RecordRTC from 'recordrtc'\n```\n\n## 截图\n\n主要思路：    \n1. 获取当前播放的`video`标签；\n2. 创建一个`canvas`；\n3. 调用`canvas`的`drawImage`方法进行绘制；\n4. 将`canvas`转换为图片或base64；\n\n### 获取video标签\n\n因为在vue项目中，可以利用`ref`属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n```\n\n### 创建canvas\n\n```javascript\n//创建一个canvas\nlet canvasEl = document.createElement('canvas');\ncanvasEl.width = videoEl.videoWidth;\ncanvasEl.height = videoEl.videoHeight;\n```\n\n### 调用drawImage方法\n\n具体关于`drawImage`方法的使用，可以参考[文档](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage \"drwaImage文档\")\n\n```javascript\n//截图\nlet ctx = canvasEl.getContext('2d');\nctx.drawImage(videoEl, 0, 0, 544, 960, 0, 0, 544, 960);\n```\n\n### 转换为base64\n\n```javascript\nlet image = canvasEl.toDataURL('image/png');\n```\n\n## 视频录制\n\n实现思路：    \n- 开始录像    \n    1. 获取video标签；\n    2. 获取视频流；\n    3. 将视频流注入到`recordrtc`；\n    4. 调用录制事件；\n- 停止录像       \n    1. 获取到录制的`blob`对象；\n    2. 生成可以直接播放的`url`；\n    2. 将`blob`转换为视频文件；\n\n### 开始录像\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n\n//获取视频流\nlet stream = videoEl.captureStream();\n\n//将视频流注入到recordRTC\nthis.recorder = RecordRTC(stream, {\n    type: 'video'\n});\n\n//开始录制\nthis.recorder.startRecording();\n```\n\n### 停止录像\n\n```javascript\n//停止录制\nthis.recorder.stopRecording(() => {\n\n    //获取录制的blob对象\n    let blob = this.recorder.getBlob();\n    this.videoFile = this.recorder.getBlob();\n\n    //将blob转换为可以供video播放的url\n    let url = URL.createObjectURL(blob);\n\n    //将blob对象转换为文件\n    let fileName = this.videoFileName+\".webm\";\n    let fileObject = new File([blob], fileName, {\n        type: 'video/webm'\n    });     \n    \n});\n```\n\n## 录制插件\n\n如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去[这里](https://github.com/lp-liupan/vue-video-tape \"vue-video-tape\")","source":"_posts/VUE实现前端视频录制和截图.md","raw":"---\ntitle: VUE实现前端视频录制和截图\ndate: 2019-09-17 15:15:18\ncategories: VUE\n---\n\n## 介绍\n\n该功能是基于`vue-video-player`和`recordrtc`两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。\n<!-- more -->\n\n## 依赖\n\n```bash\nnpm install vue-video-player recordrtc\n```\n\n## 引入\n\n因为`vue-video-player`文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：\n\n```javascript\n//组件内引入\nimport { videoPlayer } from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\n\n//全局引入\nimport VideoPlayer from 'vue-video-player';\nimport 'videojs-contrib-hls';\nrequire('video.js/dist/video-js.css');\nrequire('vue-video-player/src/custom-theme.css');\nVue.use(VideoPlayer);\n```\n然后在需要使用的组件内引入`recordrtc`\n\n```javascript\nimport RecordRTC from 'recordrtc'\n```\n\n## 截图\n\n主要思路：    \n1. 获取当前播放的`video`标签；\n2. 创建一个`canvas`；\n3. 调用`canvas`的`drawImage`方法进行绘制；\n4. 将`canvas`转换为图片或base64；\n\n### 获取video标签\n\n因为在vue项目中，可以利用`ref`属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n```\n\n### 创建canvas\n\n```javascript\n//创建一个canvas\nlet canvasEl = document.createElement('canvas');\ncanvasEl.width = videoEl.videoWidth;\ncanvasEl.height = videoEl.videoHeight;\n```\n\n### 调用drawImage方法\n\n具体关于`drawImage`方法的使用，可以参考[文档](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage \"drwaImage文档\")\n\n```javascript\n//截图\nlet ctx = canvasEl.getContext('2d');\nctx.drawImage(videoEl, 0, 0, 544, 960, 0, 0, 544, 960);\n```\n\n### 转换为base64\n\n```javascript\nlet image = canvasEl.toDataURL('image/png');\n```\n\n## 视频录制\n\n实现思路：    \n- 开始录像    \n    1. 获取video标签；\n    2. 获取视频流；\n    3. 将视频流注入到`recordrtc`；\n    4. 调用录制事件；\n- 停止录像       \n    1. 获取到录制的`blob`对象；\n    2. 生成可以直接播放的`url`；\n    2. 将`blob`转换为视频文件；\n\n### 开始录像\n\n```javascript\n//获取video元素\nlet video = this.$refs.videoPlayer;\nlet videoEl = video.player.tech({\n    IWillNotUseThisInPlugins: true\n}).el();\n\n//获取视频流\nlet stream = videoEl.captureStream();\n\n//将视频流注入到recordRTC\nthis.recorder = RecordRTC(stream, {\n    type: 'video'\n});\n\n//开始录制\nthis.recorder.startRecording();\n```\n\n### 停止录像\n\n```javascript\n//停止录制\nthis.recorder.stopRecording(() => {\n\n    //获取录制的blob对象\n    let blob = this.recorder.getBlob();\n    this.videoFile = this.recorder.getBlob();\n\n    //将blob转换为可以供video播放的url\n    let url = URL.createObjectURL(blob);\n\n    //将blob对象转换为文件\n    let fileName = this.videoFileName+\".webm\";\n    let fileObject = new File([blob], fileName, {\n        type: 'video/webm'\n    });     \n    \n});\n```\n\n## 录制插件\n\n如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去[这里](https://github.com/lp-liupan/vue-video-tape \"vue-video-tape\")","slug":"VUE实现前端视频录制和截图","published":1,"updated":"2019-09-19T07:05:07.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84flq00003cyhbmymx4u2","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>该功能是基于<code>vue-video-player</code>和<code>recordrtc</code>两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-player recordrtc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>因为<code>vue-video-player</code>文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件内引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; videoPlayer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VideoPlayer <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\">Vue.use(VideoPlayer);</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要使用的组件内引入<code>recordrtc</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RecordRTC <span class=\"keyword\">from</span> <span class=\"string\">'recordrtc'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p>主要思路：    </p>\n<ol>\n<li>获取当前播放的<code>video</code>标签；</li>\n<li>创建一个<code>canvas</code>；</li>\n<li>调用<code>canvas</code>的<code>drawImage</code>方法进行绘制；</li>\n<li>将<code>canvas</code>转换为图片或base64；</li>\n</ol>\n<h3 id=\"获取video标签\"><a href=\"#获取video标签\" class=\"headerlink\" title=\"获取video标签\"></a>获取video标签</h3><p>因为在vue项目中，可以利用<code>ref</code>属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建canvas\"><a href=\"#创建canvas\" class=\"headerlink\" title=\"创建canvas\"></a>创建canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvasEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">canvasEl.width = videoEl.videoWidth;</span><br><span class=\"line\">canvasEl.height = videoEl.videoHeight;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用drawImage方法\"><a href=\"#调用drawImage方法\" class=\"headerlink\" title=\"调用drawImage方法\"></a>调用drawImage方法</h3><p>具体关于<code>drawImage</code>方法的使用，可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drwaImage文档\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截图</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = canvasEl.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">ctx.drawImage(videoEl, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换为base64\"><a href=\"#转换为base64\" class=\"headerlink\" title=\"转换为base64\"></a>转换为base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> image = canvasEl.toDataURL(<span class=\"string\">'image/png'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视频录制\"><a href=\"#视频录制\" class=\"headerlink\" title=\"视频录制\"></a>视频录制</h2><p>实现思路：    </p>\n<ul>\n<li>开始录像    <ol>\n<li>获取video标签；</li>\n<li>获取视频流；</li>\n<li>将视频流注入到<code>recordrtc</code>；</li>\n<li>调用录制事件；</li>\n</ol>\n</li>\n<li>停止录像       <ol>\n<li>获取到录制的<code>blob</code>对象；</li>\n<li>生成可以直接播放的<code>url</code>；</li>\n<li>将<code>blob</code>转换为视频文件；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"开始录像\"><a href=\"#开始录像\" class=\"headerlink\" title=\"开始录像\"></a>开始录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取视频流</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = videoEl.captureStream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将视频流注入到recordRTC</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder = RecordRTC(stream, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'video'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.startRecording();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止录像\"><a href=\"#停止录像\" class=\"headerlink\" title=\"停止录像\"></a>停止录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//停止录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.stopRecording(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取录制的blob对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.videoFile = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob转换为可以供video播放的url</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob对象转换为文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"keyword\">this</span>.videoFileName+<span class=\"string\">\".webm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObject = <span class=\"keyword\">new</span> File([blob], fileName, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'video/webm'</span></span><br><span class=\"line\">    &#125;);     </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"录制插件\"><a href=\"#录制插件\" class=\"headerlink\" title=\"录制插件\"></a>录制插件</h2><p>如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去<a href=\"https://github.com/lp-liupan/vue-video-tape\" title=\"vue-video-tape\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>该功能是基于<code>vue-video-player</code>和<code>recordrtc</code>两个库来实现的。视频录制功能大多在后端实现，但是会出现不同步的情况，所以如果在直播或者视频播放时，想要录制一个简短的视频同时又要保证一致性的情况下，可以选择在前端进行视频的录制。</p>","more":"<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-player recordrtc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>因为<code>vue-video-player</code>文档比较坑爹，如果按照文档的方式引入，会导致视频流解析不了。具体引入方式应该为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件内引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; videoPlayer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VideoPlayer <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-player'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'videojs-contrib-hls'</span>;</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'video.js/dist/video-js.css'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'vue-video-player/src/custom-theme.css'</span>);</span><br><span class=\"line\">Vue.use(VideoPlayer);</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要使用的组件内引入<code>recordrtc</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RecordRTC <span class=\"keyword\">from</span> <span class=\"string\">'recordrtc'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p>主要思路：    </p>\n<ol>\n<li>获取当前播放的<code>video</code>标签；</li>\n<li>创建一个<code>canvas</code>；</li>\n<li>调用<code>canvas</code>的<code>drawImage</code>方法进行绘制；</li>\n<li>将<code>canvas</code>转换为图片或base64；</li>\n</ol>\n<h3 id=\"获取video标签\"><a href=\"#获取video标签\" class=\"headerlink\" title=\"获取video标签\"></a>获取video标签</h3><p>因为在vue项目中，可以利用<code>ref</code>属性获取到video标签。我使用的是这种方法，也有其他的方法可以获取到，自由发挥就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建canvas\"><a href=\"#创建canvas\" class=\"headerlink\" title=\"创建canvas\"></a>创建canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个canvas</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> canvasEl = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">canvasEl.width = videoEl.videoWidth;</span><br><span class=\"line\">canvasEl.height = videoEl.videoHeight;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用drawImage方法\"><a href=\"#调用drawImage方法\" class=\"headerlink\" title=\"调用drawImage方法\"></a>调用drawImage方法</h3><p>具体关于<code>drawImage</code>方法的使用，可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\" title=\"drwaImage文档\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//截图</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ctx = canvasEl.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">ctx.drawImage(videoEl, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">544</span>, <span class=\"number\">960</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换为base64\"><a href=\"#转换为base64\" class=\"headerlink\" title=\"转换为base64\"></a>转换为base64</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> image = canvasEl.toDataURL(<span class=\"string\">'image/png'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视频录制\"><a href=\"#视频录制\" class=\"headerlink\" title=\"视频录制\"></a>视频录制</h2><p>实现思路：    </p>\n<ul>\n<li>开始录像    <ol>\n<li>获取video标签；</li>\n<li>获取视频流；</li>\n<li>将视频流注入到<code>recordrtc</code>；</li>\n<li>调用录制事件；</li>\n</ol>\n</li>\n<li>停止录像       <ol>\n<li>获取到录制的<code>blob</code>对象；</li>\n<li>生成可以直接播放的<code>url</code>；</li>\n<li>将<code>blob</code>转换为视频文件；</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"开始录像\"><a href=\"#开始录像\" class=\"headerlink\" title=\"开始录像\"></a>开始录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取video元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> video = <span class=\"keyword\">this</span>.$refs.videoPlayer;</span><br><span class=\"line\"><span class=\"keyword\">let</span> videoEl = video.player.tech(&#123;</span><br><span class=\"line\">    IWillNotUseThisInPlugins: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;).el();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取视频流</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stream = videoEl.captureStream();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将视频流注入到recordRTC</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder = RecordRTC(stream, &#123;</span><br><span class=\"line\">    type: <span class=\"string\">'video'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.startRecording();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"停止录像\"><a href=\"#停止录像\" class=\"headerlink\" title=\"停止录像\"></a>停止录像</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//停止录制</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.recorder.stopRecording(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取录制的blob对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.videoFile = <span class=\"keyword\">this</span>.recorder.getBlob();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob转换为可以供video播放的url</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> url = URL.createObjectURL(blob);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将blob对象转换为文件</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"keyword\">this</span>.videoFileName+<span class=\"string\">\".webm\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObject = <span class=\"keyword\">new</span> File([blob], fileName, &#123;</span><br><span class=\"line\">        type: <span class=\"string\">'video/webm'</span></span><br><span class=\"line\">    &#125;);     </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"录制插件\"><a href=\"#录制插件\" class=\"headerlink\" title=\"录制插件\"></a>录制插件</h2><p>如果觉得自己实现太麻烦可以直接下载我的包，具体如何使用可以去<a href=\"https://github.com/lp-liupan/vue-video-tape\" title=\"vue-video-tape\" target=\"_blank\" rel=\"noopener\">这里</a></p>"},{"title":"php上传大文件配置","date":"2019-08-16T01:37:34.000Z","_content":"\n# PHP配置问题\n\n## PHP上传文件大小限制\n>PHP配置文件默认的post上传数据`post_max_size`大小为2M，默认上传文件`upload_max_filesize`的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。\n<!-- more -->\n\n## PHP最长执行时间限制\n>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间`max_execut_time`为30秒，如果超过了30秒脚本就会停止执行。\n\n## PHP配置文件的修改\n>PHP的配置文件一般位于`/usr/local/php7/lib/php.ini`，用vim编辑器打开，进入文件后找到`post_max_size`这个变量，然后将数值修改为合适的大小。同样的将`upload_max_filesize`变量也改为合适的大小。执行时间的变量`max_execut_time`的值改为`0`表示没有时间限制。\n\n## 重启PHP\n>修改了PHP的配置文件`php.ini`后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭`killall php-fpm`，然后在`/usr/local/php7/sbin`文件夹下启动`/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf `。\n\n>如果在页面报错`502 BadGateway`或者`Gateway Timeout`则表示`php-fpm`没有启动。\n\n# nginx配置问题\n\n## nginx设置上传文件最大值\n>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下`client_max_body_size`变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是`client_max_body_size 500m;`。\n\n## 重启nginx\n>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是`/usr/local/openresty/nginx/nginx/sbin/nginx -s reload`。","source":"_posts/php上传大文件配置.md","raw":"---\ntitle: php上传大文件配置\ndate: 2019-08-16 09:37:34\ncategories: 服务器配置问题\n---\n\n# PHP配置问题\n\n## PHP上传文件大小限制\n>PHP配置文件默认的post上传数据`post_max_size`大小为2M，默认上传文件`upload_max_filesize`的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。\n<!-- more -->\n\n## PHP最长执行时间限制\n>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间`max_execut_time`为30秒，如果超过了30秒脚本就会停止执行。\n\n## PHP配置文件的修改\n>PHP的配置文件一般位于`/usr/local/php7/lib/php.ini`，用vim编辑器打开，进入文件后找到`post_max_size`这个变量，然后将数值修改为合适的大小。同样的将`upload_max_filesize`变量也改为合适的大小。执行时间的变量`max_execut_time`的值改为`0`表示没有时间限制。\n\n## 重启PHP\n>修改了PHP的配置文件`php.ini`后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭`killall php-fpm`，然后在`/usr/local/php7/sbin`文件夹下启动`/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf `。\n\n>如果在页面报错`502 BadGateway`或者`Gateway Timeout`则表示`php-fpm`没有启动。\n\n# nginx配置问题\n\n## nginx设置上传文件最大值\n>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下`client_max_body_size`变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是`client_max_body_size 500m;`。\n\n## 重启nginx\n>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是`/usr/local/openresty/nginx/nginx/sbin/nginx -s reload`。","slug":"php上传大文件配置","published":1,"updated":"2019-09-19T07:05:07.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84flw00023cyh2c7rwcok","content":"<h1 id=\"PHP配置问题\"><a href=\"#PHP配置问题\" class=\"headerlink\" title=\"PHP配置问题\"></a>PHP配置问题</h1><h2 id=\"PHP上传文件大小限制\"><a href=\"#PHP上传文件大小限制\" class=\"headerlink\" title=\"PHP上传文件大小限制\"></a>PHP上传文件大小限制</h2><blockquote>\n<p>PHP配置文件默认的post上传数据<code>post_max_size</code>大小为2M，默认上传文件<code>upload_max_filesize</code>的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"PHP最长执行时间限制\"><a href=\"#PHP最长执行时间限制\" class=\"headerlink\" title=\"PHP最长执行时间限制\"></a>PHP最长执行时间限制</h2><blockquote>\n<p>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间<code>max_execut_time</code>为30秒，如果超过了30秒脚本就会停止执行。</p>\n</blockquote>\n<h2 id=\"PHP配置文件的修改\"><a href=\"#PHP配置文件的修改\" class=\"headerlink\" title=\"PHP配置文件的修改\"></a>PHP配置文件的修改</h2><blockquote>\n<p>PHP的配置文件一般位于<code>/usr/local/php7/lib/php.ini</code>，用vim编辑器打开，进入文件后找到<code>post_max_size</code>这个变量，然后将数值修改为合适的大小。同样的将<code>upload_max_filesize</code>变量也改为合适的大小。执行时间的变量<code>max_execut_time</code>的值改为<code>0</code>表示没有时间限制。</p>\n</blockquote>\n<h2 id=\"重启PHP\"><a href=\"#重启PHP\" class=\"headerlink\" title=\"重启PHP\"></a>重启PHP</h2><blockquote>\n<p>修改了PHP的配置文件<code>php.ini</code>后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭<code>killall php-fpm</code>，然后在<code>/usr/local/php7/sbin</code>文件夹下启动<code>/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf</code>。</p>\n</blockquote>\n<blockquote>\n<p>如果在页面报错<code>502 BadGateway</code>或者<code>Gateway Timeout</code>则表示<code>php-fpm</code>没有启动。</p>\n</blockquote>\n<h1 id=\"nginx配置问题\"><a href=\"#nginx配置问题\" class=\"headerlink\" title=\"nginx配置问题\"></a>nginx配置问题</h1><h2 id=\"nginx设置上传文件最大值\"><a href=\"#nginx设置上传文件最大值\" class=\"headerlink\" title=\"nginx设置上传文件最大值\"></a>nginx设置上传文件最大值</h2><blockquote>\n<p>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下<code>client_max_body_size</code>变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是<code>client_max_body_size 500m;</code>。</p>\n</blockquote>\n<h2 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h2><blockquote>\n<p>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是<code>/usr/local/openresty/nginx/nginx/sbin/nginx -s reload</code>。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"PHP配置问题\"><a href=\"#PHP配置问题\" class=\"headerlink\" title=\"PHP配置问题\"></a>PHP配置问题</h1><h2 id=\"PHP上传文件大小限制\"><a href=\"#PHP上传文件大小限制\" class=\"headerlink\" title=\"PHP上传文件大小限制\"></a>PHP上传文件大小限制</h2><blockquote>\n<p>PHP配置文件默认的post上传数据<code>post_max_size</code>大小为2M，默认上传文件<code>upload_max_filesize</code>的大小为8M。所以如果文件大小超过了默认的最大值就会出现上传失败的问题。</p>\n</blockquote>","more":"<h2 id=\"PHP最长执行时间限制\"><a href=\"#PHP最长执行时间限制\" class=\"headerlink\" title=\"PHP最长执行时间限制\"></a>PHP最长执行时间限制</h2><blockquote>\n<p>大文件上传失败的另一个原因就是PHP执行时间的限制问题。因为大文件的上传比较慢，而PHP默认的最长执行时间<code>max_execut_time</code>为30秒，如果超过了30秒脚本就会停止执行。</p>\n</blockquote>\n<h2 id=\"PHP配置文件的修改\"><a href=\"#PHP配置文件的修改\" class=\"headerlink\" title=\"PHP配置文件的修改\"></a>PHP配置文件的修改</h2><blockquote>\n<p>PHP的配置文件一般位于<code>/usr/local/php7/lib/php.ini</code>，用vim编辑器打开，进入文件后找到<code>post_max_size</code>这个变量，然后将数值修改为合适的大小。同样的将<code>upload_max_filesize</code>变量也改为合适的大小。执行时间的变量<code>max_execut_time</code>的值改为<code>0</code>表示没有时间限制。</p>\n</blockquote>\n<h2 id=\"重启PHP\"><a href=\"#重启PHP\" class=\"headerlink\" title=\"重启PHP\"></a>重启PHP</h2><blockquote>\n<p>修改了PHP的配置文件<code>php.ini</code>后需要对PHP进行重启，具体如何重启自行谷歌。我这里用的是最简陋的方法，先关闭<code>killall php-fpm</code>，然后在<code>/usr/local/php7/sbin</code>文件夹下启动<code>/usr/local/php7/sbin/php-fpm –c ../lib/php.ini –y ../etc/php-fpm.conf</code>。</p>\n</blockquote>\n<blockquote>\n<p>如果在页面报错<code>502 BadGateway</code>或者<code>Gateway Timeout</code>则表示<code>php-fpm</code>没有启动。</p>\n</blockquote>\n<h1 id=\"nginx配置问题\"><a href=\"#nginx配置问题\" class=\"headerlink\" title=\"nginx配置问题\"></a>nginx配置问题</h1><h2 id=\"nginx设置上传文件最大值\"><a href=\"#nginx设置上传文件最大值\" class=\"headerlink\" title=\"nginx设置上传文件最大值\"></a>nginx设置上传文件最大值</h2><blockquote>\n<p>如果上述两总情况都发现没有问题则可以去nginx的配置文件看一下<code>client_max_body_size</code>变量，这个变量是用来设置上传文件大小的，自行设置好合适的值即可。我设置的是<code>client_max_body_size 500m;</code>。</p>\n</blockquote>\n<h2 id=\"重启nginx\"><a href=\"#重启nginx\" class=\"headerlink\" title=\"重启nginx\"></a>重启nginx</h2><blockquote>\n<p>根据nginx安装的不同，自行谷歌重启nginx即可。我在项目中使用的是<code>/usr/local/openresty/nginx/nginx/sbin/nginx -s reload</code>。</p>\n</blockquote>"},{"title":"封装VUE组件并发布到npm","date":"2019-09-18T08:44:24.000Z","_content":"\n## 前言\n\n因为项目中遇到了部分需求在网上并没有找到比较好的解决方案，所以决定自己实现。实现过后本着为劳苦大众做贡献的想法决定将其开源，顺便也学习一下开源的流程。\n<!-- more -->\n\n>至于网上这么多教程，我还要单独写一篇。因为我遇到了很多坑，搞了好几天才完整的弄好，为了下次发布npm包方便，所以记录一下。\n\n## 准备npm\n\n1. 首先需要到npm官网去注册，[点这里去哦](https://www.npmjs.com/ \"npm官网\")。    \n2. 然后在电脑上登录\n```bash\nnpm login\n```\n\n## 项目准备\n这里我们使用的是vue项目，而且需要发布的包的功能也不复杂，所以我们选择使用`webpack-simple`搭建一个简易的`vue`项目，使用`vue@cli`搭建的脚手架对我们来说太臃肿了。\n```bash\nvue init webpack-simple 项目名  \n\n#然后会提示填写作者，项目名等信息，不想写就直接‘y’或者‘enter’\n\ncd 项目文件\n\nnpm install\n```\n`npm`下载完毕后就可以直接运行项目了\n```bash\nnpm run dev\n```\n此时项目的目录主要结构应该是如下这样的\n```\n|-src\n|-|-assets\n|-|-|-logo.png\n|-|-App.vue\n|-|-main.js\n|-index.html\n|-package.json\n|-webpack.config.js\n```\n\n## 项目开发\n\n可以先改造一下项目目录结构，下面是我改造后的，也可以根据自己的编码习惯改造，但是增加的两个`index.js`是比较关键的文件，不要漏掉了。\n```\n|-src\n|-|-tape         //自定义文件夹\n|-|-|-tape.vue   //自定义组件名\n|-|-|-index.js   //注意这个文件\n|-|-App.vue\n|-|-main.js\n|-|-index.js     //注意这个文件\n|-index.html\n|-package.json\n|-webpack.config.js\n```\n{% asset_img 目录结构.png %}\n\n***\n注意：\n在编辑需要发布到npm的组件时（这里就是指`tape.vue`组件），务必要记得不能忽略`name`属性，这个涉及到后面组件导出的问题。\n\n## 发布\n\n在实现了功能过后，我们可以利用`App.vue`来测试一下组件的功能\n```html\n<template>\n    <div id=\"app\">\n       <vueVideoTape ></vueVideoTape>\n    </div>\n</template>\n<script>\n\nimport vueVideoTape from './tape/tape'\n\nexport default  {\n    data(){\n        return{}\n    },\n    components:{\n       vueVideoTape\n\t},\n\tmethods:{\n\t\n\t}\n}\n</script>\n```\n\n>经过测试没有问题后，就可以开始着手发布前的准备了，这里也是最麻烦的地方，很多的小细节要注意。\n\n首先要对组件的导出做处理，要实现其他人通过`npm install`下载后，可以全局引入，也可以组件内按需引入。也就是要实现下列这两个引用方式。\n```javascript\n\n//全局引入\nimport tape from 'vue-video-tape';\nVue.use(tape);\n\n//组件内按需引入\nimport {VueVideoTape} from 'vue-video-tape';\n```\n\n与`tape.vue`同级`index.js`对组件导出做如下处理\n```javascript\nimport VueVideoTape from './tape.vue';\n\n//这里VueVideoTape.name就是组件中的name属性，所以正如前文提到到，name属性不可以忽略，必须要有\nVueVideoTape.install = Vue => Vue.component(VueVideoTape.name, VueVideoTape);\n\nexport default VueVideoTape;\n```\n\n与`main.js`同级的`index.js`对组件导出做如下处理\n```javascript\n//如果有多个导出的组件，在这里要引入\nimport VueVideoTape from './tape/index.js';\n\n\n//如果引入多个组件，在这里都要注册\nconst components = [\n\tVueVideoTape,\n]\n\nconst install = function(Vue, opts = {}) {\n  components.map(component => {\n    Vue.component(component.name, component);\n  })\n}\n\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\n\n//多个组件时，在这里要全部导出，install不可以忽略，全局引入时，vue会自动调用install\nexport default {\n  install,\n  VueVideoTape,\n}\n\n//多个组件导出，这里依次导出，组件内按需引入时就是引入这里的组件\nexport {\n\tVueVideoTape\n}\n```\n\n***\n\n>文件的导出处理完后，还需要对webpack的配置进行修改。    \n\n首先是对开发环境和生产环境的区分，生产环境就直接打包到`dist`文件夹。\n```javascript\nentry: NODE_ENV == 'development' ? './src/main.js' : './src/index.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),//打包输出地址\n    publicPath: '/dist/',\n    filename: 'vue-video-tape.js',//打包后文件名\n    library:'VueVideoTape',\n\tlibraryTarget:'umd',\n\tumdNamedDefine: true\n  },\n```\n\n>开发功能时候也会需要引入其他的`npm`包，但是我们打包发布的时候，要将这些引入的包排除，否则就会导致打包的文件会非常大，而且引入过后造成依赖重复，冗余非常严重。所以在生产环境的时候，我们要对打包的文件进行单独处理。\n```javascript\n//在webpck.config.js最后加上下面的代码\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: false,//这里改为false\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true\n\t}),\n\tnew webpack.optimize.UglifyJsPlugin({\n\t\tcompress: {\n\t\t  warnings: false\n\t\t}\n\t  })\n  ])\n\n//这里是对组件内依赖的排除\n  module.exports.externals = {\n\trecordrtc: {\n        commonjs: 'recordrtc',\n        commonjs2: 'recordrtc',\n        amd: 'recordrtc',\n        root: '_'\n\t},\n\t'vue-video-player': {\n        commonjs: 'vue-video-player',\n        commonjs2: 'vue-video-player',\n        amd: 'vue-video-player',\n        root: '_'\n\t},\n  }\n}\n```\n\nwebpack配置修改完后，还需要对package.json进行部分修改，主要涉及到几个发布npm包需要用到的关键属性。\n\n`name`属性决定了`npm install`时候的名字\n```json\n\"name\": \"vue-video-tape\",\n```\n```bash\nnpm install vue-video-tape\n```\n\n`version`属性是发布的版本，`每次发布`都必须要对其进行修改，否则发布失败\n\n```json\n\"version\": \"1.1.0\",\n```\n\n`private`属性是决定是否开源，如果为`true`则发布不了\n\n```json\n\"private\": false,\n```\n\n`main`属性决定了当`import xxx from 'xxxxx'`时，引入哪个文件\n\n```json\n\"main\": \"dist/vue-video-tape.js\",\n```\n\n每次发布时我们都需要对项目进行打包，但是经常会忘记打包直接发布，导致发布的新版本是上一个版本，所以我们可以引入一个事件，在每次发布的前自动进行打包操作。\n```json\n\"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n```\n\n`files`属性指定当`npm install`时下载的文件，如下配置后，`npm install vue-video-tape`下载的包就只有dist文件夹和package.json文件，可以减少包的体积。\n```json\n\"files\": [\n    \"dist\",\n    \"package.json\"\n  ],\n```\n\n***\n\n>最后的最后，当一切准备就绪了，就可以执行发布命令了\n```bash\nnpm publish\n```\n注意：可能会报错你的项目名字已经有了，这时候你需要去修改`package.json`文件中的`name`属性。     \n\n发布成功后，可以直接到npm官网上搜索你的包。\n\n\n## 下载使用\n\n```bash\nnpm install 包名\n```\n\n全局引入\n```javascript\nimport xxx from 'vue-video-tape';\nVue.use(xxx);\n```\n\n组件内引入\n```javascript\nimport VueVideoTape from 'vue-video-tape';\n\ncomponents:{VueVideoTape},\n```","source":"_posts/封装VUE组件并发布到npm.md","raw":"---\ntitle: 封装VUE组件并发布到npm\ndate: 2019-09-18 16:44:24\ncategories: 开发小工具\n---\n\n## 前言\n\n因为项目中遇到了部分需求在网上并没有找到比较好的解决方案，所以决定自己实现。实现过后本着为劳苦大众做贡献的想法决定将其开源，顺便也学习一下开源的流程。\n<!-- more -->\n\n>至于网上这么多教程，我还要单独写一篇。因为我遇到了很多坑，搞了好几天才完整的弄好，为了下次发布npm包方便，所以记录一下。\n\n## 准备npm\n\n1. 首先需要到npm官网去注册，[点这里去哦](https://www.npmjs.com/ \"npm官网\")。    \n2. 然后在电脑上登录\n```bash\nnpm login\n```\n\n## 项目准备\n这里我们使用的是vue项目，而且需要发布的包的功能也不复杂，所以我们选择使用`webpack-simple`搭建一个简易的`vue`项目，使用`vue@cli`搭建的脚手架对我们来说太臃肿了。\n```bash\nvue init webpack-simple 项目名  \n\n#然后会提示填写作者，项目名等信息，不想写就直接‘y’或者‘enter’\n\ncd 项目文件\n\nnpm install\n```\n`npm`下载完毕后就可以直接运行项目了\n```bash\nnpm run dev\n```\n此时项目的目录主要结构应该是如下这样的\n```\n|-src\n|-|-assets\n|-|-|-logo.png\n|-|-App.vue\n|-|-main.js\n|-index.html\n|-package.json\n|-webpack.config.js\n```\n\n## 项目开发\n\n可以先改造一下项目目录结构，下面是我改造后的，也可以根据自己的编码习惯改造，但是增加的两个`index.js`是比较关键的文件，不要漏掉了。\n```\n|-src\n|-|-tape         //自定义文件夹\n|-|-|-tape.vue   //自定义组件名\n|-|-|-index.js   //注意这个文件\n|-|-App.vue\n|-|-main.js\n|-|-index.js     //注意这个文件\n|-index.html\n|-package.json\n|-webpack.config.js\n```\n{% asset_img 目录结构.png %}\n\n***\n注意：\n在编辑需要发布到npm的组件时（这里就是指`tape.vue`组件），务必要记得不能忽略`name`属性，这个涉及到后面组件导出的问题。\n\n## 发布\n\n在实现了功能过后，我们可以利用`App.vue`来测试一下组件的功能\n```html\n<template>\n    <div id=\"app\">\n       <vueVideoTape ></vueVideoTape>\n    </div>\n</template>\n<script>\n\nimport vueVideoTape from './tape/tape'\n\nexport default  {\n    data(){\n        return{}\n    },\n    components:{\n       vueVideoTape\n\t},\n\tmethods:{\n\t\n\t}\n}\n</script>\n```\n\n>经过测试没有问题后，就可以开始着手发布前的准备了，这里也是最麻烦的地方，很多的小细节要注意。\n\n首先要对组件的导出做处理，要实现其他人通过`npm install`下载后，可以全局引入，也可以组件内按需引入。也就是要实现下列这两个引用方式。\n```javascript\n\n//全局引入\nimport tape from 'vue-video-tape';\nVue.use(tape);\n\n//组件内按需引入\nimport {VueVideoTape} from 'vue-video-tape';\n```\n\n与`tape.vue`同级`index.js`对组件导出做如下处理\n```javascript\nimport VueVideoTape from './tape.vue';\n\n//这里VueVideoTape.name就是组件中的name属性，所以正如前文提到到，name属性不可以忽略，必须要有\nVueVideoTape.install = Vue => Vue.component(VueVideoTape.name, VueVideoTape);\n\nexport default VueVideoTape;\n```\n\n与`main.js`同级的`index.js`对组件导出做如下处理\n```javascript\n//如果有多个导出的组件，在这里要引入\nimport VueVideoTape from './tape/index.js';\n\n\n//如果引入多个组件，在这里都要注册\nconst components = [\n\tVueVideoTape,\n]\n\nconst install = function(Vue, opts = {}) {\n  components.map(component => {\n    Vue.component(component.name, component);\n  })\n}\n\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\n\n//多个组件时，在这里要全部导出，install不可以忽略，全局引入时，vue会自动调用install\nexport default {\n  install,\n  VueVideoTape,\n}\n\n//多个组件导出，这里依次导出，组件内按需引入时就是引入这里的组件\nexport {\n\tVueVideoTape\n}\n```\n\n***\n\n>文件的导出处理完后，还需要对webpack的配置进行修改。    \n\n首先是对开发环境和生产环境的区分，生产环境就直接打包到`dist`文件夹。\n```javascript\nentry: NODE_ENV == 'development' ? './src/main.js' : './src/index.js',\n  output: {\n    path: path.resolve(__dirname, './dist'),//打包输出地址\n    publicPath: '/dist/',\n    filename: 'vue-video-tape.js',//打包后文件名\n    library:'VueVideoTape',\n\tlibraryTarget:'umd',\n\tumdNamedDefine: true\n  },\n```\n\n>开发功能时候也会需要引入其他的`npm`包，但是我们打包发布的时候，要将这些引入的包排除，否则就会导致打包的文件会非常大，而且引入过后造成依赖重复，冗余非常严重。所以在生产环境的时候，我们要对打包的文件进行单独处理。\n```javascript\n//在webpck.config.js最后加上下面的代码\nif (process.env.NODE_ENV === 'production') {\n  module.exports.devtool = '#source-map'\n  module.exports.plugins = (module.exports.plugins || []).concat([\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      sourceMap: false,//这里改为false\n      compress: {\n        warnings: false\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      minimize: true\n\t}),\n\tnew webpack.optimize.UglifyJsPlugin({\n\t\tcompress: {\n\t\t  warnings: false\n\t\t}\n\t  })\n  ])\n\n//这里是对组件内依赖的排除\n  module.exports.externals = {\n\trecordrtc: {\n        commonjs: 'recordrtc',\n        commonjs2: 'recordrtc',\n        amd: 'recordrtc',\n        root: '_'\n\t},\n\t'vue-video-player': {\n        commonjs: 'vue-video-player',\n        commonjs2: 'vue-video-player',\n        amd: 'vue-video-player',\n        root: '_'\n\t},\n  }\n}\n```\n\nwebpack配置修改完后，还需要对package.json进行部分修改，主要涉及到几个发布npm包需要用到的关键属性。\n\n`name`属性决定了`npm install`时候的名字\n```json\n\"name\": \"vue-video-tape\",\n```\n```bash\nnpm install vue-video-tape\n```\n\n`version`属性是发布的版本，`每次发布`都必须要对其进行修改，否则发布失败\n\n```json\n\"version\": \"1.1.0\",\n```\n\n`private`属性是决定是否开源，如果为`true`则发布不了\n\n```json\n\"private\": false,\n```\n\n`main`属性决定了当`import xxx from 'xxxxx'`时，引入哪个文件\n\n```json\n\"main\": \"dist/vue-video-tape.js\",\n```\n\n每次发布时我们都需要对项目进行打包，但是经常会忘记打包直接发布，导致发布的新版本是上一个版本，所以我们可以引入一个事件，在每次发布的前自动进行打包操作。\n```json\n\"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n```\n\n`files`属性指定当`npm install`时下载的文件，如下配置后，`npm install vue-video-tape`下载的包就只有dist文件夹和package.json文件，可以减少包的体积。\n```json\n\"files\": [\n    \"dist\",\n    \"package.json\"\n  ],\n```\n\n***\n\n>最后的最后，当一切准备就绪了，就可以执行发布命令了\n```bash\nnpm publish\n```\n注意：可能会报错你的项目名字已经有了，这时候你需要去修改`package.json`文件中的`name`属性。     \n\n发布成功后，可以直接到npm官网上搜索你的包。\n\n\n## 下载使用\n\n```bash\nnpm install 包名\n```\n\n全局引入\n```javascript\nimport xxx from 'vue-video-tape';\nVue.use(xxx);\n```\n\n组件内引入\n```javascript\nimport VueVideoTape from 'vue-video-tape';\n\ncomponents:{VueVideoTape},\n```","slug":"封装VUE组件并发布到npm","published":1,"updated":"2019-09-19T07:05:07.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84fm100043cyh4xhit7z4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为项目中遇到了部分需求在网上并没有找到比较好的解决方案，所以决定自己实现。实现过后本着为劳苦大众做贡献的想法决定将其开源，顺便也学习一下开源的流程。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>至于网上这么多教程，我还要单独写一篇。因为我遇到了很多坑，搞了好几天才完整的弄好，为了下次发布npm包方便，所以记录一下。</p>\n</blockquote>\n<h2 id=\"准备npm\"><a href=\"#准备npm\" class=\"headerlink\" title=\"准备npm\"></a>准备npm</h2><ol>\n<li>首先需要到npm官网去注册，<a href=\"https://www.npmjs.com/\" title=\"npm官网\" target=\"_blank\" rel=\"noopener\">点这里去哦</a>。    </li>\n<li>然后在电脑上登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>这里我们使用的是vue项目，而且需要发布的包的功能也不复杂，所以我们选择使用<code>webpack-simple</code>搭建一个简易的<code>vue</code>项目，使用<code>vue@cli</code>搭建的脚手架对我们来说太臃肿了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack-simple 项目名  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后会提示填写作者，项目名等信息，不想写就直接‘y’或者‘enter’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> 项目文件</span><br><span class=\"line\"></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p><code>npm</code>下载完毕后就可以直接运行项目了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>此时项目的目录主要结构应该是如下这样的</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-src</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-assets</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-logo.png</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-App.vue</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-main.js</span></span><br><span class=\"line\">|<span class=\"string\">-index.html</span></span><br><span class=\"line\">|<span class=\"string\">-package.json</span></span><br><span class=\"line\">|<span class=\"string\">-webpack.config.js</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2><p>可以先改造一下项目目录结构，下面是我改造后的，也可以根据自己的编码习惯改造，但是增加的两个<code>index.js</code>是比较关键的文件，不要漏掉了。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-src</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-tape         //自定义文件夹</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-tape.vue   //自定义组件名</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-index.js   //注意这个文件</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-App.vue</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-main.js</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-index.js     //注意这个文件</span></span><br><span class=\"line\">|<span class=\"string\">-index.html</span></span><br><span class=\"line\">|<span class=\"string\">-package.json</span></span><br><span class=\"line\">|<span class=\"string\">-webpack.config.js</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/09/18/封装VUE组件并发布到npm/目录结构.png\">\n\n<hr>\n<p>注意：<br>在编辑需要发布到npm的组件时（这里就是指<code>tape.vue</code>组件），务必要记得不能忽略<code>name</code>属性，这个涉及到后面组件导出的问题。</p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>在实现了功能过后，我们可以利用<code>App.vue</code>来测试一下组件的功能</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">vueVideoTape</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vueVideoTape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape/tape'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>  &#123;</span></span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span>&#123;&#125;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">       vueVideoTape</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>经过测试没有问题后，就可以开始着手发布前的准备了，这里也是最麻烦的地方，很多的小细节要注意。</p>\n</blockquote>\n<p>首先要对组件的导出做处理，要实现其他人通过<code>npm install</code>下载后，可以全局引入，也可以组件内按需引入。也就是要实现下列这两个引用方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tape <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\">Vue.use(tape);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组件内按需引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;VueVideoTape&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>tape.vue</code>同级<code>index.js</code>对组件导出做如下处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里VueVideoTape.name就是组件中的name属性，所以正如前文提到到，name属性不可以忽略，必须要有</span></span><br><span class=\"line\">VueVideoTape.install = <span class=\"function\"><span class=\"params\">Vue</span> =&gt;</span> Vue.component(VueVideoTape.name, VueVideoTape);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VueVideoTape;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>main.js</code>同级的<code>index.js</code>对组件导出做如下处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果有多个导出的组件，在这里要引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape/index.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果引入多个组件，在这里都要注册</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = [</span><br><span class=\"line\">\tVueVideoTape,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  components.map(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Vue.component(component.name, component);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">  install(<span class=\"built_in\">window</span>.Vue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个组件时，在这里要全部导出，install不可以忽略，全局引入时，vue会自动调用install</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  VueVideoTape,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个组件导出，这里依次导出，组件内按需引入时就是引入这里的组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\tVueVideoTape</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>文件的导出处理完后，还需要对webpack的配置进行修改。    </p>\n</blockquote>\n<p>首先是对开发环境和生产环境的区分，生产环境就直接打包到<code>dist</code>文件夹。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: NODE_ENV == <span class=\"string\">'development'</span> ? <span class=\"string\">'./src/main.js'</span> : <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),<span class=\"comment\">//打包输出地址</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'vue-video-tape.js'</span>,<span class=\"comment\">//打包后文件名</span></span><br><span class=\"line\">    library:<span class=\"string\">'VueVideoTape'</span>,</span><br><span class=\"line\">\tlibraryTarget:<span class=\"string\">'umd'</span>,</span><br><span class=\"line\">\tumdNamedDefine: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>开发功能时候也会需要引入其他的<code>npm</code>包，但是我们打包发布的时候，要将这些引入的包排除，否则就会导致打包的文件会非常大，而且引入过后造成依赖重复，冗余非常严重。所以在生产环境的时候，我们要对打包的文件进行单独处理。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在webpck.config.js最后加上下面的代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#source-map'</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,<span class=\"comment\">//这里改为false</span></span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">\t\tcompress: &#123;</span><br><span class=\"line\">\t\t  warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是对组件内依赖的排除</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.externals = &#123;</span><br><span class=\"line\">\trecordrtc: &#123;</span><br><span class=\"line\">        commonjs: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        commonjs2: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        amd: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        root: <span class=\"string\">'_'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'vue-video-player'</span>: &#123;</span><br><span class=\"line\">        commonjs: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        commonjs2: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        amd: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        root: <span class=\"string\">'_'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack配置修改完后，还需要对package.json进行部分修改，主要涉及到几个发布npm包需要用到的关键属性。</p>\n<p><code>name</code>属性决定了<code>npm install</code>时候的名字</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"name\": \"vue-video-tape\",</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-tape</span><br></pre></td></tr></table></figure>\n\n<p><code>version</code>属性是发布的版本，<code>每次发布</code>都必须要对其进行修改，否则发布失败</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"version\": \"1.1.0\",</span><br></pre></td></tr></table></figure>\n\n<p><code>private</code>属性是决定是否开源，如果为<code>true</code>则发布不了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"private\": false,</span><br></pre></td></tr></table></figure>\n\n<p><code>main</code>属性决定了当<code>import xxx from &#39;xxxxx&#39;</code>时，引入哪个文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"dist/vue-video-tape.js\",</span><br></pre></td></tr></table></figure>\n\n<p>每次发布时我们都需要对项目进行打包，但是经常会忘记打包直接发布，导致发布的新版本是上一个版本，所以我们可以引入一个事件，在每次发布的前自动进行打包操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",</span><br><span class=\"line\">    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\",</span><br><span class=\"line\">    \"prepublishOnly\": \"npm run build\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>files</code>属性指定当<code>npm install</code>时下载的文件，如下配置后，<code>npm install vue-video-tape</code>下载的包就只有dist文件夹和package.json文件，可以减少包的体积。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"files\": [</span><br><span class=\"line\">    \"dist\",</span><br><span class=\"line\">    <span class=\"string\">\"package.json\"</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>最后的最后，当一切准备就绪了，就可以执行发布命令了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>注意：可能会报错你的项目名字已经有了，这时候你需要去修改<code>package.json</code>文件中的<code>name</code>属性。     </p>\n<p>发布成功后，可以直接到npm官网上搜索你的包。</p>\n<h2 id=\"下载使用\"><a href=\"#下载使用\" class=\"headerlink\" title=\"下载使用\"></a>下载使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install 包名</span><br></pre></td></tr></table></figure>\n\n<p>全局引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xxx <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\">Vue.use(xxx);</span><br></pre></td></tr></table></figure>\n\n<p>组件内引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">components:&#123;VueVideoTape&#125;,</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>因为项目中遇到了部分需求在网上并没有找到比较好的解决方案，所以决定自己实现。实现过后本着为劳苦大众做贡献的想法决定将其开源，顺便也学习一下开源的流程。</p>","more":"<blockquote>\n<p>至于网上这么多教程，我还要单独写一篇。因为我遇到了很多坑，搞了好几天才完整的弄好，为了下次发布npm包方便，所以记录一下。</p>\n</blockquote>\n<h2 id=\"准备npm\"><a href=\"#准备npm\" class=\"headerlink\" title=\"准备npm\"></a>准备npm</h2><ol>\n<li>首先需要到npm官网去注册，<a href=\"https://www.npmjs.com/\" title=\"npm官网\" target=\"_blank\" rel=\"noopener\">点这里去哦</a>。    </li>\n<li>然后在电脑上登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>这里我们使用的是vue项目，而且需要发布的包的功能也不复杂，所以我们选择使用<code>webpack-simple</code>搭建一个简易的<code>vue</code>项目，使用<code>vue@cli</code>搭建的脚手架对我们来说太臃肿了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue init webpack-simple 项目名  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#然后会提示填写作者，项目名等信息，不想写就直接‘y’或者‘enter’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> 项目文件</span><br><span class=\"line\"></span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p><code>npm</code>下载完毕后就可以直接运行项目了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>此时项目的目录主要结构应该是如下这样的</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-src</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-assets</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-logo.png</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-App.vue</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-main.js</span></span><br><span class=\"line\">|<span class=\"string\">-index.html</span></span><br><span class=\"line\">|<span class=\"string\">-package.json</span></span><br><span class=\"line\">|<span class=\"string\">-webpack.config.js</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目开发\"><a href=\"#项目开发\" class=\"headerlink\" title=\"项目开发\"></a>项目开发</h2><p>可以先改造一下项目目录结构，下面是我改造后的，也可以根据自己的编码习惯改造，但是增加的两个<code>index.js</code>是比较关键的文件，不要漏掉了。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-src</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-tape         //自定义文件夹</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-tape.vue   //自定义组件名</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-</span>|<span class=\"string\">-index.js   //注意这个文件</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-App.vue</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-main.js</span></span><br><span class=\"line\">|<span class=\"string\">-</span>|<span class=\"string\">-index.js     //注意这个文件</span></span><br><span class=\"line\">|<span class=\"string\">-index.html</span></span><br><span class=\"line\">|<span class=\"string\">-package.json</span></span><br><span class=\"line\">|<span class=\"string\">-webpack.config.js</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/09/18/封装VUE组件并发布到npm/目录结构.png\">\n\n<hr>\n<p>注意：<br>在编辑需要发布到npm的组件时（这里就是指<code>tape.vue</code>组件），务必要记得不能忽略<code>name</code>属性，这个涉及到后面组件导出的问题。</p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>在实现了功能过后，我们可以利用<code>App.vue</code>来测试一下组件的功能</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">vueVideoTape</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vueVideoTape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape/tape'</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>  &#123;</span></span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span>&#123;&#125;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components:&#123;</span><br><span class=\"line\">       vueVideoTape</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>经过测试没有问题后，就可以开始着手发布前的准备了，这里也是最麻烦的地方，很多的小细节要注意。</p>\n</blockquote>\n<p>首先要对组件的导出做处理，要实现其他人通过<code>npm install</code>下载后，可以全局引入，也可以组件内按需引入。也就是要实现下列这两个引用方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tape <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\">Vue.use(tape);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//组件内按需引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;VueVideoTape&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>tape.vue</code>同级<code>index.js</code>对组件导出做如下处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里VueVideoTape.name就是组件中的name属性，所以正如前文提到到，name属性不可以忽略，必须要有</span></span><br><span class=\"line\">VueVideoTape.install = <span class=\"function\"><span class=\"params\">Vue</span> =&gt;</span> Vue.component(VueVideoTape.name, VueVideoTape);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> VueVideoTape;</span><br></pre></td></tr></table></figure>\n\n<p>与<code>main.js</code>同级的<code>index.js</code>对组件导出做如下处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果有多个导出的组件，在这里要引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'./tape/index.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果引入多个组件，在这里都要注册</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = [</span><br><span class=\"line\">\tVueVideoTape,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> install = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Vue, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  components.map(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">    Vue.component(component.name, component);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span> &amp;&amp; <span class=\"built_in\">window</span>.Vue) &#123;</span><br><span class=\"line\">  install(<span class=\"built_in\">window</span>.Vue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个组件时，在这里要全部导出，install不可以忽略，全局引入时，vue会自动调用install</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  VueVideoTape,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个组件导出，这里依次导出，组件内按需引入时就是引入这里的组件</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">\tVueVideoTape</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>文件的导出处理完后，还需要对webpack的配置进行修改。    </p>\n</blockquote>\n<p>首先是对开发环境和生产环境的区分，生产环境就直接打包到<code>dist</code>文件夹。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: NODE_ENV == <span class=\"string\">'development'</span> ? <span class=\"string\">'./src/main.js'</span> : <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),<span class=\"comment\">//打包输出地址</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'vue-video-tape.js'</span>,<span class=\"comment\">//打包后文件名</span></span><br><span class=\"line\">    library:<span class=\"string\">'VueVideoTape'</span>,</span><br><span class=\"line\">\tlibraryTarget:<span class=\"string\">'umd'</span>,</span><br><span class=\"line\">\tumdNamedDefine: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>开发功能时候也会需要引入其他的<code>npm</code>包，但是我们打包发布的时候，要将这些引入的包排除，否则就会导致打包的文件会非常大，而且引入过后造成依赖重复，冗余非常严重。所以在生产环境的时候，我们要对打包的文件进行单独处理。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在webpck.config.js最后加上下面的代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.env.NODE_ENV === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.devtool = <span class=\"string\">'#source-map'</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.plugins = (<span class=\"built_in\">module</span>.exports.plugins || []).concat([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\">      <span class=\"string\">'process.env'</span>: &#123;</span><br><span class=\"line\">        NODE_ENV: <span class=\"string\">'\"production\"'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,<span class=\"comment\">//这里改为false</span></span><br><span class=\"line\">      compress: &#123;</span><br><span class=\"line\">        warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;),</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class=\"line\">\t\tcompress: &#123;</span><br><span class=\"line\">\t\t  warnings: <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t  &#125;)</span><br><span class=\"line\">  ])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是对组件内依赖的排除</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.exports.externals = &#123;</span><br><span class=\"line\">\trecordrtc: &#123;</span><br><span class=\"line\">        commonjs: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        commonjs2: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        amd: <span class=\"string\">'recordrtc'</span>,</span><br><span class=\"line\">        root: <span class=\"string\">'_'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'vue-video-player'</span>: &#123;</span><br><span class=\"line\">        commonjs: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        commonjs2: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        amd: <span class=\"string\">'vue-video-player'</span>,</span><br><span class=\"line\">        root: <span class=\"string\">'_'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>webpack配置修改完后，还需要对package.json进行部分修改，主要涉及到几个发布npm包需要用到的关键属性。</p>\n<p><code>name</code>属性决定了<code>npm install</code>时候的名字</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"name\": \"vue-video-tape\",</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-video-tape</span><br></pre></td></tr></table></figure>\n\n<p><code>version</code>属性是发布的版本，<code>每次发布</code>都必须要对其进行修改，否则发布失败</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"version\": \"1.1.0\",</span><br></pre></td></tr></table></figure>\n\n<p><code>private</code>属性是决定是否开源，如果为<code>true</code>则发布不了</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"private\": false,</span><br></pre></td></tr></table></figure>\n\n<p><code>main</code>属性决定了当<code>import xxx from &#39;xxxxx&#39;</code>时，引入哪个文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"main\": \"dist/vue-video-tape.js\",</span><br></pre></td></tr></table></figure>\n\n<p>每次发布时我们都需要对项目进行打包，但是经常会忘记打包直接发布，导致发布的新版本是上一个版本，所以我们可以引入一个事件，在每次发布的前自动进行打包操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",</span><br><span class=\"line\">    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\",</span><br><span class=\"line\">    \"prepublishOnly\": \"npm run build\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>files</code>属性指定当<code>npm install</code>时下载的文件，如下配置后，<code>npm install vue-video-tape</code>下载的包就只有dist文件夹和package.json文件，可以减少包的体积。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"files\": [</span><br><span class=\"line\">    \"dist\",</span><br><span class=\"line\">    <span class=\"string\">\"package.json\"</span></span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>最后的最后，当一切准备就绪了，就可以执行发布命令了</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p>注意：可能会报错你的项目名字已经有了，这时候你需要去修改<code>package.json</code>文件中的<code>name</code>属性。     </p>\n<p>发布成功后，可以直接到npm官网上搜索你的包。</p>\n<h2 id=\"下载使用\"><a href=\"#下载使用\" class=\"headerlink\" title=\"下载使用\"></a>下载使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install 包名</span><br></pre></td></tr></table></figure>\n\n<p>全局引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xxx <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\">Vue.use(xxx);</span><br></pre></td></tr></table></figure>\n\n<p>组件内引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueVideoTape <span class=\"keyword\">from</span> <span class=\"string\">'vue-video-tape'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">components:&#123;VueVideoTape&#125;,</span><br></pre></td></tr></table></figure>"},{"title":"服务器环境安装node","date":"2019-11-04T09:05:59.000Z","_content":"\n# 下载node\n\n前往[官网](https://nodejs.org/zh-cn/download/)下载Linux版的[二进制文件](https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz)。注意区别有两种后缀名不同的文件，一个是`.tar.xz`，另一个是`.tar.gz`。这里我使用的是`.tar.xz`。      \n\n复制好下载连接后到服务器存放下载文件的文件夹中下载：\n```bash\nwget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz\n```\n\n# 安装\n\n先解压文件\n```bash\ntar xvf node-v12.13.0-linux-x64.tar.xz\n```\n\ncd到可执行node命令的目录中\n```bash\ncd node-v12.13.0-linux-x64/bin\n```\n\n测试是否安装好node\n```bash\n./node -v\n```\n如果看到了版本信息，则说明node已经安装好了。\n\n# 全局使用\n\nnode虽然安装好了，但是发现只能在刚才指定的文件夹中使用，实际开发中肯定需要在其他地方也可以使用node命令，这时候我们就需要把node命令用软链接的方式放到全局，保证在其他地方也可以使用node命令。\n```bash\nln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/node /usr/bin/\n```\n\n目前我们只对node进行了软链接，接下来还需要对npm进行软链接\n```bash\nln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/npm /usr/bin/\n```\n\n软链接成功后，可以在任意目录中使用`node -v`或者`npm -v`，如果看到了相应的版本信息，则表明node全局配置成功。\n","source":"_posts/服务器环境安装node.md","raw":"---\ntitle: 服务器环境安装node\ndate: 2019-11-04 17:05:59\ncategories: 服务器配置问题\n---\n\n# 下载node\n\n前往[官网](https://nodejs.org/zh-cn/download/)下载Linux版的[二进制文件](https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz)。注意区别有两种后缀名不同的文件，一个是`.tar.xz`，另一个是`.tar.gz`。这里我使用的是`.tar.xz`。      \n\n复制好下载连接后到服务器存放下载文件的文件夹中下载：\n```bash\nwget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz\n```\n\n# 安装\n\n先解压文件\n```bash\ntar xvf node-v12.13.0-linux-x64.tar.xz\n```\n\ncd到可执行node命令的目录中\n```bash\ncd node-v12.13.0-linux-x64/bin\n```\n\n测试是否安装好node\n```bash\n./node -v\n```\n如果看到了版本信息，则说明node已经安装好了。\n\n# 全局使用\n\nnode虽然安装好了，但是发现只能在刚才指定的文件夹中使用，实际开发中肯定需要在其他地方也可以使用node命令，这时候我们就需要把node命令用软链接的方式放到全局，保证在其他地方也可以使用node命令。\n```bash\nln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/node /usr/bin/\n```\n\n目前我们只对node进行了软链接，接下来还需要对npm进行软链接\n```bash\nln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/npm /usr/bin/\n```\n\n软链接成功后，可以在任意目录中使用`node -v`或者`npm -v`，如果看到了相应的版本信息，则表明node全局配置成功。\n","slug":"服务器环境安装node","published":1,"updated":"2019-11-04T09:31:36.419Z","_id":"ck2k84fm300053cyhp91jiacs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h1><p>前往<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网</a>下载Linux版的<a href=\"https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">二进制文件</a>。注意区别有两种后缀名不同的文件，一个是<code>.tar.xz</code>，另一个是<code>.tar.gz</code>。这里我使用的是<code>.tar.xz</code>。      </p><p>复制好下载连接后到服务器存放下载文件的文件夹中下载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>先解压文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>cd到可执行node命令的目录中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v12.13.0-linux-x64/bin</span><br></pre></td></tr></table></figure>\n\n<p>测试是否安装好node</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node -v</span><br></pre></td></tr></table></figure>\n\n<p>如果看到了版本信息，则说明node已经安装好了。</p>\n<h1 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h1><p>node虽然安装好了，但是发现只能在刚才指定的文件夹中使用，实际开发中肯定需要在其他地方也可以使用node命令，这时候我们就需要把node命令用软链接的方式放到全局，保证在其他地方也可以使用node命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/node /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>目前我们只对node进行了软链接，接下来还需要对npm进行软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/npm /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>软链接成功后，可以在任意目录中使用<code>node -v</code>或者<code>npm -v</code>，如果看到了相应的版本信息，则表明node全局配置成功。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"下载node\"><a href=\"#下载node\" class=\"headerlink\" title=\"下载node\"></a>下载node</h1><p>前往<a href=\"https://nodejs.org/zh-cn/download/\" target=\"_blank\" rel=\"noopener\">官网</a>下载Linux版的<a href=\"https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">二进制文件</a>。注意区别有两种后缀名不同的文件，一个是<code>.tar.xz</code>，另一个是<code>.tar.gz</code>。这里我使用的是<code>.tar.xz</code>。      </p><p>复制好下载连接后到服务器存放下载文件的文件夹中下载：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>先解压文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xvf node-v12.13.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n\n<p>cd到可执行node命令的目录中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> node-v12.13.0-linux-x64/bin</span><br></pre></td></tr></table></figure>\n\n<p>测试是否安装好node</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node -v</span><br></pre></td></tr></table></figure>\n\n<p>如果看到了版本信息，则说明node已经安装好了。</p>\n<h1 id=\"全局使用\"><a href=\"#全局使用\" class=\"headerlink\" title=\"全局使用\"></a>全局使用</h1><p>node虽然安装好了，但是发现只能在刚才指定的文件夹中使用，实际开发中肯定需要在其他地方也可以使用node命令，这时候我们就需要把node命令用软链接的方式放到全局，保证在其他地方也可以使用node命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/node /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>目前我们只对node进行了软链接，接下来还需要对npm进行软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln 安装node包的局对地址/node-v12.13.0-linux-x64/bin/npm /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>软链接成功后，可以在任意目录中使用<code>node -v</code>或者<code>npm -v</code>，如果看到了相应的版本信息，则表明node全局配置成功。</p>\n"},{"title":"浏览器并发限制","date":"2019-10-25T03:28:17.000Z","_content":"\n# 什么是浏览器并发\n\n浏览器并发主要是指在同一个域名下，浏览器可以同时发起多少次http请求。并发数具体到不同的浏览器是不同的，现目前的浏览器厂商们规定的最大并发数一般都是6左右。最高的并发可以达到10，最低的是2。部分浏览器也可以通过自定义设置并发数，但是都有上限，不同的浏览器上限不同。\n\n# 为什么需要限制浏览器并发\n\n这里要从浏览器本身和服务器两个角度进行说明：\n\n1. 发出http请求是需要开启新线程的，而且每个系统可以发出请求的端口数量是有限的。如果浏览器的请求占用了大量的开销，会导致客户端运行速度变慢。\n\n2. 一般的服务端会限制同一个ip在一段时间内的请求数量，如果并发数量太大会造成服务器压力过大，同时也会导致该ip被服务器拉黑。\n\n# 浏览器并发限制造成了什么影响\n\n1. 因为同一域名下一般只能同时发起6个左右的请求，所以会导致如果一个页面包含了大量静态资源而加载缓慢的情况。可以想象以下如果自己写了一个简易的淘宝页面，里面用到了大量的css文件和商品图片，在浏览器打开这个页面浏览器就会发出几百条请求去获取这些静态资源，而这几百条请求按6个一组排队以此请求，这样就导致了这个页面长时间的白屏，用户体验极差。\n\n2. 如果还在请求中添加了cookie，那么所有的静态资源请求也都会带上cookie，数百个无用的cookie也对页面响应的时间造成了影响。\n\n# 如何降低浏览器并发限制的影响\n\n这里也是从两个方向入手，一个是浏览器并发限制本身，另一个是优化用户体验。\n\n1. 因为浏览器并发限制的是同一个域名，所以现在大部分企业都会选择将静态资源放在不同的域名下，这样可以大幅度的提高并发数量。另外就是在使用图标等小图片时使用精灵图的方式，即将多个图标放在一张图上，通过css属性进行定位获取，这种方法可以将多个请求降低为一条请求。\n\n2. 浏览器并发的限制主要是导致了白屏时间过长，用户体验不好。现在也有很多的企业选用骨架屏的方式，可以先给用户展示一个骨架页面，等资源加载完毕再展示完整页面。\n\n\n# 参考资料\n[https://segmentfault.com/a/1190000016369295](https://segmentfault.com/a/1190000016369295)\n\n[https://www.cnblogs.com/sunsky303/p/8862128.html](https://www.cnblogs.com/sunsky303/p/8862128.html)\n","source":"_posts/浏览器并发限制.md","raw":"---\ntitle: 浏览器并发限制\ndate: 2019-10-25 11:28:17\ncategories: 浏览器\n---\n\n# 什么是浏览器并发\n\n浏览器并发主要是指在同一个域名下，浏览器可以同时发起多少次http请求。并发数具体到不同的浏览器是不同的，现目前的浏览器厂商们规定的最大并发数一般都是6左右。最高的并发可以达到10，最低的是2。部分浏览器也可以通过自定义设置并发数，但是都有上限，不同的浏览器上限不同。\n\n# 为什么需要限制浏览器并发\n\n这里要从浏览器本身和服务器两个角度进行说明：\n\n1. 发出http请求是需要开启新线程的，而且每个系统可以发出请求的端口数量是有限的。如果浏览器的请求占用了大量的开销，会导致客户端运行速度变慢。\n\n2. 一般的服务端会限制同一个ip在一段时间内的请求数量，如果并发数量太大会造成服务器压力过大，同时也会导致该ip被服务器拉黑。\n\n# 浏览器并发限制造成了什么影响\n\n1. 因为同一域名下一般只能同时发起6个左右的请求，所以会导致如果一个页面包含了大量静态资源而加载缓慢的情况。可以想象以下如果自己写了一个简易的淘宝页面，里面用到了大量的css文件和商品图片，在浏览器打开这个页面浏览器就会发出几百条请求去获取这些静态资源，而这几百条请求按6个一组排队以此请求，这样就导致了这个页面长时间的白屏，用户体验极差。\n\n2. 如果还在请求中添加了cookie，那么所有的静态资源请求也都会带上cookie，数百个无用的cookie也对页面响应的时间造成了影响。\n\n# 如何降低浏览器并发限制的影响\n\n这里也是从两个方向入手，一个是浏览器并发限制本身，另一个是优化用户体验。\n\n1. 因为浏览器并发限制的是同一个域名，所以现在大部分企业都会选择将静态资源放在不同的域名下，这样可以大幅度的提高并发数量。另外就是在使用图标等小图片时使用精灵图的方式，即将多个图标放在一张图上，通过css属性进行定位获取，这种方法可以将多个请求降低为一条请求。\n\n2. 浏览器并发的限制主要是导致了白屏时间过长，用户体验不好。现在也有很多的企业选用骨架屏的方式，可以先给用户展示一个骨架页面，等资源加载完毕再展示完整页面。\n\n\n# 参考资料\n[https://segmentfault.com/a/1190000016369295](https://segmentfault.com/a/1190000016369295)\n\n[https://www.cnblogs.com/sunsky303/p/8862128.html](https://www.cnblogs.com/sunsky303/p/8862128.html)\n","slug":"浏览器并发限制","published":1,"updated":"2019-10-25T04:45:26.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84fm400063cyherkvuz09","content":"<h1 id=\"什么是浏览器并发\"><a href=\"#什么是浏览器并发\" class=\"headerlink\" title=\"什么是浏览器并发\"></a>什么是浏览器并发</h1><p>浏览器并发主要是指在同一个域名下，浏览器可以同时发起多少次http请求。并发数具体到不同的浏览器是不同的，现目前的浏览器厂商们规定的最大并发数一般都是6左右。最高的并发可以达到10，最低的是2。部分浏览器也可以通过自定义设置并发数，但是都有上限，不同的浏览器上限不同。</p><h1 id=\"为什么需要限制浏览器并发\"><a href=\"#为什么需要限制浏览器并发\" class=\"headerlink\" title=\"为什么需要限制浏览器并发\"></a>为什么需要限制浏览器并发</h1><a id=\"more\"></a>\n<p>这里要从浏览器本身和服务器两个角度进行说明：</p>\n<ol>\n<li><p>发出http请求是需要开启新线程的，而且每个系统可以发出请求的端口数量是有限的。如果浏览器的请求占用了大量的开销，会导致客户端运行速度变慢。</p>\n</li>\n<li><p>一般的服务端会限制同一个ip在一段时间内的请求数量，如果并发数量太大会造成服务器压力过大，同时也会导致该ip被服务器拉黑。</p>\n</li>\n</ol>\n<h1 id=\"浏览器并发限制造成了什么影响\"><a href=\"#浏览器并发限制造成了什么影响\" class=\"headerlink\" title=\"浏览器并发限制造成了什么影响\"></a>浏览器并发限制造成了什么影响</h1><ol>\n<li><p>因为同一域名下一般只能同时发起6个左右的请求，所以会导致如果一个页面包含了大量静态资源而加载缓慢的情况。可以想象以下如果自己写了一个简易的淘宝页面，里面用到了大量的css文件和商品图片，在浏览器打开这个页面浏览器就会发出几百条请求去获取这些静态资源，而这几百条请求按6个一组排队以此请求，这样就导致了这个页面长时间的白屏，用户体验极差。</p>\n</li>\n<li><p>如果还在请求中添加了cookie，那么所有的静态资源请求也都会带上cookie，数百个无用的cookie也对页面响应的时间造成了影响。</p>\n</li>\n</ol>\n<h1 id=\"如何降低浏览器并发限制的影响\"><a href=\"#如何降低浏览器并发限制的影响\" class=\"headerlink\" title=\"如何降低浏览器并发限制的影响\"></a>如何降低浏览器并发限制的影响</h1><p>这里也是从两个方向入手，一个是浏览器并发限制本身，另一个是优化用户体验。</p>\n<ol>\n<li><p>因为浏览器并发限制的是同一个域名，所以现在大部分企业都会选择将静态资源放在不同的域名下，这样可以大幅度的提高并发数量。另外就是在使用图标等小图片时使用精灵图的方式，即将多个图标放在一张图上，通过css属性进行定位获取，这种方法可以将多个请求降低为一条请求。</p>\n</li>\n<li><p>浏览器并发的限制主要是导致了白屏时间过长，用户体验不好。现在也有很多的企业选用骨架屏的方式，可以先给用户展示一个骨架页面，等资源加载完毕再展示完整页面。</p>\n</li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://segmentfault.com/a/1190000016369295\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016369295</a></p>\n<p><a href=\"https://www.cnblogs.com/sunsky303/p/8862128.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunsky303/p/8862128.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是浏览器并发\"><a href=\"#什么是浏览器并发\" class=\"headerlink\" title=\"什么是浏览器并发\"></a>什么是浏览器并发</h1><p>浏览器并发主要是指在同一个域名下，浏览器可以同时发起多少次http请求。并发数具体到不同的浏览器是不同的，现目前的浏览器厂商们规定的最大并发数一般都是6左右。最高的并发可以达到10，最低的是2。部分浏览器也可以通过自定义设置并发数，但是都有上限，不同的浏览器上限不同。</p><h1 id=\"为什么需要限制浏览器并发\"><a href=\"#为什么需要限制浏览器并发\" class=\"headerlink\" title=\"为什么需要限制浏览器并发\"></a>为什么需要限制浏览器并发</h1>","more":"\n<p>这里要从浏览器本身和服务器两个角度进行说明：</p>\n<ol>\n<li><p>发出http请求是需要开启新线程的，而且每个系统可以发出请求的端口数量是有限的。如果浏览器的请求占用了大量的开销，会导致客户端运行速度变慢。</p>\n</li>\n<li><p>一般的服务端会限制同一个ip在一段时间内的请求数量，如果并发数量太大会造成服务器压力过大，同时也会导致该ip被服务器拉黑。</p>\n</li>\n</ol>\n<h1 id=\"浏览器并发限制造成了什么影响\"><a href=\"#浏览器并发限制造成了什么影响\" class=\"headerlink\" title=\"浏览器并发限制造成了什么影响\"></a>浏览器并发限制造成了什么影响</h1><ol>\n<li><p>因为同一域名下一般只能同时发起6个左右的请求，所以会导致如果一个页面包含了大量静态资源而加载缓慢的情况。可以想象以下如果自己写了一个简易的淘宝页面，里面用到了大量的css文件和商品图片，在浏览器打开这个页面浏览器就会发出几百条请求去获取这些静态资源，而这几百条请求按6个一组排队以此请求，这样就导致了这个页面长时间的白屏，用户体验极差。</p>\n</li>\n<li><p>如果还在请求中添加了cookie，那么所有的静态资源请求也都会带上cookie，数百个无用的cookie也对页面响应的时间造成了影响。</p>\n</li>\n</ol>\n<h1 id=\"如何降低浏览器并发限制的影响\"><a href=\"#如何降低浏览器并发限制的影响\" class=\"headerlink\" title=\"如何降低浏览器并发限制的影响\"></a>如何降低浏览器并发限制的影响</h1><p>这里也是从两个方向入手，一个是浏览器并发限制本身，另一个是优化用户体验。</p>\n<ol>\n<li><p>因为浏览器并发限制的是同一个域名，所以现在大部分企业都会选择将静态资源放在不同的域名下，这样可以大幅度的提高并发数量。另外就是在使用图标等小图片时使用精灵图的方式，即将多个图标放在一张图上，通过css属性进行定位获取，这种方法可以将多个请求降低为一条请求。</p>\n</li>\n<li><p>浏览器并发的限制主要是导致了白屏时间过长，用户体验不好。现在也有很多的企业选用骨架屏的方式，可以先给用户展示一个骨架页面，等资源加载完毕再展示完整页面。</p>\n</li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://segmentfault.com/a/1190000016369295\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000016369295</a></p>\n<p><a href=\"https://www.cnblogs.com/sunsky303/p/8862128.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sunsky303/p/8862128.html</a></p>\n"},{"layout":"post","title":"VUE生成二维码并下载","data":"2019-07-17T07:15:18.000Z","_content":"# 开始前了解\n>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。  \n<!-- more --> \n\n# 引入插件\n>在命令行执行 npm install qrcodejs2     \n\n>在vue文件中 import QRcode from 'qrcodejs2'     \n\n# 插件的使用\n\n## 挂载点，我们需要把要生成的二维码挂载都哪里\n>首先要在模版中添加一个id=qrcode的div标签    \n\n ```html\n<template>\n    <div id=\"qrcode\">\n\n    </div>\n</template>\n```\n\n## 生成函数\n>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。\n```javascript  \nqrcode(){\n    document.getElementById(\"qrcode\").innerHTML = \"\"; //清除上次二维码的数据\n    let qrcode = new QRcode('qrcode',{\n        width:100,\n        height:100,\n        text:\"你是不是在做梦哦\",\n\n    })\n},\n```\n\n## 执行函数\n>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。\n\n# 下载\n>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     \n\n>主要的思路就是：  \n1. 获取到canvas标签；\n2. 生成一个a标签；\n3. 把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；\n4. 给图片一个下载名，然后触发a标签的click事件；      \n\n```javascript\ndownload(){\n    let myCanvas = document.getElementById('qrcode').getElementsByTagName('canvas');\n    let a = document.createElement(\"a\")\n    a.href = myCanvas[0].toDataURL('image/png').replace('image/png', 'image/octet-stream')\n    a.download = \"文件名\";\n    a.click();\n},\n```  ","source":"_posts/VUE生成二维码并下载.md","raw":"---\nlayout: post\ntitle: VUE生成二维码并下载\ndata: 2019-07-17 15:15:18\ncategories: VUE\n---\n# 开始前了解\n>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。  \n<!-- more --> \n\n# 引入插件\n>在命令行执行 npm install qrcodejs2     \n\n>在vue文件中 import QRcode from 'qrcodejs2'     \n\n# 插件的使用\n\n## 挂载点，我们需要把要生成的二维码挂载都哪里\n>首先要在模版中添加一个id=qrcode的div标签    \n\n ```html\n<template>\n    <div id=\"qrcode\">\n\n    </div>\n</template>\n```\n\n## 生成函数\n>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。\n```javascript  \nqrcode(){\n    document.getElementById(\"qrcode\").innerHTML = \"\"; //清除上次二维码的数据\n    let qrcode = new QRcode('qrcode',{\n        width:100,\n        height:100,\n        text:\"你是不是在做梦哦\",\n\n    })\n},\n```\n\n## 执行函数\n>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。\n\n# 下载\n>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     \n\n>主要的思路就是：  \n1. 获取到canvas标签；\n2. 生成一个a标签；\n3. 把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；\n4. 给图片一个下载名，然后触发a标签的click事件；      \n\n```javascript\ndownload(){\n    let myCanvas = document.getElementById('qrcode').getElementsByTagName('canvas');\n    let a = document.createElement(\"a\")\n    a.href = myCanvas[0].toDataURL('image/png').replace('image/png', 'image/octet-stream')\n    a.download = \"文件名\";\n    a.click();\n},\n```  ","slug":"VUE生成二维码并下载","published":1,"date":"2019-09-19T07:05:07.633Z","updated":"2019-09-19T07:05:07.633Z","comments":1,"photos":[],"link":"","_id":"ck2k84fm600083cyh76i6ibe0","content":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。  </p>\n</blockquote>\n<a id=\"more\"></a> \n\n<h1 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h1><blockquote>\n<p>在命令行执行 npm install qrcodejs2     </p>\n</blockquote>\n<blockquote>\n<p>在vue文件中 import QRcode from ‘qrcodejs2’     </p>\n</blockquote>\n<h1 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h1><h2 id=\"挂载点，我们需要把要生成的二维码挂载都哪里\"><a href=\"#挂载点，我们需要把要生成的二维码挂载都哪里\" class=\"headerlink\" title=\"挂载点，我们需要把要生成的二维码挂载都哪里\"></a>挂载点，我们需要把要生成的二维码挂载都哪里</h2><blockquote>\n<p>首先要在模版中添加一个id=qrcode的div标签    </p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h2><blockquote>\n<p>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qrcode()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>).innerHTML = <span class=\"string\">\"\"</span>; <span class=\"comment\">//清除上次二维码的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRcode(<span class=\"string\">'qrcode'</span>,&#123;</span><br><span class=\"line\">        width:<span class=\"number\">100</span>,</span><br><span class=\"line\">        height:<span class=\"number\">100</span>,</span><br><span class=\"line\">        text:<span class=\"string\">\"你是不是在做梦哦\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行函数\"><a href=\"#执行函数\" class=\"headerlink\" title=\"执行函数\"></a>执行函数</h2><blockquote>\n<p>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。</p>\n</blockquote>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><blockquote>\n<p>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     </p>\n</blockquote>\n<blockquote>\n<p>主要的思路就是：  </p>\n<ol>\n<li>获取到canvas标签；</li>\n<li>生成一个a标签；</li>\n<li>把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；</li>\n<li>给图片一个下载名，然后触发a标签的click事件；      </li>\n</ol>\n</blockquote>\n<pre><code class=\"javascript\">download(){\n    <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>).getElementsByTagName(<span class=\"string\">'canvas'</span>);\n    <span class=\"keyword\">let</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)\n    a.href = myCanvas[<span class=\"number\">0</span>].toDataURL(<span class=\"string\">'image/png'</span>).replace(<span class=\"string\">'image/png'</span>, <span class=\"string\">'image/octet-stream'</span>)\n    a.download = <span class=\"string\">\"文件名\"</span>;\n    a.click();\n},</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>在很多项目中二维码是由后端生成，但其实也可以在前端生成二维码并且直接下载。在这里我们就要使用一个vue的插件“qrcodejs2”，这个插件可以比较方便快捷的生成二维码。具体信息可以去官网了解。  </p>\n</blockquote>","more":"<h1 id=\"引入插件\"><a href=\"#引入插件\" class=\"headerlink\" title=\"引入插件\"></a>引入插件</h1><blockquote>\n<p>在命令行执行 npm install qrcodejs2     </p>\n</blockquote>\n<blockquote>\n<p>在vue文件中 import QRcode from ‘qrcodejs2’     </p>\n</blockquote>\n<h1 id=\"插件的使用\"><a href=\"#插件的使用\" class=\"headerlink\" title=\"插件的使用\"></a>插件的使用</h1><h2 id=\"挂载点，我们需要把要生成的二维码挂载都哪里\"><a href=\"#挂载点，我们需要把要生成的二维码挂载都哪里\" class=\"headerlink\" title=\"挂载点，我们需要把要生成的二维码挂载都哪里\"></a>挂载点，我们需要把要生成的二维码挂载都哪里</h2><blockquote>\n<p>首先要在模版中添加一个id=qrcode的div标签    </p>\n</blockquote>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"qrcode\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成函数\"><a href=\"#生成函数\" class=\"headerlink\" title=\"生成函数\"></a>生成函数</h2><blockquote>\n<p>二维码是通过canvas标签绘制出来的，所以我们需要一个函数去生成。函数放在了methods里面。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qrcode()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qrcode\"</span>).innerHTML = <span class=\"string\">\"\"</span>; <span class=\"comment\">//清除上次二维码的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> qrcode = <span class=\"keyword\">new</span> QRcode(<span class=\"string\">'qrcode'</span>,&#123;</span><br><span class=\"line\">        width:<span class=\"number\">100</span>,</span><br><span class=\"line\">        height:<span class=\"number\">100</span>,</span><br><span class=\"line\">        text:<span class=\"string\">\"你是不是在做梦哦\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行函数\"><a href=\"#执行函数\" class=\"headerlink\" title=\"执行函数\"></a>执行函数</h2><blockquote>\n<p>这里需要值得注意的是，因为二维码是通过canvas画出来然后挂载到div上的，所以我们在什么时候画就比较关键了。根据vue的生命周期，我们要将qrcode函数放到mounted函数中执行，如果在放在这个函数之前的生命周期函数中执行，就导致错误，因为id=“qrcode”的div还没有生成。</p>\n</blockquote>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><blockquote>\n<p>我这里的下载思路是根据广大的互联网学习来的，因为要下载所以我们得这个canvas转换为图片，但是仅仅转换为图片用户也只能通过右键进行下载，用户体验不好。这时候我们往往希望有个下载按钮可以点击下载。     </p>\n</blockquote>\n<blockquote>\n<p>主要的思路就是：  </p>\n<ol>\n<li>获取到canvas标签；</li>\n<li>生成一个a标签；</li>\n<li>把canvas转化为图片然后放到文件夹中，再把图片信息挂载到a标签的属性上；</li>\n<li>给图片一个下载名，然后触发a标签的click事件；      </li>\n</ol>\n</blockquote>\n<pre><code class=\"javascript\">download(){\n    <span class=\"keyword\">let</span> myCanvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'qrcode'</span>).getElementsByTagName(<span class=\"string\">'canvas'</span>);\n    <span class=\"keyword\">let</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>)\n    a.href = myCanvas[<span class=\"number\">0</span>].toDataURL(<span class=\"string\">'image/png'</span>).replace(<span class=\"string\">'image/png'</span>, <span class=\"string\">'image/octet-stream'</span>)\n    a.download = <span class=\"string\">\"文件名\"</span>;\n    a.click();\n},</code></pre>"},{"title":"laravel解析Excel文件","date":"2019-08-04T02:31:36.000Z","_content":"\n## 安装\n\n```bash\n#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的\ncomposer require maatwebsite/excel=2.1.*\n```\n<!-- more -->\n\n## 配置\n\n在laravel项目的`config/app.php`文件中，找到`providers`和`aliases`数组，分别在两个数组中添加下面的内容。\n\n```php\n'providers'=>[\n    ...\n\n    Maatwebsite\\Excel\\ExcelServiceProvider::class,\n],\n\n'aliases'=>[\n    ...\n\n    'Excel' => Maatwebsite\\Excel\\Facades\\Excel::class,\n]\n```\n\n配置好后，在项目的命令行中执行下列命令，可以在项目中生成`config/excel.php`文件，可以通过该文件对该插件进行配置。\n\n```bash\nphp artisan vendor:publish --provider=\"Maatwebsite\\Excel\\ExcelServiceProvider\"\n```\n\n## 解析Excel文件\n\n直接调用`load`方法，第一个参数是导入的文件名或文件地址。解析过后可以通过`toArray()`方法将解析后的结果转换为数组。\n\n```php\n$arr = [];\n\\Excel::load('企业导入模板.xlsx', function($reader) {\n            $arr = $reader->get()->toArray();\n        });\n```\n\n## 注意\n如果出现因为中文表头导致解析数据不完整的时候，请在`config/excel.php`文件中对`to_ascii`进行修改。\n\n```php\n'to_ascii'=>false,\n```\n\n如需其他配置问题，请参考[官方文档](https://laravel-excel.com/ \"官方文档\")","source":"_posts/laravel解析Excel文件.md","raw":"---\ntitle: laravel解析Excel文件\ndate: 2019-08-04 10:31:36\ncategories: laravel\n---\n\n## 安装\n\n```bash\n#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的\ncomposer require maatwebsite/excel=2.1.*\n```\n<!-- more -->\n\n## 配置\n\n在laravel项目的`config/app.php`文件中，找到`providers`和`aliases`数组，分别在两个数组中添加下面的内容。\n\n```php\n'providers'=>[\n    ...\n\n    Maatwebsite\\Excel\\ExcelServiceProvider::class,\n],\n\n'aliases'=>[\n    ...\n\n    'Excel' => Maatwebsite\\Excel\\Facades\\Excel::class,\n]\n```\n\n配置好后，在项目的命令行中执行下列命令，可以在项目中生成`config/excel.php`文件，可以通过该文件对该插件进行配置。\n\n```bash\nphp artisan vendor:publish --provider=\"Maatwebsite\\Excel\\ExcelServiceProvider\"\n```\n\n## 解析Excel文件\n\n直接调用`load`方法，第一个参数是导入的文件名或文件地址。解析过后可以通过`toArray()`方法将解析后的结果转换为数组。\n\n```php\n$arr = [];\n\\Excel::load('企业导入模板.xlsx', function($reader) {\n            $arr = $reader->get()->toArray();\n        });\n```\n\n## 注意\n如果出现因为中文表头导致解析数据不完整的时候，请在`config/excel.php`文件中对`to_ascii`进行修改。\n\n```php\n'to_ascii'=>false,\n```\n\n如需其他配置问题，请参考[官方文档](https://laravel-excel.com/ \"官方文档\")","slug":"laravel解析Excel文件","published":1,"updated":"2019-09-19T07:05:07.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84fm700093cyhjbck0rol","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的</span></span><br><span class=\"line\">composer require maatwebsite/excel=2.1.*</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在laravel项目的<code>config/app.php</code>文件中，找到<code>providers</code>和<code>aliases</code>数组，分别在两个数组中添加下面的内容。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'providers'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    Maatwebsite\\Excel\\ExcelServiceProvider::class,</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aliases'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Excel'</span> =&gt; Maatwebsite\\Excel\\Facades\\Excel::class,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，在项目的命令行中执行下列命令，可以在项目中生成<code>config/excel.php</code>文件，可以通过该文件对该插件进行配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan vendor:publish --provider=<span class=\"string\">\"Maatwebsite\\Excel\\ExcelServiceProvider\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析Excel文件\"><a href=\"#解析Excel文件\" class=\"headerlink\" title=\"解析Excel文件\"></a>解析Excel文件</h2><p>直接调用<code>load</code>方法，第一个参数是导入的文件名或文件地址。解析过后可以通过<code>toArray()</code>方法将解析后的结果转换为数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [];</span><br><span class=\"line\">\\Excel::load(<span class=\"string\">'企业导入模板.xlsx'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($reader)</span> </span>&#123;</span><br><span class=\"line\">            $arr = $reader-&gt;get()-&gt;toArray();</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果出现因为中文表头导致解析数据不完整的时候，请在<code>config/excel.php</code>文件中对<code>to_ascii</code>进行修改。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'to_ascii'</span>=&gt;<span class=\"keyword\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<p>如需其他配置问题，请参考<a href=\"https://laravel-excel.com/\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#该插件已经更新到了3.1版本，目前我项目中使用的是2.1，这篇文章也是针对2.1版本的</span></span><br><span class=\"line\">composer require maatwebsite/excel=2.1.*</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在laravel项目的<code>config/app.php</code>文件中，找到<code>providers</code>和<code>aliases</code>数组，分别在两个数组中添加下面的内容。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'providers'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    Maatwebsite\\Excel\\ExcelServiceProvider::class,</span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'aliases'</span>=&gt;[</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Excel'</span> =&gt; Maatwebsite\\Excel\\Facades\\Excel::class,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，在项目的命令行中执行下列命令，可以在项目中生成<code>config/excel.php</code>文件，可以通过该文件对该插件进行配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php artisan vendor:publish --provider=<span class=\"string\">\"Maatwebsite\\Excel\\ExcelServiceProvider\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析Excel文件\"><a href=\"#解析Excel文件\" class=\"headerlink\" title=\"解析Excel文件\"></a>解析Excel文件</h2><p>直接调用<code>load</code>方法，第一个参数是导入的文件名或文件地址。解析过后可以通过<code>toArray()</code>方法将解析后的结果转换为数组。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [];</span><br><span class=\"line\">\\Excel::load(<span class=\"string\">'企业导入模板.xlsx'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($reader)</span> </span>&#123;</span><br><span class=\"line\">            $arr = $reader-&gt;get()-&gt;toArray();</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>如果出现因为中文表头导致解析数据不完整的时候，请在<code>config/excel.php</code>文件中对<code>to_ascii</code>进行修改。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'to_ascii'</span>=&gt;<span class=\"keyword\">false</span>,</span><br></pre></td></tr></table></figure>\n\n<p>如需其他配置问题，请参考<a href=\"https://laravel-excel.com/\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>"},{"title":"nvm的使用","date":"2019-09-18T07:08:31.000Z","_content":"\n## 前言\n\n>在使用`windows`和`macOS`的时候没有感觉到`node`版本的有什么难处理的，但是当使用`linux`系统的时候，发现安装`node`是个比较麻烦的事情。比如：如果`ubuntu`自带的`apt-get`来安装，只能安装比较低版本的，如果想要升级版本也是个挺麻烦的事情。这个时候`node`版本管理神器`nvm`的作用就体现出来了，可以随意的下载各个版本的`node`，并且可以随时进行版本的切换。\n<!-- more -->\n\n## 安装nvm\n\nmac可以使用`brew`安装\n\n```bash\nbrew install nvm\n```\n\nubuntu可以使用`curl`安装\n\n```bash\n# 使用curl安装的nvm，需要在安装完成后重新打开命令行\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n```\n\n## nvm操作\n\n下载最新版`node`\n\n```bash\nnvm install stable\n```\n\n下载指定版本\n\n```bash\nnvm install 版本号\n```\n\n查看已经下载的`node`版本列表\n\n```bash\nnvm ls\n```\n\n切换`node`版本\n\n```bash\nnvm use 版本号\n```\n\n修改默认版本（如果不修改默认版本，可能会导致关闭当前命令行后`node`版本又恢复为低版本）\n\n```bash\nnvm alias default 版本号\n```\n\n***\n>具体`nvm`操作方法，请参考[官方文档](https://github.com/nvm-sh/nvm#usage \"nvm官方文档\")\n","source":"_posts/nvm的使用.md","raw":"---\ntitle: nvm的使用\ndate: 2019-09-18 15:08:31\ncategories: 开发小工具\n---\n\n## 前言\n\n>在使用`windows`和`macOS`的时候没有感觉到`node`版本的有什么难处理的，但是当使用`linux`系统的时候，发现安装`node`是个比较麻烦的事情。比如：如果`ubuntu`自带的`apt-get`来安装，只能安装比较低版本的，如果想要升级版本也是个挺麻烦的事情。这个时候`node`版本管理神器`nvm`的作用就体现出来了，可以随意的下载各个版本的`node`，并且可以随时进行版本的切换。\n<!-- more -->\n\n## 安装nvm\n\nmac可以使用`brew`安装\n\n```bash\nbrew install nvm\n```\n\nubuntu可以使用`curl`安装\n\n```bash\n# 使用curl安装的nvm，需要在安装完成后重新打开命令行\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n```\n\n## nvm操作\n\n下载最新版`node`\n\n```bash\nnvm install stable\n```\n\n下载指定版本\n\n```bash\nnvm install 版本号\n```\n\n查看已经下载的`node`版本列表\n\n```bash\nnvm ls\n```\n\n切换`node`版本\n\n```bash\nnvm use 版本号\n```\n\n修改默认版本（如果不修改默认版本，可能会导致关闭当前命令行后`node`版本又恢复为低版本）\n\n```bash\nnvm alias default 版本号\n```\n\n***\n>具体`nvm`操作方法，请参考[官方文档](https://github.com/nvm-sh/nvm#usage \"nvm官方文档\")\n","slug":"nvm的使用","published":1,"updated":"2019-09-19T07:05:07.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84fma000c3cyhbajqzugt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在使用<code>windows</code>和<code>macOS</code>的时候没有感觉到<code>node</code>版本的有什么难处理的，但是当使用<code>linux</code>系统的时候，发现安装<code>node</code>是个比较麻烦的事情。比如：如果<code>ubuntu</code>自带的<code>apt-get</code>来安装，只能安装比较低版本的，如果想要升级版本也是个挺麻烦的事情。这个时候<code>node</code>版本管理神器<code>nvm</code>的作用就体现出来了，可以随意的下载各个版本的<code>node</code>，并且可以随时进行版本的切换。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h2><p>mac可以使用<code>brew</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nvm</span><br></pre></td></tr></table></figure>\n\n<p>ubuntu可以使用<code>curl</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用curl安装的nvm，需要在安装完成后重新打开命令行</span></span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nvm操作\"><a href=\"#nvm操作\" class=\"headerlink\" title=\"nvm操作\"></a>nvm操作</h2><p>下载最新版<code>node</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>下载指定版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 版本号</span><br></pre></td></tr></table></figure>\n\n<p>查看已经下载的<code>node</code>版本列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<p>切换<code>node</code>版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 版本号</span><br></pre></td></tr></table></figure>\n\n<p>修改默认版本（如果不修改默认版本，可能会导致关闭当前命令行后<code>node</code>版本又恢复为低版本）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> default 版本号</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>具体<code>nvm</code>操作方法，请参考<a href=\"https://github.com/nvm-sh/nvm#usage\" title=\"nvm官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在使用<code>windows</code>和<code>macOS</code>的时候没有感觉到<code>node</code>版本的有什么难处理的，但是当使用<code>linux</code>系统的时候，发现安装<code>node</code>是个比较麻烦的事情。比如：如果<code>ubuntu</code>自带的<code>apt-get</code>来安装，只能安装比较低版本的，如果想要升级版本也是个挺麻烦的事情。这个时候<code>node</code>版本管理神器<code>nvm</code>的作用就体现出来了，可以随意的下载各个版本的<code>node</code>，并且可以随时进行版本的切换。</p>\n</blockquote>","more":"<h2 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a>安装nvm</h2><p>mac可以使用<code>brew</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install nvm</span><br></pre></td></tr></table></figure>\n\n<p>ubuntu可以使用<code>curl</code>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用curl安装的nvm，需要在安装完成后重新打开命令行</span></span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nvm操作\"><a href=\"#nvm操作\" class=\"headerlink\" title=\"nvm操作\"></a>nvm操作</h2><p>下载最新版<code>node</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>下载指定版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 版本号</span><br></pre></td></tr></table></figure>\n\n<p>查看已经下载的<code>node</code>版本列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<p>切换<code>node</code>版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 版本号</span><br></pre></td></tr></table></figure>\n\n<p>修改默认版本（如果不修改默认版本，可能会导致关闭当前命令行后<code>node</code>版本又恢复为低版本）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">alias</span> default 版本号</span><br></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>具体<code>nvm</code>操作方法，请参考<a href=\"https://github.com/nvm-sh/nvm#usage\" title=\"nvm官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>"},{"title":"理解同源策略","date":"2019-10-18T01:53:35.000Z","_content":"\n# 何为同源\n\n两个页面的协议、域名、端口都相同的情况下，这两个页面就属于同源。    \n\n1. 协议一般是`http`或者`http`;\n\n2. 域名一般表现为`www.baidu.com`；\n\n2. 端口在域名后面加上`:4000`，表示4000端口，如果没有注明端口，则表示默认端口。`http`默认端口为`80`，`https`默认端口为`443`;\n\n>举例：现有一个页面连接为：`https://www.baidu.com`，以下几种情况来区分是否同源。    \n1. `http://www.baidu.com`，不同源，协议不同，一个是`https`另一个是`http`；\n\n2. `https://www.alibaba.com`，不同源，域名不同，一个是`www.baidu.com`另一个是\n`www.alibaba.com`；\n3. `https://www.baidu.com:9527`，不同源，端口不同，一个是`443`另一个是`9527`;\n\n4. `https://www.baidu.com/s`，同源，端口、域名、协议都相同，不同的是路径；\n\n# 何为同源策略\n\n以下为个人总结，如有出入望指出。\n\n1. 禁止不同源之间进行DOM操作；\n\n2. 禁止不同源之间进行AJAX请求；\n\n3. 禁止不同源之间进行读写localStorage和IndexedDB；\n\n>注意：禁止AJAX实际上是浏览器禁止读取响应内容，而不是禁止请求，注意区分。\n\n# 为什么使用同源策略\n\n从大的方面来说肯定是为了用户的信息安全，但是具体如果不使用同源策略会导致什么安全问题呢？分别针对3条规则举例说明：\n\n1. 如果允许跨源操作DOM，假设我有个网站是`https://www.xiaotaotao.vip`，我在我的网站里面使用`iframe`嵌入了一个银行的网站，如果你没注意到url的不同直接输入了你的银行密码，那么我就可以操作银行网站的输入框（操作DOM）就可以获取到你的密码了。\n\n2. 如果允许跨源进行AJAX请求，假设我在自己的网站`https://www.xiaotaotao.vip`写一个音乐播放页面，然后所有的歌曲都可以去调用QQ音乐的接口，导致别人的服务直接被我接入。（该策略应该是针对用户信息安全的，但是我个人目前没有发现或者想到因为AJAX跨源访问导致用户信息泄漏的情况，以后了解了再补充）。\n\n3. 如果允许跨源对localStorage或者IndexDB进行读写，那么就会导致恶意网站在任何时候都可以去读取你存在loalStorage里面的个人数据。\n\n# 为什么要跨域\n\n在前端领域`跨域`这个词语可谓老生常谈，前面我们知道了同源策略是一个非常好的协议，几乎所有的浏览器都遵守这份协议（IE很调皮，它有点不一样），而且这份同源协议对用户的信息安全也是非常的重要，那我们为什么要经常讨论要去跨域呢？\n\n1. 当前开发处于前后段分离的大环境下，这样开发的优势这里不讨论，但是其中有一个问题几乎每个项目都会遇到的。后端的小伙伴开发好接口部署到服务器，前端的小伙伴开发好页面去调用接口进行测试。前后端的代码都部署在生产环境一般也没问题，问题就在于前端在本地进行开发测试的时候需要调用服务器上的后端接口，`本地运行的前端代码`和`服务器上运行的后端接口`必然属于两个不同个的源，所以导致本地处于开发模式的前端代码无法调用服务器上后端的接口。\n\n2. 在很多图片的服务中，经常会出现图片等静态资源会单独存放在一个服务器，然后其他的源去这个静态资源服务器请求图片。图片资源跨域访问后再使用`canvas`处理，最后使用`getImageData()或者toDataUrl()`方法操作图片，这是就会出现跨域问题。`img`标签本身是可以跨域的，但是后续对图片处理的方法会导致跨域，此时就需要设置允许图片服务的跨域。\n\n>跨域应用场景很多，后面补充\n\n# 如何跨域\n\n跨域的方式有很多，主要分为几个方面，分别是利用可以跨域的html标签、针对跨域的Api、nginx反向代理。\n\n1. 一般大家说到的`JSONP`跨域就是利用`<script>`标签可以跨域的特性进行跨域访问。具体的操作就是前端用js创建一个script标签，然后`src`属性中写上需要访问的接口路径和参数就可以了，然后后端返回一段js代码，这段代码会自动执行，从而完成整个跨域的过程。（表示没有用过，听着就很麻烦！）\n\n2. 还有部分可以越过同源策略的Api，例如document.domin、window.name、window.postMessage();\n\t* document.domin只能用在同一协议，同一端口，不同域名的父子域之间,将两个页面的`document.domin`设置为同一个值后，子域就可以访问父域文档信息。具体操作见[文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain);\n\n\t* window.name比较简单，在同一个窗口下，无论该窗口访问了哪些源，只要该窗口没有被关闭，则每个页面的`window.name`都是相通的。可以利用此特性在不同源之间进行简单的传值；\n\n\t* window.postMessage()方法需要在页面中指定你需要发送`什么信息`到`哪个源`,然后去目的源就可以就可以获取数据了。具体的使用方法见[文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage)\n\n3. 前面说的这些跨域方法用起来都不太爽，JSONP只能用于GET请求，使用Api跨域要么只能传递字符串，要么只能传递简单的结构，而且还要受到数据大小的限制，所以在开发中最爽的跨域方法还是使用nginx反响代理。主要的实现原理就是利用服务器去目的源获取数据，然后把数据返回给前端，前端和目的源之间就没有直接联系了，也就不存在跨域问题了。\n\n>参考资料   \n[https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)  \n[https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)    \n[https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18](https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18)\n","source":"_posts/理解同源策略.md","raw":"---\ntitle: 理解同源策略\ndate: 2019-10-18 09:53:35\ncategories: http\n---\n\n# 何为同源\n\n两个页面的协议、域名、端口都相同的情况下，这两个页面就属于同源。    \n\n1. 协议一般是`http`或者`http`;\n\n2. 域名一般表现为`www.baidu.com`；\n\n2. 端口在域名后面加上`:4000`，表示4000端口，如果没有注明端口，则表示默认端口。`http`默认端口为`80`，`https`默认端口为`443`;\n\n>举例：现有一个页面连接为：`https://www.baidu.com`，以下几种情况来区分是否同源。    \n1. `http://www.baidu.com`，不同源，协议不同，一个是`https`另一个是`http`；\n\n2. `https://www.alibaba.com`，不同源，域名不同，一个是`www.baidu.com`另一个是\n`www.alibaba.com`；\n3. `https://www.baidu.com:9527`，不同源，端口不同，一个是`443`另一个是`9527`;\n\n4. `https://www.baidu.com/s`，同源，端口、域名、协议都相同，不同的是路径；\n\n# 何为同源策略\n\n以下为个人总结，如有出入望指出。\n\n1. 禁止不同源之间进行DOM操作；\n\n2. 禁止不同源之间进行AJAX请求；\n\n3. 禁止不同源之间进行读写localStorage和IndexedDB；\n\n>注意：禁止AJAX实际上是浏览器禁止读取响应内容，而不是禁止请求，注意区分。\n\n# 为什么使用同源策略\n\n从大的方面来说肯定是为了用户的信息安全，但是具体如果不使用同源策略会导致什么安全问题呢？分别针对3条规则举例说明：\n\n1. 如果允许跨源操作DOM，假设我有个网站是`https://www.xiaotaotao.vip`，我在我的网站里面使用`iframe`嵌入了一个银行的网站，如果你没注意到url的不同直接输入了你的银行密码，那么我就可以操作银行网站的输入框（操作DOM）就可以获取到你的密码了。\n\n2. 如果允许跨源进行AJAX请求，假设我在自己的网站`https://www.xiaotaotao.vip`写一个音乐播放页面，然后所有的歌曲都可以去调用QQ音乐的接口，导致别人的服务直接被我接入。（该策略应该是针对用户信息安全的，但是我个人目前没有发现或者想到因为AJAX跨源访问导致用户信息泄漏的情况，以后了解了再补充）。\n\n3. 如果允许跨源对localStorage或者IndexDB进行读写，那么就会导致恶意网站在任何时候都可以去读取你存在loalStorage里面的个人数据。\n\n# 为什么要跨域\n\n在前端领域`跨域`这个词语可谓老生常谈，前面我们知道了同源策略是一个非常好的协议，几乎所有的浏览器都遵守这份协议（IE很调皮，它有点不一样），而且这份同源协议对用户的信息安全也是非常的重要，那我们为什么要经常讨论要去跨域呢？\n\n1. 当前开发处于前后段分离的大环境下，这样开发的优势这里不讨论，但是其中有一个问题几乎每个项目都会遇到的。后端的小伙伴开发好接口部署到服务器，前端的小伙伴开发好页面去调用接口进行测试。前后端的代码都部署在生产环境一般也没问题，问题就在于前端在本地进行开发测试的时候需要调用服务器上的后端接口，`本地运行的前端代码`和`服务器上运行的后端接口`必然属于两个不同个的源，所以导致本地处于开发模式的前端代码无法调用服务器上后端的接口。\n\n2. 在很多图片的服务中，经常会出现图片等静态资源会单独存放在一个服务器，然后其他的源去这个静态资源服务器请求图片。图片资源跨域访问后再使用`canvas`处理，最后使用`getImageData()或者toDataUrl()`方法操作图片，这是就会出现跨域问题。`img`标签本身是可以跨域的，但是后续对图片处理的方法会导致跨域，此时就需要设置允许图片服务的跨域。\n\n>跨域应用场景很多，后面补充\n\n# 如何跨域\n\n跨域的方式有很多，主要分为几个方面，分别是利用可以跨域的html标签、针对跨域的Api、nginx反向代理。\n\n1. 一般大家说到的`JSONP`跨域就是利用`<script>`标签可以跨域的特性进行跨域访问。具体的操作就是前端用js创建一个script标签，然后`src`属性中写上需要访问的接口路径和参数就可以了，然后后端返回一段js代码，这段代码会自动执行，从而完成整个跨域的过程。（表示没有用过，听着就很麻烦！）\n\n2. 还有部分可以越过同源策略的Api，例如document.domin、window.name、window.postMessage();\n\t* document.domin只能用在同一协议，同一端口，不同域名的父子域之间,将两个页面的`document.domin`设置为同一个值后，子域就可以访问父域文档信息。具体操作见[文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain);\n\n\t* window.name比较简单，在同一个窗口下，无论该窗口访问了哪些源，只要该窗口没有被关闭，则每个页面的`window.name`都是相通的。可以利用此特性在不同源之间进行简单的传值；\n\n\t* window.postMessage()方法需要在页面中指定你需要发送`什么信息`到`哪个源`,然后去目的源就可以就可以获取数据了。具体的使用方法见[文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage)\n\n3. 前面说的这些跨域方法用起来都不太爽，JSONP只能用于GET请求，使用Api跨域要么只能传递字符串，要么只能传递简单的结构，而且还要受到数据大小的限制，所以在开发中最爽的跨域方法还是使用nginx反响代理。主要的实现原理就是利用服务器去目的源获取数据，然后把数据返回给前端，前端和目的源之间就没有直接联系了，也就不存在跨域问题了。\n\n>参考资料   \n[https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)  \n[https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)    \n[https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18](https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18)\n","slug":"理解同源策略","published":1,"updated":"2019-10-18T07:38:21.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2k84fmb000d3cyheacm7ot5","content":"<h1 id=\"何为同源\"><a href=\"#何为同源\" class=\"headerlink\" title=\"何为同源\"></a>何为同源</h1><p>两个页面的协议、域名、端口都相同的情况下，这两个页面就属于同源。    </p><ol>\n<li><p>协议一般是<code>http</code>或者<code>http</code>;</p>\n</li>\n<li><p>域名一般表现为<code>www.baidu.com</code>；</p>\n</li>\n<li><p>端口在域名后面加上<code>:4000</code>，表示4000端口，如果没有注明端口，则表示默认端口。<code>http</code>默认端口为<code>80</code>，<code>https</code>默认端口为<code>443</code>;</p>\n</li>\n</ol><a id=\"more\"></a>\n\n<blockquote>\n<p>举例：现有一个页面连接为：<code>https://www.baidu.com</code>，以下几种情况来区分是否同源。    </p>\n<ol>\n<li><code>http://www.baidu.com</code>，不同源，协议不同，一个是<code>https</code>另一个是<code>http</code>；</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><p><code>https://www.alibaba.com</code>，不同源，域名不同，一个是<code>www.baidu.com</code>另一个是<br><code>www.alibaba.com</code>；</p>\n</li>\n<li><p><code>https://www.baidu.com:9527</code>，不同源，端口不同，一个是<code>443</code>另一个是<code>9527</code>;</p>\n</li>\n<li><p><code>https://www.baidu.com/s</code>，同源，端口、域名、协议都相同，不同的是路径；</p>\n</li>\n</ol>\n<h1 id=\"何为同源策略\"><a href=\"#何为同源策略\" class=\"headerlink\" title=\"何为同源策略\"></a>何为同源策略</h1><p>以下为个人总结，如有出入望指出。</p>\n<ol>\n<li><p>禁止不同源之间进行DOM操作；</p>\n</li>\n<li><p>禁止不同源之间进行AJAX请求；</p>\n</li>\n<li><p>禁止不同源之间进行读写localStorage和IndexedDB；</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：禁止AJAX实际上是浏览器禁止读取响应内容，而不是禁止请求，注意区分。</p>\n</blockquote>\n<h1 id=\"为什么使用同源策略\"><a href=\"#为什么使用同源策略\" class=\"headerlink\" title=\"为什么使用同源策略\"></a>为什么使用同源策略</h1><p>从大的方面来说肯定是为了用户的信息安全，但是具体如果不使用同源策略会导致什么安全问题呢？分别针对3条规则举例说明：</p>\n<ol>\n<li><p>如果允许跨源操作DOM，假设我有个网站是<code>https://www.xiaotaotao.vip</code>，我在我的网站里面使用<code>iframe</code>嵌入了一个银行的网站，如果你没注意到url的不同直接输入了你的银行密码，那么我就可以操作银行网站的输入框（操作DOM）就可以获取到你的密码了。</p>\n</li>\n<li><p>如果允许跨源进行AJAX请求，假设我在自己的网站<code>https://www.xiaotaotao.vip</code>写一个音乐播放页面，然后所有的歌曲都可以去调用QQ音乐的接口，导致别人的服务直接被我接入。（该策略应该是针对用户信息安全的，但是我个人目前没有发现或者想到因为AJAX跨源访问导致用户信息泄漏的情况，以后了解了再补充）。</p>\n</li>\n<li><p>如果允许跨源对localStorage或者IndexDB进行读写，那么就会导致恶意网站在任何时候都可以去读取你存在loalStorage里面的个人数据。</p>\n</li>\n</ol>\n<h1 id=\"为什么要跨域\"><a href=\"#为什么要跨域\" class=\"headerlink\" title=\"为什么要跨域\"></a>为什么要跨域</h1><p>在前端领域<code>跨域</code>这个词语可谓老生常谈，前面我们知道了同源策略是一个非常好的协议，几乎所有的浏览器都遵守这份协议（IE很调皮，它有点不一样），而且这份同源协议对用户的信息安全也是非常的重要，那我们为什么要经常讨论要去跨域呢？</p>\n<ol>\n<li><p>当前开发处于前后段分离的大环境下，这样开发的优势这里不讨论，但是其中有一个问题几乎每个项目都会遇到的。后端的小伙伴开发好接口部署到服务器，前端的小伙伴开发好页面去调用接口进行测试。前后端的代码都部署在生产环境一般也没问题，问题就在于前端在本地进行开发测试的时候需要调用服务器上的后端接口，<code>本地运行的前端代码</code>和<code>服务器上运行的后端接口</code>必然属于两个不同个的源，所以导致本地处于开发模式的前端代码无法调用服务器上后端的接口。</p>\n</li>\n<li><p>在很多图片的服务中，经常会出现图片等静态资源会单独存放在一个服务器，然后其他的源去这个静态资源服务器请求图片。图片资源跨域访问后再使用<code>canvas</code>处理，最后使用<code>getImageData()或者toDataUrl()</code>方法操作图片，这是就会出现跨域问题。<code>img</code>标签本身是可以跨域的，但是后续对图片处理的方法会导致跨域，此时就需要设置允许图片服务的跨域。</p>\n</li>\n</ol>\n<blockquote>\n<p>跨域应用场景很多，后面补充</p>\n</blockquote>\n<h1 id=\"如何跨域\"><a href=\"#如何跨域\" class=\"headerlink\" title=\"如何跨域\"></a>如何跨域</h1><p>跨域的方式有很多，主要分为几个方面，分别是利用可以跨域的html标签、针对跨域的Api、nginx反向代理。</p>\n<ol>\n<li><p>一般大家说到的<code>JSONP</code>跨域就是利用<code>&lt;script&gt;</code>标签可以跨域的特性进行跨域访问。具体的操作就是前端用js创建一个script标签，然后<code>src</code>属性中写上需要访问的接口路径和参数就可以了，然后后端返回一段js代码，这段代码会自动执行，从而完成整个跨域的过程。（表示没有用过，听着就很麻烦！）</p>\n</li>\n<li><p>还有部分可以越过同源策略的Api，例如document.domin、window.name、window.postMessage();</p>\n<ul>\n<li><p>document.domin只能用在同一协议，同一端口，不同域名的父子域之间,将两个页面的<code>document.domin</code>设置为同一个值后，子域就可以访问父域文档信息。具体操作见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain\" target=\"_blank\" rel=\"noopener\">文档</a>;</p>\n</li>\n<li><p>window.name比较简单，在同一个窗口下，无论该窗口访问了哪些源，只要该窗口没有被关闭，则每个页面的<code>window.name</code>都是相通的。可以利用此特性在不同源之间进行简单的传值；</p>\n</li>\n<li><p>window.postMessage()方法需要在页面中指定你需要发送<code>什么信息</code>到<code>哪个源</code>,然后去目的源就可以就可以获取数据了。具体的使用方法见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</li>\n</ul>\n</li>\n<li><p>前面说的这些跨域方法用起来都不太爽，JSONP只能用于GET请求，使用Api跨域要么只能传递字符串，要么只能传递简单的结构，而且还要受到数据大小的限制，所以在开发中最爽的跨域方法还是使用nginx反响代理。主要的实现原理就是利用服务器去目的源获取数据，然后把数据返回给前端，前端和目的源之间就没有直接联系了，也就不存在跨域问题了。</p>\n</li>\n</ol>\n<blockquote>\n<p>参考资料<br><a href=\"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a><br><a href=\"https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"何为同源\"><a href=\"#何为同源\" class=\"headerlink\" title=\"何为同源\"></a>何为同源</h1><p>两个页面的协议、域名、端口都相同的情况下，这两个页面就属于同源。    </p><ol>\n<li><p>协议一般是<code>http</code>或者<code>http</code>;</p>\n</li>\n<li><p>域名一般表现为<code>www.baidu.com</code>；</p>\n</li>\n<li><p>端口在域名后面加上<code>:4000</code>，表示4000端口，如果没有注明端口，则表示默认端口。<code>http</code>默认端口为<code>80</code>，<code>https</code>默认端口为<code>443</code>;</p>\n</li>\n</ol>","more":"\n\n<blockquote>\n<p>举例：现有一个页面连接为：<code>https://www.baidu.com</code>，以下几种情况来区分是否同源。    </p>\n<ol>\n<li><code>http://www.baidu.com</code>，不同源，协议不同，一个是<code>https</code>另一个是<code>http</code>；</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><p><code>https://www.alibaba.com</code>，不同源，域名不同，一个是<code>www.baidu.com</code>另一个是<br><code>www.alibaba.com</code>；</p>\n</li>\n<li><p><code>https://www.baidu.com:9527</code>，不同源，端口不同，一个是<code>443</code>另一个是<code>9527</code>;</p>\n</li>\n<li><p><code>https://www.baidu.com/s</code>，同源，端口、域名、协议都相同，不同的是路径；</p>\n</li>\n</ol>\n<h1 id=\"何为同源策略\"><a href=\"#何为同源策略\" class=\"headerlink\" title=\"何为同源策略\"></a>何为同源策略</h1><p>以下为个人总结，如有出入望指出。</p>\n<ol>\n<li><p>禁止不同源之间进行DOM操作；</p>\n</li>\n<li><p>禁止不同源之间进行AJAX请求；</p>\n</li>\n<li><p>禁止不同源之间进行读写localStorage和IndexedDB；</p>\n</li>\n</ol>\n<blockquote>\n<p>注意：禁止AJAX实际上是浏览器禁止读取响应内容，而不是禁止请求，注意区分。</p>\n</blockquote>\n<h1 id=\"为什么使用同源策略\"><a href=\"#为什么使用同源策略\" class=\"headerlink\" title=\"为什么使用同源策略\"></a>为什么使用同源策略</h1><p>从大的方面来说肯定是为了用户的信息安全，但是具体如果不使用同源策略会导致什么安全问题呢？分别针对3条规则举例说明：</p>\n<ol>\n<li><p>如果允许跨源操作DOM，假设我有个网站是<code>https://www.xiaotaotao.vip</code>，我在我的网站里面使用<code>iframe</code>嵌入了一个银行的网站，如果你没注意到url的不同直接输入了你的银行密码，那么我就可以操作银行网站的输入框（操作DOM）就可以获取到你的密码了。</p>\n</li>\n<li><p>如果允许跨源进行AJAX请求，假设我在自己的网站<code>https://www.xiaotaotao.vip</code>写一个音乐播放页面，然后所有的歌曲都可以去调用QQ音乐的接口，导致别人的服务直接被我接入。（该策略应该是针对用户信息安全的，但是我个人目前没有发现或者想到因为AJAX跨源访问导致用户信息泄漏的情况，以后了解了再补充）。</p>\n</li>\n<li><p>如果允许跨源对localStorage或者IndexDB进行读写，那么就会导致恶意网站在任何时候都可以去读取你存在loalStorage里面的个人数据。</p>\n</li>\n</ol>\n<h1 id=\"为什么要跨域\"><a href=\"#为什么要跨域\" class=\"headerlink\" title=\"为什么要跨域\"></a>为什么要跨域</h1><p>在前端领域<code>跨域</code>这个词语可谓老生常谈，前面我们知道了同源策略是一个非常好的协议，几乎所有的浏览器都遵守这份协议（IE很调皮，它有点不一样），而且这份同源协议对用户的信息安全也是非常的重要，那我们为什么要经常讨论要去跨域呢？</p>\n<ol>\n<li><p>当前开发处于前后段分离的大环境下，这样开发的优势这里不讨论，但是其中有一个问题几乎每个项目都会遇到的。后端的小伙伴开发好接口部署到服务器，前端的小伙伴开发好页面去调用接口进行测试。前后端的代码都部署在生产环境一般也没问题，问题就在于前端在本地进行开发测试的时候需要调用服务器上的后端接口，<code>本地运行的前端代码</code>和<code>服务器上运行的后端接口</code>必然属于两个不同个的源，所以导致本地处于开发模式的前端代码无法调用服务器上后端的接口。</p>\n</li>\n<li><p>在很多图片的服务中，经常会出现图片等静态资源会单独存放在一个服务器，然后其他的源去这个静态资源服务器请求图片。图片资源跨域访问后再使用<code>canvas</code>处理，最后使用<code>getImageData()或者toDataUrl()</code>方法操作图片，这是就会出现跨域问题。<code>img</code>标签本身是可以跨域的，但是后续对图片处理的方法会导致跨域，此时就需要设置允许图片服务的跨域。</p>\n</li>\n</ol>\n<blockquote>\n<p>跨域应用场景很多，后面补充</p>\n</blockquote>\n<h1 id=\"如何跨域\"><a href=\"#如何跨域\" class=\"headerlink\" title=\"如何跨域\"></a>如何跨域</h1><p>跨域的方式有很多，主要分为几个方面，分别是利用可以跨域的html标签、针对跨域的Api、nginx反向代理。</p>\n<ol>\n<li><p>一般大家说到的<code>JSONP</code>跨域就是利用<code>&lt;script&gt;</code>标签可以跨域的特性进行跨域访问。具体的操作就是前端用js创建一个script标签，然后<code>src</code>属性中写上需要访问的接口路径和参数就可以了，然后后端返回一段js代码，这段代码会自动执行，从而完成整个跨域的过程。（表示没有用过，听着就很麻烦！）</p>\n</li>\n<li><p>还有部分可以越过同源策略的Api，例如document.domin、window.name、window.postMessage();</p>\n<ul>\n<li><p>document.domin只能用在同一协议，同一端口，不同域名的父子域之间,将两个页面的<code>document.domin</code>设置为同一个值后，子域就可以访问父域文档信息。具体操作见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain\" target=\"_blank\" rel=\"noopener\">文档</a>;</p>\n</li>\n<li><p>window.name比较简单，在同一个窗口下，无论该窗口访问了哪些源，只要该窗口没有被关闭，则每个页面的<code>window.name</code>都是相通的。可以利用此特性在不同源之间进行简单的传值；</p>\n</li>\n<li><p>window.postMessage()方法需要在页面中指定你需要发送<code>什么信息</code>到<code>哪个源</code>,然后去目的源就可以就可以获取数据了。具体的使用方法见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</li>\n</ul>\n</li>\n<li><p>前面说的这些跨域方法用起来都不太爽，JSONP只能用于GET请求，使用Api跨域要么只能传递字符串，要么只能传递简单的结构，而且还要受到数据大小的限制，所以在开发中最爽的跨域方法还是使用nginx反响代理。主要的实现原理就是利用服务器去目的源获取数据，然后把数据返回给前端，前端和目的源之间就没有直接联系了，也就不存在跨域问题了。</p>\n</li>\n</ol>\n<blockquote>\n<p>参考资料<br><a href=\"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" target=\"_blank\" rel=\"noopener\">https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a><br><a href=\"https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ba1d4fe6fb9a05ce873d4ad#heading-18</a></p>\n</blockquote>\n"},{"layout":"post","title":"swagger在laravel中的使用","date":"2019-07-19T03:34:01.000Z","_content":"\n# 开始前了解\n\n>推荐一个比较完成的文档[https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896](https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896)  \n<!-- more -->   \n>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     \n\n1. 请求方法\n2. 请求的路径\n3. 请求的参数\n4. 返沪状态\n5. 返回参数  \n\n>另外强调一点，所有的swagger语句都要写在注释里面！\n\n# 请求方法\n\n>主要是指GET、POST等请求方法在swagger中应该如何表示。    \n>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    \n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem\",          //请求的路径\n        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能\n    )\n*/\n```\n\n{% asset_img swagger1.png %}  \n\n# 请求参数\n\n>参数主要有几种形式：\n\n1. query string：\tapi/checktask?item_id=1\n2. path: \tapi/checktask/1\n3. body:\tpost打包传值的形式    \n\n## 简单一点的请求方式\n\n>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：\n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem/failed\",   //请求的路径\n        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能\n        \n        //请求参数\n        @SWG\\Parameter(\n            name=\"item_id\",      //参数key\n            description=\"巡检id\",//参数注释\n            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串\n            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string\n            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）\n        )\n    )\n*/\n```\n\n{% asset_img swagger2.png %}   \n\n## 复杂一点的请求方式\n\n>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。\n\n>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。\n\n```php\n/*\n     *  @SWG\\PUT(\n     *   path=\"/checktaskitem/{item_id}\",       //注意：当有参数是以path的方式传递，要在这里加上{}\n     *   tags={\"巡检\"},\n     *   summary=\"提交巡检结果\",\n     *\n             @SWG\\Parameter(                    //这里就是使用path方式传递的参数\n                name=\"item_id\",\n                required=true,\n                type=\"integer\",\n                description=\"巡检id\",\n                in=\"path\"\n             ),\n             @SWG\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body\n               name=\"person\",\n               in=\"body\",\n               required=true,\n               \n               @SWG\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示\n                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array\n                   \n                   @SWG\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义\n                        property=\"item_serialno\",      //字段名\n                        type=\"string\",                 //字段类型\n                        description=\"和对讲平台给的巡检单号\", //字段的注释\n                   ),\n          \n                   @SWG\\Property(\n                        property=\"item_resultdata\",\n                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）\n                        description=\"巡检结果具体项\",\n                        \n                        @SWG\\Items(                  //注意：如果父级是[]子级是{}，需要加入Items，如果父级{}则不用添加Items\n                            @SWG\\Property(\n                               property=\"item_id\",\n                               type=\"integer\",\n                               description=\"巡检项id\"\n                            ),\n                            @SWG\\Property(\n                                property=\"children\",\n                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象\n                                description=\"具体巡检内容\",\n                                \n                                @SWG\\Items(\n                                    @SWG\\Property(\n                                        property=\"item_id\",\n                                        type=\"integer\",\n                                        description=\"巡检项id\"\n                                    ),\n                                )\n                            ),\n                        )\n                   ),\n               )\n           ),\n      )\n     \n*/\n```\n{% asset_img swagger3.png %}\n{% asset_img swagger4.png %}\n\n# 返回参数\n\n>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。\n\n```php\n/*\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *\n *  @SWG\\Parameter(\n *      name=\"item_id\",\n *      description=\"巡检id\",\n *      required=true,\n *      type=\"integer\",\n *      in=\"query\"\n *  ),\n *\n *  @SWG\\Response(                                             //定义响应参数的时候，首先使用Response\n *         response=200,                                       //响应\n *         description=\"基本信息\",\n *         @SWG\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释\n *            type=\"array\",\n *                  @SWG\\Items(                                //如果父级为[]子级为{}则要是用Items，其中包含了子级{}中的属性的类型和注释\n *                      @SWG\\Property(\n *                         property=\"item_id\",\n *                         type=\"integer\",\n *                         description=\"巡检项ID\"\n *                     ),\n *                     @SWG\\Property(\n *                         property=\"inspection_id\",\n *                         type=\"string\",\n *                         description=\"巡检单id\"\n *                     ),\n *                      @SWG\\Property(\n *                         property=\"item_name\",\n *                         type=\"integer\",\n *                         description=\"巡检项名称\"\n *                     ),\n *\n *                     @SWG\\Property(\n *                         property=\"enterprise_name\",\n *                         type=\"string\",\n *                         description=\"企业名称\"\n *                     ),\n *                  ),\n *\n *                ),\n *     ),\n *   @SWG\\Response(response=401, description=\"用户验证失败\"),\n *   @SWG\\Response(response=500, description=\"服务器错误\"),\n * )\n *\n */\n```\n{% asset_img swagger5.png %}\n{% asset_img swagger6.png %}\n\n# 了解内容\n\n>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。\n\n```php\n/**\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *  @SWG\\Parameter(),\n *  @SWG\\Response(),\n*     security={\n*          {\n*              \"Bearer\":{}\n*          }\n*      },\n* )\n*/\n```\n\n{% asset_img swagger7.png %}\n","source":"_posts/swagger在laravel中的使用.md","raw":"---\nlayout: post\ntitle: swagger在laravel中的使用\ndate: 2019-07-19 11:34:01\ncategories: 开发小工具\n---\n\n# 开始前了解\n\n>推荐一个比较完成的文档[https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896](https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896)  \n<!-- more -->   \n>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     \n\n1. 请求方法\n2. 请求的路径\n3. 请求的参数\n4. 返沪状态\n5. 返回参数  \n\n>另外强调一点，所有的swagger语句都要写在注释里面！\n\n# 请求方法\n\n>主要是指GET、POST等请求方法在swagger中应该如何表示。    \n>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    \n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem\",          //请求的路径\n        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能\n    )\n*/\n```\n\n{% asset_img swagger1.png %}  \n\n# 请求参数\n\n>参数主要有几种形式：\n\n1. query string：\tapi/checktask?item_id=1\n2. path: \tapi/checktask/1\n3. body:\tpost打包传值的形式    \n\n## 简单一点的请求方式\n\n>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：\n\n```php\n/*\n    //请求的方法写在开头，例如：GET、POST、DELETE等\n    @SWG\\GET(\n        tags={\"巡检\"},                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块\n        path=\"/checktaskitem/failed\",   //请求的路径\n        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能\n        \n        //请求参数\n        @SWG\\Parameter(\n            name=\"item_id\",      //参数key\n            description=\"巡检id\",//参数注释\n            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串\n            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string\n            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）\n        )\n    )\n*/\n```\n\n{% asset_img swagger2.png %}   \n\n## 复杂一点的请求方式\n\n>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。\n\n>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。\n\n```php\n/*\n     *  @SWG\\PUT(\n     *   path=\"/checktaskitem/{item_id}\",       //注意：当有参数是以path的方式传递，要在这里加上{}\n     *   tags={\"巡检\"},\n     *   summary=\"提交巡检结果\",\n     *\n             @SWG\\Parameter(                    //这里就是使用path方式传递的参数\n                name=\"item_id\",\n                required=true,\n                type=\"integer\",\n                description=\"巡检id\",\n                in=\"path\"\n             ),\n             @SWG\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body\n               name=\"person\",\n               in=\"body\",\n               required=true,\n               \n               @SWG\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示\n                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array\n                   \n                   @SWG\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义\n                        property=\"item_serialno\",      //字段名\n                        type=\"string\",                 //字段类型\n                        description=\"和对讲平台给的巡检单号\", //字段的注释\n                   ),\n          \n                   @SWG\\Property(\n                        property=\"item_resultdata\",\n                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）\n                        description=\"巡检结果具体项\",\n                        \n                        @SWG\\Items(                  //注意：如果父级是[]子级是{}，需要加入Items，如果父级{}则不用添加Items\n                            @SWG\\Property(\n                               property=\"item_id\",\n                               type=\"integer\",\n                               description=\"巡检项id\"\n                            ),\n                            @SWG\\Property(\n                                property=\"children\",\n                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象\n                                description=\"具体巡检内容\",\n                                \n                                @SWG\\Items(\n                                    @SWG\\Property(\n                                        property=\"item_id\",\n                                        type=\"integer\",\n                                        description=\"巡检项id\"\n                                    ),\n                                )\n                            ),\n                        )\n                   ),\n               )\n           ),\n      )\n     \n*/\n```\n{% asset_img swagger3.png %}\n{% asset_img swagger4.png %}\n\n# 返回参数\n\n>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。\n\n```php\n/*\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *\n *  @SWG\\Parameter(\n *      name=\"item_id\",\n *      description=\"巡检id\",\n *      required=true,\n *      type=\"integer\",\n *      in=\"query\"\n *  ),\n *\n *  @SWG\\Response(                                             //定义响应参数的时候，首先使用Response\n *         response=200,                                       //响应\n *         description=\"基本信息\",\n *         @SWG\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释\n *            type=\"array\",\n *                  @SWG\\Items(                                //如果父级为[]子级为{}则要是用Items，其中包含了子级{}中的属性的类型和注释\n *                      @SWG\\Property(\n *                         property=\"item_id\",\n *                         type=\"integer\",\n *                         description=\"巡检项ID\"\n *                     ),\n *                     @SWG\\Property(\n *                         property=\"inspection_id\",\n *                         type=\"string\",\n *                         description=\"巡检单id\"\n *                     ),\n *                      @SWG\\Property(\n *                         property=\"item_name\",\n *                         type=\"integer\",\n *                         description=\"巡检项名称\"\n *                     ),\n *\n *                     @SWG\\Property(\n *                         property=\"enterprise_name\",\n *                         type=\"string\",\n *                         description=\"企业名称\"\n *                     ),\n *                  ),\n *\n *                ),\n *     ),\n *   @SWG\\Response(response=401, description=\"用户验证失败\"),\n *   @SWG\\Response(response=500, description=\"服务器错误\"),\n * )\n *\n */\n```\n{% asset_img swagger5.png %}\n{% asset_img swagger6.png %}\n\n# 了解内容\n\n>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。\n\n```php\n/**\n *  @SWG\\Get(\n *   path=\"/checktaskitem/failed\",\n *   tags={\"巡检\"},\n *   summary=\"根据巡检id获取该巡检违规项具体信息\",\n *  @SWG\\Parameter(),\n *  @SWG\\Response(),\n*     security={\n*          {\n*              \"Bearer\":{}\n*          }\n*      },\n* )\n*/\n```\n\n{% asset_img swagger7.png %}\n","slug":"swagger在laravel中的使用","published":1,"updated":"2019-09-19T07:05:07.633Z","comments":1,"photos":[],"link":"","_id":"ck2k84foe000o3cyhfcce8amt","content":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>推荐一个比较完成的文档<a href=\"https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896\" target=\"_blank\" rel=\"noopener\">https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896</a>  </p>\n</blockquote>\n<a id=\"more\"></a>   \n<blockquote>\n<p>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     </p>\n</blockquote>\n<ol>\n<li>请求方法</li>\n<li>请求的路径</li>\n<li>请求的参数</li>\n<li>返沪状态</li>\n<li>返回参数  </li>\n</ol>\n<blockquote>\n<p>另外强调一点，所有的swagger语句都要写在注释里面！</p>\n</blockquote>\n<h1 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h1><blockquote>\n<p>主要是指GET、POST等请求方法在swagger中应该如何表示。<br>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    </p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem\",          //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger1.png\">  \n\n<h1 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h1><blockquote>\n<p>参数主要有几种形式：</p>\n</blockquote>\n<ol>\n<li>query string：    api/checktask?item_id=1</li>\n<li>path:     api/checktask/1</li>\n<li>body:    post打包传值的形式    </li>\n</ol>\n<h2 id=\"简单一点的请求方式\"><a href=\"#简单一点的请求方式\" class=\"headerlink\" title=\"简单一点的请求方式\"></a>简单一点的请求方式</h2><blockquote>\n<p>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem/failed\",   //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //请求参数</span></span><br><span class=\"line\"><span class=\"comment\">        <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\">            name=\"item_id\",      //参数key</span></span><br><span class=\"line\"><span class=\"comment\">            description=\"巡检id\",//参数注释</span></span><br><span class=\"line\"><span class=\"comment\">            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串</span></span><br><span class=\"line\"><span class=\"comment\">            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string</span></span><br><span class=\"line\"><span class=\"comment\">            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）</span></span><br><span class=\"line\"><span class=\"comment\">        )</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger2.png\">   \n\n<h2 id=\"复杂一点的请求方式\"><a href=\"#复杂一点的请求方式\" class=\"headerlink\" title=\"复杂一点的请求方式\"></a>复杂一点的请求方式</h2><blockquote>\n<p>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。</p>\n</blockquote>\n<blockquote>\n<p>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@SWG</span>\\PUT(</span></span><br><span class=\"line\"><span class=\"comment\">     *   path=\"/checktaskitem/&#123;item_id&#125;\",       //注意：当有参数是以path的方式传递，要在这里加上&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">     *   summary=\"提交巡检结果\",</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                    //这里就是使用path方式传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">                name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                required=true,</span></span><br><span class=\"line\"><span class=\"comment\">                type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\">                in=\"path\"</span></span><br><span class=\"line\"><span class=\"comment\">             ),</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body</span></span><br><span class=\"line\"><span class=\"comment\">               name=\"person\",</span></span><br><span class=\"line\"><span class=\"comment\">               in=\"body\",</span></span><br><span class=\"line\"><span class=\"comment\">               required=true,</span></span><br><span class=\"line\"><span class=\"comment\">               </span></span><br><span class=\"line\"><span class=\"comment\">               <span class=\"doctag\">@SWG</span>\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示</span></span><br><span class=\"line\"><span class=\"comment\">                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array</span></span><br><span class=\"line\"><span class=\"comment\">                   </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_serialno\",      //字段名</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"string\",                 //字段类型</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"和对讲平台给的巡检单号\", //字段的注释</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">          </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_resultdata\",</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"巡检结果具体项\",</span></span><br><span class=\"line\"><span class=\"comment\">                        </span></span><br><span class=\"line\"><span class=\"comment\">                        <span class=\"doctag\">@SWG</span>\\Items(                  //注意：如果父级是[]子级是&#123;&#125;，需要加入Items，如果父级&#123;&#125;则不用添加Items</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                               property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                               type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                               description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                property=\"children\",</span></span><br><span class=\"line\"><span class=\"comment\">                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象</span></span><br><span class=\"line\"><span class=\"comment\">                                description=\"具体巡检内容\",</span></span><br><span class=\"line\"><span class=\"comment\">                                </span></span><br><span class=\"line\"><span class=\"comment\">                                <span class=\"doctag\">@SWG</span>\\Items(</span></span><br><span class=\"line\"><span class=\"comment\">                                    <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                        property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                                    ),</span></span><br><span class=\"line\"><span class=\"comment\">                                )</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                        )</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">               )</span></span><br><span class=\"line\"><span class=\"comment\">           ),</span></span><br><span class=\"line\"><span class=\"comment\">      )</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger3.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger4.png\">\n\n<h1 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h1><blockquote>\n<p>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *      name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *      type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      in=\"query\"</span></span><br><span class=\"line\"><span class=\"comment\"> *  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(                                             //定义响应参数的时候，首先使用Response</span></span><br><span class=\"line\"><span class=\"comment\"> *         response=200,                                       //响应</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=\"基本信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *         <span class=\"doctag\">@SWG</span>\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释</span></span><br><span class=\"line\"><span class=\"comment\"> *            type=\"array\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                  <span class=\"doctag\">@SWG</span>\\Items(                                //如果父级为[]子级为&#123;&#125;则要是用Items，其中包含了子级&#123;&#125;中的属性的类型和注释</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项ID\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"inspection_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检单id\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"enterprise_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"企业名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=401, description=\"用户验证失败\"),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=500, description=\"服务器错误\"),</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger5.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger6.png\">\n\n<h1 id=\"了解内容\"><a href=\"#了解内容\" class=\"headerlink\" title=\"了解内容\"></a>了解内容</h1><blockquote>\n<p>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(),</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(),</span></span><br><span class=\"line\"><span class=\"comment\">*     security=&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*              \"Bearer\":&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">* )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger7.png\">\n","site":{"data":{}},"excerpt":"<h1 id=\"开始前了解\"><a href=\"#开始前了解\" class=\"headerlink\" title=\"开始前了解\"></a>开始前了解</h1><blockquote>\n<p>推荐一个比较完成的文档<a href=\"https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896\" target=\"_blank\" rel=\"noopener\">https://learnku.com/laravel/t/7430/how-to-write-api-documents-based-on-swagger-php#b5a896</a>  </p>\n</blockquote>","more":"<blockquote>\n<p>swagger主要是用于给api接口写文档的，接口主要有几个关键点需要文档对其进行解释     </p>\n</blockquote>\n<ol>\n<li>请求方法</li>\n<li>请求的路径</li>\n<li>请求的参数</li>\n<li>返沪状态</li>\n<li>返回参数  </li>\n</ol>\n<blockquote>\n<p>另外强调一点，所有的swagger语句都要写在注释里面！</p>\n</blockquote>\n<h1 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h1><blockquote>\n<p>主要是指GET、POST等请求方法在swagger中应该如何表示。<br>如果一个模块或者说一个功能点需要多个接口，可以使用tags属性给接口打个标签。    </p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem\",          //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检员获取其巡检列表\"  //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger1.png\">  \n\n<h1 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h1><blockquote>\n<p>参数主要有几种形式：</p>\n</blockquote>\n<ol>\n<li>query string：    api/checktask?item_id=1</li>\n<li>path:     api/checktask/1</li>\n<li>body:    post打包传值的形式    </li>\n</ol>\n<h2 id=\"简单一点的请求方式\"><a href=\"#简单一点的请求方式\" class=\"headerlink\" title=\"简单一点的请求方式\"></a>简单一点的请求方式</h2><blockquote>\n<p>简单的请求方式就是指通过query或者path这两种形式进行传值的方式，因为不涉及到参数数组、对象的嵌套，因此有多少个参数就写多少个Parameter方法就可以。Parameter方法的参数配置参考：</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    //请求的方法写在开头，例如：GET、POST、DELETE等</span></span><br><span class=\"line\"><span class=\"comment\">    <span class=\"doctag\">@SWG</span>\\GET(</span></span><br><span class=\"line\"><span class=\"comment\">        tags=&#123;\"巡检\"&#125;,                   //相当于给这个请求归类，一般按照模块划分，这里指这个请求属于巡检模块</span></span><br><span class=\"line\"><span class=\"comment\">        path=\"/checktaskitem/failed\",   //请求的路径</span></span><br><span class=\"line\"><span class=\"comment\">        summary=\"根据巡检id获取巡检违规项\" //对改请求的描述，主要说明其功能</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        //请求参数</span></span><br><span class=\"line\"><span class=\"comment\">        <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\">            name=\"item_id\",      //参数key</span></span><br><span class=\"line\"><span class=\"comment\">            description=\"巡检id\",//参数注释</span></span><br><span class=\"line\"><span class=\"comment\">            required=true,      //参数是否必填，注意：这里填写boolean值，不能填写字符串</span></span><br><span class=\"line\"><span class=\"comment\">            type=\"integer\",     //参数值类型，注意：数值为integer，字符串为string</span></span><br><span class=\"line\"><span class=\"comment\">            in=\"query\",         //参数传递的形式，注意：这里主要有query、path、body（比较麻烦，单独讨论）</span></span><br><span class=\"line\"><span class=\"comment\">        )</span></span><br><span class=\"line\"><span class=\"comment\">    )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger2.png\">   \n\n<h2 id=\"复杂一点的请求方式\"><a href=\"#复杂一点的请求方式\" class=\"headerlink\" title=\"复杂一点的请求方式\"></a>复杂一点的请求方式</h2><blockquote>\n<p>使用post或者put等方法的时候往往涉及到了对象、数组的多层嵌套进行传值。在swagger中书写起来比较麻烦一点。对Parameter传递的参数中需要添加一个Schema方法，该方法作用就是可以在文档中生成一个model，展示请求参数的注释和数据结构。</p>\n</blockquote>\n<blockquote>\n<p>如果Schema传递的是个object，那么在Schema方法中的Property就是它的每个属性，如果Schema传递的是个数组，并且数组中每一项都是一个object，那么需要在Property方法中添加Items方法，然后在Items中继续使用Property。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@SWG</span>\\PUT(</span></span><br><span class=\"line\"><span class=\"comment\">     *   path=\"/checktaskitem/&#123;item_id&#125;\",       //注意：当有参数是以path的方式传递，要在这里加上&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">     *   summary=\"提交巡检结果\",</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                    //这里就是使用path方式传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">                name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                required=true,</span></span><br><span class=\"line\"><span class=\"comment\">                type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\">                in=\"path\"</span></span><br><span class=\"line\"><span class=\"comment\">             ),</span></span><br><span class=\"line\"><span class=\"comment\">             <span class=\"doctag\">@SWG</span>\\Parameter(                  //当有body方式传递时，单独用一个parameter，其类型定义为body</span></span><br><span class=\"line\"><span class=\"comment\">               name=\"person\",</span></span><br><span class=\"line\"><span class=\"comment\">               in=\"body\",</span></span><br><span class=\"line\"><span class=\"comment\">               required=true,</span></span><br><span class=\"line\"><span class=\"comment\">               </span></span><br><span class=\"line\"><span class=\"comment\">               <span class=\"doctag\">@SWG</span>\\Schema(                   //Schema的作用时可以有一个model对参数进行解释，具体作用用截图展示</span></span><br><span class=\"line\"><span class=\"comment\">                   type=\"object\"              //给传递的参数定义类型，目前是对象，也可以定义为array</span></span><br><span class=\"line\"><span class=\"comment\">                   </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(                      //注意：当使用了Schema后，每个字段需要用Property来定义</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_serialno\",      //字段名</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"string\",                 //字段类型</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"和对讲平台给的巡检单号\", //字段的注释</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">          </span></span><br><span class=\"line\"><span class=\"comment\">                   <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                        property=\"item_resultdata\",</span></span><br><span class=\"line\"><span class=\"comment\">                        type=\"array\",                 //注意：这里把这个字段定义为了数组（也可以定义为object）</span></span><br><span class=\"line\"><span class=\"comment\">                        description=\"巡检结果具体项\",</span></span><br><span class=\"line\"><span class=\"comment\">                        </span></span><br><span class=\"line\"><span class=\"comment\">                        <span class=\"doctag\">@SWG</span>\\Items(                  //注意：如果父级是[]子级是&#123;&#125;，需要加入Items，如果父级&#123;&#125;则不用添加Items</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                               property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                               type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                               description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                            <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                property=\"children\",</span></span><br><span class=\"line\"><span class=\"comment\">                                type=\"array\",         //同上，这里又有一个数组，并且使用了Items说明数组中嵌套了对象</span></span><br><span class=\"line\"><span class=\"comment\">                                description=\"具体巡检内容\",</span></span><br><span class=\"line\"><span class=\"comment\">                                </span></span><br><span class=\"line\"><span class=\"comment\">                                <span class=\"doctag\">@SWG</span>\\Items(</span></span><br><span class=\"line\"><span class=\"comment\">                                    <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\">                                        property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\">                                        description=\"巡检项id\"</span></span><br><span class=\"line\"><span class=\"comment\">                                    ),</span></span><br><span class=\"line\"><span class=\"comment\">                                )</span></span><br><span class=\"line\"><span class=\"comment\">                            ),</span></span><br><span class=\"line\"><span class=\"comment\">                        )</span></span><br><span class=\"line\"><span class=\"comment\">                   ),</span></span><br><span class=\"line\"><span class=\"comment\">               )</span></span><br><span class=\"line\"><span class=\"comment\">           ),</span></span><br><span class=\"line\"><span class=\"comment\">      )</span></span><br><span class=\"line\"><span class=\"comment\">     </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger3.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger4.png\">\n\n<h1 id=\"返回参数\"><a href=\"#返回参数\" class=\"headerlink\" title=\"返回参数\"></a>返回参数</h1><blockquote>\n<p>返回的参数中必定存在各种数组、对象的嵌套，我们在写swagger的时候其实可以参考复杂类型的参数传递方式，同样都是数组包裹对象，或者对象包裹数组，本质上是一样的。只是原本写在Parameter方法中的Schema现在要写在Response中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(</span></span><br><span class=\"line\"><span class=\"comment\"> *      name=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      description=\"巡检id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      required=true,</span></span><br><span class=\"line\"><span class=\"comment\"> *      type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *      in=\"query\"</span></span><br><span class=\"line\"><span class=\"comment\"> *  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(                                             //定义响应参数的时候，首先使用Response</span></span><br><span class=\"line\"><span class=\"comment\"> *         response=200,                                       //响应</span></span><br><span class=\"line\"><span class=\"comment\"> *         description=\"基本信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *         <span class=\"doctag\">@SWG</span>\\Schema(                                        //同样的这里使用Schema表示可以在model中查看注释</span></span><br><span class=\"line\"><span class=\"comment\"> *            type=\"array\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                  <span class=\"doctag\">@SWG</span>\\Items(                                //如果父级为[]子级为&#123;&#125;则要是用Items，其中包含了子级&#123;&#125;中的属性的类型和注释</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项ID\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"inspection_id\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检单id\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                      <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"item_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"integer\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"巡检项名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                     <span class=\"doctag\">@SWG</span>\\Property(</span></span><br><span class=\"line\"><span class=\"comment\"> *                         property=\"enterprise_name\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         type=\"string\",</span></span><br><span class=\"line\"><span class=\"comment\"> *                         description=\"企业名称\"</span></span><br><span class=\"line\"><span class=\"comment\"> *                     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *                  ),</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *                ),</span></span><br><span class=\"line\"><span class=\"comment\"> *     ),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=401, description=\"用户验证失败\"),</span></span><br><span class=\"line\"><span class=\"comment\"> *   <span class=\"doctag\">@SWG</span>\\Response(response=500, description=\"服务器错误\"),</span></span><br><span class=\"line\"><span class=\"comment\"> * )</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger5.png\">\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger6.png\">\n\n<h1 id=\"了解内容\"><a href=\"#了解内容\" class=\"headerlink\" title=\"了解内容\"></a>了解内容</h1><blockquote>\n<p>很多时候我们的接口是需要带上一个token才能进行使用的，如果没有token就会锁住该接口，不允许访问。这时我们可以在最后加上security，如果没有写则表示这个接口不需要使用token，比如登录接口就不需要。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Get(</span></span><br><span class=\"line\"><span class=\"comment\"> *   path=\"/checktaskitem/failed\",</span></span><br><span class=\"line\"><span class=\"comment\"> *   tags=&#123;\"巡检\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> *   summary=\"根据巡检id获取该巡检违规项具体信息\",</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Parameter(),</span></span><br><span class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@SWG</span>\\Response(),</span></span><br><span class=\"line\"><span class=\"comment\">*     security=&#123;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*              \"Bearer\":&#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*      &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">* )</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2019/07/19/swagger在laravel中的使用/swagger7.png\">"}],"PostAsset":[{"_id":"source/_posts/swagger在laravel中的使用/swagger7.png","slug":"swagger7.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/封装VUE组件并发布到npm/目录结构.png","slug":"目录结构.png","post":"ck2k84fm100043cyh4xhit7z4","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger1.png","slug":"swagger1.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger2.png","slug":"swagger2.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger3.png","slug":"swagger3.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger4.png","slug":"swagger4.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger5.png","slug":"swagger5.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0},{"_id":"source/_posts/swagger在laravel中的使用/swagger6.png","slug":"swagger6.png","post":"ck2k84foe000o3cyhfcce8amt","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck2k84flq00003cyhbmymx4u2","category_id":"ck2k84flz00033cyhbpd40jpa","_id":"ck2k84fm9000a3cyhzejyfrvd"},{"post_id":"ck2k84fm600083cyh76i6ibe0","category_id":"ck2k84flz00033cyhbpd40jpa","_id":"ck2k84fmc000e3cyhilksizbe"},{"post_id":"ck2k84flw00023cyh2c7rwcok","category_id":"ck2k84fm500073cyhkeofiich","_id":"ck2k84fmd000g3cyhtvm8vp1l"},{"post_id":"ck2k84fma000c3cyhbajqzugt","category_id":"ck2k84fm9000b3cyhnnoxb6nh","_id":"ck2k84fmd000h3cyh8c6zys73"},{"post_id":"ck2k84fm100043cyh4xhit7z4","category_id":"ck2k84fm9000b3cyhnnoxb6nh","_id":"ck2k84fmd000j3cyhd396xhi8"},{"post_id":"ck2k84fm400063cyherkvuz09","category_id":"ck2k84fmc000f3cyht179zylt","_id":"ck2k84fme000k3cyhkaw4yp2j"},{"post_id":"ck2k84fm700093cyhjbck0rol","category_id":"ck2k84fmd000i3cyhwqmdhhzq","_id":"ck2k84fme000m3cyhmxgj68in"},{"post_id":"ck2k84fmb000d3cyheacm7ot5","category_id":"ck2k84fme000l3cyhqqi1fr3z","_id":"ck2k84fmf000n3cyhl5lcpgya"},{"post_id":"ck2k84foe000o3cyhfcce8amt","category_id":"ck2k84fm9000b3cyhnnoxb6nh","_id":"ck2k84fof000p3cyhaujmobee"},{"post_id":"ck2k84fm300053cyhp91jiacs","category_id":"ck2k84fm500073cyhkeofiich","_id":"ck2k86avc0000igyh53cy4tey"}],"PostTag":[],"Tag":[]}}